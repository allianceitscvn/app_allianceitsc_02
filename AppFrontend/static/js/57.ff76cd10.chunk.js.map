{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/select2.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","modules/adminpanel/MyUI/Types/arr_tags.js"],"names":["WrapCell","styled","div","WrapNoItem","ArraySplitChar","MTCSelectModernPopover","props","ctc","oneTableCell","sourceData","fnListMyTableCell","fnGetSourceData","fnList","console","warn","_multi","_currentValues","valueCell","style","minWidth","minHeight","undefined","length","className","i18next","t","type","valueSelected","multi","showLoading","_showLoading","arraySplitChar","simpleValue","hasRightPanel","onChange","itemOption","log","Value","_valueUpdate","Array","isArray","_currentArrayValues","HIs","isString","split","indexOf","push","join","splice","HUtils","runFuntion","cbSuccess","cbError","MTCSelectModern","useConfigTableCell","optionSelected","FlowConvertSelectedMultiToArrayOptions","classNameWrap","overlay","overlayClassName","placement","destroyTooltipOnHide","disabled","canEdit","options","kfnGetScreenCode","fnListOfTableCell","_fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","_arrcanEditF","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","IsLocked","useEffect","moreObj","updateFieldData","v","opts","apiController","fnGetApiPath","newValue","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","button","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist","WrapUI","MUIArrTags","values","map","i","Text","kClientKeyUI","_UI_Missing"],"mappings":"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","file":"static/js/57.ff76cd10.chunk.js","sourcesContent":["import { HIs, HUtils, MyUI } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\nimport { Popover } from \"src/core/components\"\r\nimport styled from \"styled-components\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport i18next from \"i18next\"\r\nimport MUIArrTags from \"../../MyUI/Types/arr_tags\"\r\nimport { FlowConvertSelectedMultiToArrayOptions } from \"src/helpers/Flows/MNeedUpdateMLib\"\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  & > div {\r\n    height: 100%;\r\n  }\r\n  & .no-items {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-height: 36px;\r\n  }\r\n`\r\nconst WrapNoItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 36px;\r\n  font-style: italic;\r\n  color: #adadad;\r\n`\r\nconst ArraySplitChar = \",\"\r\nfunction MTCSelectModernPopover(props) {\r\n  const { ctc } = props\r\n  const oneTableCell = ctc.oneTableCell\r\n  const sourceData = fnListMyTableCell.fnGetSourceData(ctc.fnList)\r\n  console.warn(\"sourceData:\", sourceData)\r\n  let _multi = true\r\n  let _simpleValue = true\r\n  let _currentValues = ctc.valueCell\r\n  return (\r\n    <div style={{ minWidth: \"100px\", minHeight: \"50px\" }}>\r\n      {(sourceData == null ||\r\n        sourceData == undefined ||\r\n        (sourceData && sourceData.length === 0)) && (\r\n        <WrapNoItem className=\"no-items\">\r\n          {i18next.t(\"No item option\")}\r\n        </WrapNoItem>\r\n      )}\r\n      {sourceData && sourceData.length > 0 && (\r\n        <MyUI\r\n          type=\"select_box_search_v2\"\r\n          sourceData={sourceData}\r\n          valueSelected={_currentValues}\r\n          multi={_multi}\r\n          showLoading={oneTableCell._showLoading}\r\n          arraySplitChar={ArraySplitChar}\r\n          simpleValue={_simpleValue}\r\n          hasRightPanel={_multi === true && sourceData.length > 10}\r\n          onChange={itemOption => {\r\n            console.log(\r\n              \"onChange:\",\r\n              itemOption,\r\n              itemOption.Value,\r\n              _currentValues\r\n            )\r\n            let _valueUpdate = \"\"\r\n            if (Array.isArray(itemOption) && itemOption.length == 0) {\r\n              //remove all\r\n              _valueUpdate = \"\"\r\n            } else if (_multi == true) {\r\n              let _currentArrayValues = _currentValues || []\r\n              if (_currentValues == null || _currentValues === \"\") {\r\n                _currentArrayValues = []\r\n              } else if (HIs.isString(_currentValues)) {\r\n                _currentArrayValues = _currentValues.split(ArraySplitChar)\r\n              }\r\n\r\n              if (_currentArrayValues.indexOf(itemOption.Value) == -1) {\r\n                _currentArrayValues.push(itemOption.Value)\r\n                _valueUpdate = _currentArrayValues.join(ArraySplitChar)\r\n              } else {\r\n                _currentArrayValues.splice(\r\n                  _currentArrayValues.indexOf(itemOption.Value),\r\n                  1\r\n                )\r\n                _valueUpdate = _currentArrayValues.join(ArraySplitChar)\r\n              }\r\n            } else if (itemOption.Value !== _currentValues) {\r\n              //truong hop ko multi\r\n              _valueUpdate = itemOption.Value\r\n            }\r\n            //\r\n\r\n            //\r\n            oneTableCell._showLoading = true\r\n            HUtils.runFuntion(ctc, \"updateFieldData\", [\r\n              _valueUpdate,\r\n              {\r\n                cbSuccess: () => {\r\n                  oneTableCell._showLoading = false\r\n                },\r\n                cbError: () => {\r\n                  oneTableCell._showLoading = false\r\n                },\r\n              },\r\n            ])\r\n            //hide popover but multi so no hide\r\n            if (_multi !== true && props.hide) {\r\n              props.hide()\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default function MTCSelectModern(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCText:\", props)\r\n  const sourceData = fnListMyTableCell.fnGetSourceData(ctc.fnList)\r\n  const optionSelected = FlowConvertSelectedMultiToArrayOptions(\r\n    ctc.valueCell,\r\n    sourceData,\r\n    { arraySplitChar: ArraySplitChar }\r\n  )\r\n  return (\r\n    <WrapCell className={ctc.classNameWrap(\"mct-select_modern\")}>\r\n      <Popover\r\n        overlay={props => {\r\n          return <MTCSelectModernPopover ctc={ctc} {...props} />\r\n        }}\r\n        overlayClassName=\"m-popover m-popover-full\"\r\n        placement=\"bottom\"\r\n        destroyTooltipOnHide={true}\r\n        disabled={ctc.canEdit === false}\r\n      >\r\n        {/* <div>{ctc.getTextDisplaySelect()}</div> */}\r\n        <div>\r\n          <MUIArrTags options={optionSelected} />\r\n        </div>\r\n      </Popover>\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","import React from \"react\"\r\nimport { kClientKeyUI } from \"src/helpers/K\"\r\nimport styled from \"styled-components\"\r\n\r\nconst WrapUI = styled.div`\r\n  display: inline-block;\r\n  & > span {\r\n    padding: 0px 2px;\r\n    margin-bottom: 2px;\r\n    background: red;\r\n    display: inline-block;\r\n    margin-right: 2px;\r\n    border: 1px solid rgba(0, 126, 255, 0.08);\r\n    border-radius: 3px;\r\n    background-color: rgba(0, 126, 255, 0.08);\r\n    color: #007eff;\r\n    &.a-missing {\r\n      color: #c7c7c7;\r\n      background-color: #c7c7c722;\r\n      border-color: #c7c7c755;\r\n    }\r\n  }\r\n`\r\nexport default function MUIArrTags(props) {\r\n  const { values, options } = props\r\n  return (\r\n    <WrapUI className=\"mui-arr_tags\">\r\n      {options &&\r\n        options.length > 0 &&\r\n        options.map((v, i) => {\r\n          return (\r\n            <span\r\n              key={i}\r\n              title={v.Text}\r\n              className={`${\r\n                v[kClientKeyUI._UI_Missing] === true ? \"a-missing\" : \"\"\r\n              }`}\r\n            >\r\n              {v.Text}\r\n            </span>\r\n          )\r\n        })}\r\n      {values &&\r\n        values.length > 0 &&\r\n        values.map((v, i) => {\r\n          return (\r\n            <span key={i} title={v}>\r\n              {v}\r\n            </span>\r\n          )\r\n        })}\r\n    </WrapUI>\r\n  )\r\n}\r\n"],"sourceRoot":""}