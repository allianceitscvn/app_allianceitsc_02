{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/list_text.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","MTCListText","props","ctc","useConfigTableCell","more","_styleLabel","className","list","length","map","v","i","_fieldName","fieldName","_styleRow","styleRow","style","title","styleLabel","type","row","cell","extra","index","fnList","cbSuccessUpdate","console","warn","forceUpdate","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","Array","isArray","kfnRenderBadge","customMore","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","moreObj","updateFieldData","opts","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","Object","keys","renderHide","classNameWrap","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/121.88c7f1d8.chunk.js","sourcesContent":["import { MyTableCell } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nconst WrapCell = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  & > div {\r\n    width: 100%;\r\n    flex: 1;\r\n    // min-height: 35px;\r\n    position: relative;\r\n    display: flex;\r\n    & > div.a-title {\r\n      //   height: 100%;\r\n      width: 50px;\r\n      background: #f9fafb;\r\n      border-right: 1px solid #e9ecef;\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n    & > div.a-cotent {\r\n      flex: 1;\r\n      position: relative;\r\n      min-height: 35px;\r\n    }\r\n  }\r\n  & > div:not(:last-child) {\r\n    border-bottom: 1px solid #eff1f3;\r\n  }\r\n`\r\n\r\nexport default function MTCListText(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const { more } = ctc\r\n  // console.warn(\"render MTCListText:\", props, ctc)\r\n  let _styleLabel = more[\"styleLabel\"] || {}\r\n  return (\r\n    <WrapCell className=\"mtc-list_text\">\r\n      {more &&\r\n        more.list &&\r\n        more.list.length > 0 &&\r\n        more.list.map((v, i) => {\r\n          let _fieldName = v.fieldName\r\n          let _styleRow = v.styleRow || {}\r\n          return (\r\n            <div key={i} style={_styleRow}>\r\n              {v.title && (\r\n                <div\r\n                  className=\"a-title\"\r\n                  style={{ ..._styleLabel, ...v.styleLabel }}\r\n                >\r\n                  {v.title}\r\n                </div>\r\n              )}\r\n              <div className=\"a-cotent\">\r\n                <MyTableCell\r\n                  type={v.type || \"textarea\"}\r\n                  row={props.row}\r\n                  cell={props.row[_fieldName]}\r\n                  extra={{ ...props.extra, fieldName: _fieldName }}\r\n                  index={props.index}\r\n                  fnList={{\r\n                    cbSuccessUpdate: () => {\r\n                      console.warn(\"cbSuccessUpdate\", ctc.row)\r\n                      ctc.forceUpdate()\r\n                    },\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}