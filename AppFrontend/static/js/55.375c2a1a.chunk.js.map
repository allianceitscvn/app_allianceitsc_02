{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/readonly_array.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","modules/adminpanel/MyUI/Types/arr_tags.js"],"names":["WrapCell","styled","div","MTCArrayEditableModal","props","ctc","useConfigTableCell","more","_arrValueCell","valueCell","HIs","isArray","_optionSelected","_idOptions","fIDOption","_fName","fName","map","v","i","Value","Id","Text","length","className","classNameWrap","style","styleWrap","options","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","Array","kfnRenderBadge","customMore","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","type","onSendMsg","msg","console","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","moreObj","updateFieldData","opts","warn","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist","WrapUI","MUIArrTags","values","kClientKeyUI","_UI_Missing"],"mappings":"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","file":"static/js/55.375c2a1a.chunk.js","sourcesContent":["import { HIs } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport MUIArrTags from \"../../MyUI/Types/arr_tags\"\r\n\r\nconst WrapCell = styled.div`\r\n  padding: 2px;\r\n  & > div {\r\n    height: 100%;\r\n  }\r\n  & .no-items {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-height: 36px;\r\n  }\r\n  &.styled-mini {\r\n    & .mui-arr_tags {\r\n      width: 100%;\r\n      & > span {\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        max-width: 100%;\r\n      }\r\n    }\r\n  }\r\n`\r\nexport default function MTCArrayEditableModal(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const { more } = ctc\r\n  let _arrValueCell = []\r\n  if (ctc.valueCell && HIs.isArray(ctc.valueCell)) {\r\n    _arrValueCell = ctc.valueCell\r\n  }\r\n  let _optionSelected = []\r\n  let _idOptions = more.fIDOption\r\n  let _fName = more.fName\r\n  if (_idOptions && _fName) {\r\n    _optionSelected = _arrValueCell.map((v, i) => {\r\n      if (_fName) {\r\n        return {\r\n          Value: v[_idOptions] || v.Id,\r\n          Text: v[_fName] || \"\",\r\n        }\r\n      }\r\n      return {\r\n        Value: v[_idOptions] || v.Id,\r\n        Text: \"\",\r\n      }\r\n    })\r\n  } else if (_arrValueCell.length > 0 && typeof _arrValueCell[0] === \"string\") {\r\n    _optionSelected = _arrValueCell.map((v, i) => {\r\n      return {\r\n        Value: v,\r\n        Text: v,\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <WrapCell\r\n      className={ctc.classNameWrap(\"mct-readonly_array\")}\r\n      style={ctc.styleWrap()}\r\n    >\r\n      <div>\r\n        <MUIArrTags options={_optionSelected} />\r\n      </div>\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","import React from \"react\"\r\nimport { kClientKeyUI } from \"src/helpers/K\"\r\nimport styled from \"styled-components\"\r\n\r\nconst WrapUI = styled.div`\r\n  display: inline-block;\r\n  & > span {\r\n    padding: 0px 2px;\r\n    margin-bottom: 2px;\r\n    background: red;\r\n    display: inline-block;\r\n    margin-right: 2px;\r\n    border: 1px solid rgba(0, 126, 255, 0.08);\r\n    border-radius: 3px;\r\n    background-color: rgba(0, 126, 255, 0.08);\r\n    color: #007eff;\r\n    &.a-missing {\r\n      color: #c7c7c7;\r\n      background-color: #c7c7c722;\r\n      border-color: #c7c7c755;\r\n    }\r\n  }\r\n`\r\nexport default function MUIArrTags(props) {\r\n  const { values, options } = props\r\n  return (\r\n    <WrapUI className=\"mui-arr_tags\">\r\n      {options &&\r\n        options.length > 0 &&\r\n        options.map((v, i) => {\r\n          return (\r\n            <span\r\n              key={i}\r\n              title={v.Text}\r\n              className={`${\r\n                v[kClientKeyUI._UI_Missing] === true ? \"a-missing\" : \"\"\r\n              }`}\r\n            >\r\n              {v.Text}\r\n            </span>\r\n          )\r\n        })}\r\n      {values &&\r\n        values.length > 0 &&\r\n        values.map((v, i) => {\r\n          return (\r\n            <span key={i} title={v}>\r\n              {v}\r\n            </span>\r\n          )\r\n        })}\r\n    </WrapUI>\r\n  )\r\n}\r\n"],"sourceRoot":""}