{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/obj_editor.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","helpers/Paste.js"],"names":["JsonContainer","styled","div","JsonContainerMini","WrapJsonModalContent","ModeType","text","obj_editor","ModalEditor","props","ctc","obj","config","fnList","jsonValue","validJson","isXML","refCode","React","useRef","useState","v","setV","vText","setVText","_defaultTab","textarea","mode","setMode","isLoading","setIsLoading","canEdit","onUpdate","json","console","warn","updated_src","useEffect","_text","JSON","stringify","MyModal","renderHeader","cModal","inMyModal","title","className","disabled","onClick","error","color","style","padding","position","right","HPaste","copyTextToClipboard","AHUI","flex","overflow","minHeight","src","collapsed","jsonview","onEdit","onAdd","onDelete","monaco","type","value","language","theme","height","wrapperProps","onChange","onMount","e","focus","innerRef","r","current","options","name","statementIndent","lineNumbers","lineWrapping","indentWithTabs","tabSize","attrs","borderTop","width","_canSave","_valueToSave","_objToSave","editor","getValue","parse","HJson","getString","HUtils","runFuntion","cbSuccess","cbError","msg","MTCObjEditor","useConfigTableCell","_obj","_objCount","_validJson","_isXML","valueCell","length","Object","keys","startsWith","endsWith","getSharedConfig","moreObj","showMini","showContentJson","showShortText","countShortText","enableClipboard","displayDataTypes","defaultTab","classNameWrap","scrwhhover","showFromComponent","size","backdrop","showHeader","updateCell","opts","updateFieldData","FlowGetConfigModal","styleWrap","cursor","fontWeight","fontSize","FlowGetCustomDisplay","defaultConfigDisplay","countShort","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","getObj","_optionField","slice","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","OneTableCell","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","apiController","fnGetApiPath","newValue","fnForceUpdateTable","cbSuccessUpdate","requestCustom","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","button","renderHide","customConfig","cls","styledMini","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","finally","hide","onClickFiles","propsComponent","onChangeData","data","mergeObjIfExist","PasteHelper","fnUpload","fnPatse","preventDefault","items","clipboardData","_files","i","item","kind","_file","getAsFile","push","originalEvent","getData","window","document","execCommand","checkPasteSupported","el","createElement","setAttribute","onpaste","addEventUploadFileAfterPaste","removeEventUploadFileAfterPaste","removeEvenPaste","removeEventListener","addEventPaste","addEventListener","navigator","clipboard","writeText"],"mappings":"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","file":"static/js/47.e1fa2aa2.chunk.js","sourcesContent":["import { HJson, HUtils, MyBase, MyLib, MyUI } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport ReactJson from \"react-json-view\"\r\nimport { Button } from \"reactstrap\"\r\nimport MyModal from \"src/core/components/MyModal/MyModal\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport HPaste from \"src/helpers/Paste\"\r\nimport {\r\n  FlowGetCustomDisplay,\r\n  FlowGetConfigModal,\r\n} from \"src/helpers/Flows/TableCell\"\r\n\r\nexport const JsonContainer = styled.div`\r\n  // max-height: 120px;\r\n  overflow: overlay;\r\n`\r\nexport const JsonContainerMini = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: green;\r\n  font-weight: bold;\r\n  padding: 2px;\r\n  cursor: pointer;\r\n`\r\nconst WrapJsonModalContent = styled.div`\r\n  overflow: hidden;\r\n  max-height: calc(100vh - 5rem);\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  & .a-mode-text textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n  & .a-mode-text .react-codemirror2 {\r\n    border: 1px solid #e9ecef;\r\n    margin-bottom: 5px;\r\n  }\r\n  & .a-monaco {\r\n    overflow: hidden !important;\r\n  }\r\n`\r\n\r\nconst ModeType = {\r\n  // json: \"json\",\r\n  text: \"text\",\r\n  obj_editor: \"obj_editor\",\r\n  // textarea: \"textarea\",\r\n  // monaco: \"monaco\",\r\n  // mirror: \"mirror\",\r\n}\r\nconst ModalEditor = props => {\r\n  const { ctc, obj, config, fnList, jsonValue, validJson, isXML } = props\r\n  const refCode = React.useRef(null)\r\n  const [v, setV] = React.useState(obj)\r\n  const [vText, setVText] = React.useState(\"\")\r\n  let _defaultTab = ModeType.obj_editor\r\n  // if (config && config.jsonview && config.jsonview.defaultTab) {\r\n  //   _defaultTab = config.jsonview.defaultTab\r\n  // }\r\n  if (!validJson) {\r\n    _defaultTab = ModeType.textarea\r\n  }\r\n  const [mode, setMode] = React.useState(_defaultTab)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  const canEdit = ctc.canEdit\r\n  const onUpdate =\r\n    ctc.canEdit === false\r\n      ? false\r\n      : json => {\r\n          console.warn(\"json\", json)\r\n          setV(json.updated_src)\r\n        }\r\n\r\n  const checkTextToJson = text => {\r\n    try {\r\n      let _obj = JSON.parse(text)\r\n      setV(_obj)\r\n      return _obj\r\n    } catch (error) {\r\n      console.warn(\"parse json error!\", error)\r\n      AHUI.showToastError(\"Parse JSON error!\")\r\n    }\r\n  }\r\n  React.useEffect(() => {\r\n    if (mode != ModeType.json) {\r\n      let _text = JSON.stringify(v, null, 2)\r\n      if (validJson === false) {\r\n        _text = jsonValue\r\n      }\r\n      setVText(_text)\r\n    }\r\n  }, [])\r\n  return (\r\n    <WrapJsonModalContent>\r\n      {MyModal.renderHeader({\r\n        cModal: props.inMyModal,\r\n        title: props => {\r\n          return (\r\n            <>\r\n              <div className=\"btn-group\">\r\n                {/* <Button\r\n                  disabled={!validJson}\r\n                  onClick={() => {\r\n                    if (checkTextToJson(vText)) {\r\n                      setMode(ModeType.json)\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.json ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Json\r\n                </Button> */}\r\n                <Button\r\n                  disabled={!validJson}\r\n                  onClick={() => {\r\n                    try {\r\n                      let _text = JSON.stringify(v, null, 2)\r\n                      setVText(_text)\r\n                      setMode(ModeType.text)\r\n                    } catch (error) {\r\n                      console.warn(\"parse json error!\")\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.text ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Code\r\n                </Button>\r\n                <Button\r\n                  disabled={!validJson}\r\n                  onClick={() => {\r\n                    try {\r\n                      let _text = JSON.stringify(v, null, 2)\r\n                      setVText(_text)\r\n                      setMode(ModeType.obj_editor)\r\n                    } catch (error) {\r\n                      console.warn(\"parse json error!\")\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.obj_editor ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Obj Editor\r\n                </Button>\r\n                {/* <Button\r\n                  onClick={() => {\r\n                    try {\r\n                      if (isXML) {\r\n                        setVText(jsonValue)\r\n                        setMode(ModeType.textarea)\r\n                      } else {\r\n                        let _text = JSON.stringify(v, null, 2)\r\n                        setVText(_text)\r\n                        setMode(ModeType.textarea)\r\n                      }\r\n                    } catch (error) {\r\n                      console.warn(\"parse json error!\")\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.textarea ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Textarea\r\n                </Button>\r\n                <Button\r\n                  disabled={!validJson && isXML !== true}\r\n                  onClick={() => {\r\n                    try {\r\n                      if (isXML) {\r\n                        setVText(jsonValue)\r\n                        setMode(ModeType.monaco)\r\n                      } else {\r\n                        let _text = JSON.stringify(v, null, 2)\r\n                        setVText(_text)\r\n                        setMode(ModeType.monaco)\r\n                      }\r\n                    } catch (error) {\r\n                      console.warn(\"parse json error!\")\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.monaco ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Monaco\r\n                </Button> */}\r\n                {validJson === false && isXML !== true && (\r\n                  <div style={{ color: \"red\", padding: \"0px 5px\" }}>\r\n                    JSON Error!!!\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div\r\n                className=\"btn-group\"\r\n                style={{ position: \"absolute\", right: \"2rem\" }}\r\n              >\r\n                {validJson === true && (\r\n                  <Button\r\n                    onClick={() => {\r\n                      console.warn(\"copy json\")\r\n                      let _text = JSON.stringify(v, null, 2)\r\n                      HPaste.copyTextToClipboard(_text, () => {\r\n                        AHUI.showToastSuccess(\"Copied!\")\r\n                      })\r\n                    }}\r\n                    color={\"secondary\"}\r\n                  >\r\n                    Copy JSON\r\n                  </Button>\r\n                )}\r\n                {validJson === false && isXML === true && (\r\n                  <Button\r\n                    onClick={() => {\r\n                      console.warn(\"copy xml\")\r\n                      HPaste.copyTextToClipboard(jsonValue, () => {\r\n                        AHUI.showToastSuccess(\"Copied!\")\r\n                      })\r\n                    }}\r\n                    color={\"secondary\"}\r\n                  >\r\n                    Copy XML\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </>\r\n          )\r\n        },\r\n      })}\r\n      <div\r\n        style={{\r\n          flex: 1,\r\n          overflow: `${\r\n            mode === ModeType.text || mode === ModeType.textarea\r\n              ? \"hidden\"\r\n              : \"auto\"\r\n          }`,\r\n          minHeight: \"100px\",\r\n        }}\r\n        className={`a-${mode}`}\r\n      >\r\n        {mode === ModeType.json && (\r\n          <ReactJson\r\n            src={v}\r\n            collapsed={3}\r\n            // shouldCollapse={() => {\r\n            //   return null\r\n            // }}\r\n            {...config.jsonview}\r\n            onEdit={onUpdate}\r\n            onAdd={onUpdate}\r\n            onDelete={onUpdate}\r\n          />\r\n        )}\r\n        {mode === ModeType.monaco && (\r\n          <MyLib\r\n            type=\"monacoeditor\"\r\n            value={vText}\r\n            language={isXML ? \"xml\" : \"json\"}\r\n            theme={\"light\"}\r\n            height={\"calc(100vh - 12rem)\"}\r\n            wrapperProps={{}}\r\n            onChange={v => {\r\n              // console.warn(\"onChange\", v)\r\n              setVText(v)\r\n            }}\r\n            onMount={e => {\r\n              // console.warn(\"editorDidMount\", e, e.focus, e.getValue)\r\n              if (e && e.focus) {\r\n                e.focus()\r\n              }\r\n            }}\r\n            style={{\r\n              overflow: \"hidden\",\r\n            }}\r\n          />\r\n        )}\r\n        {mode === ModeType.text && (\r\n          <div className=\"a-mode-text\">\r\n            <MyLib\r\n              type={\"code_mirror\"}\r\n              innerRef={r => {\r\n                console.warn(\"innerRef\")\r\n                refCode.current = r\r\n              }}\r\n              value={vText}\r\n              options={{\r\n                // mode: \"javascript\",\r\n                mode: {\r\n                  name: \"javascript\",\r\n                  json: true,\r\n                  statementIndent: 2,\r\n                },\r\n                lineNumbers: true,\r\n                lineWrapping: true,\r\n                indentWithTabs: false,\r\n                tabSize: 2,\r\n                theme: \"default\",\r\n              }}\r\n            />\r\n            {/* <MyBase\r\n              type=\"monacoeditor\"\r\n              value={vText}\r\n              onChange={v => {\r\n                setVText(v)\r\n              }}\r\n              attrs={{\r\n                theme: \"light\",\r\n                language: \"json\",\r\n                // height: \"50vh\",\r\n              }}\r\n            /> */}\r\n          </div>\r\n        )}\r\n        {mode === ModeType.obj_editor && <MyUI type=\"obj_editor\" />}\r\n        {mode === ModeType.textarea && (\r\n          <div className=\"a-mode-text\">\r\n            <MyBase\r\n              type=\"textarea\"\r\n              value={vText}\r\n              onChange={v => {\r\n                setVText(v)\r\n              }}\r\n              attrs={{}}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      {canEdit && (\r\n        <div style={{ borderTop: \"1px solid #e9ecef\" }}>\r\n          <Button\r\n            color=\"primary\"\r\n            style={{ width: \"100%\" }}\r\n            disabled={isLoading}\r\n            onClick={() => {\r\n              console.warn(\"onClick:\", props, vText)\r\n              let _canSave = true\r\n              let _valueToSave = \"\"\r\n              let _objToSave = v\r\n              if (isXML == true) {\r\n                _canSave = true\r\n                _valueToSave = vText\r\n              } else {\r\n                if (mode !== ModeType.json) {\r\n                  if (\r\n                    mode == ModeType.text &&\r\n                    refCode.current &&\r\n                    refCode.current.editor\r\n                  ) {\r\n                    try {\r\n                      let _text = refCode.current.editor.getValue()\r\n                      if (_text === \"\") {\r\n                        _objToSave = null\r\n                      } else {\r\n                        _objToSave = JSON.parse(_text)\r\n                      }\r\n                    } catch (error) {\r\n                      _canSave = false\r\n                      AHUI.showToastWarning(\"Parse JSON Error!!!\")\r\n                    }\r\n                  } else {\r\n                    try {\r\n                      if (vText === \"\") {\r\n                        _objToSave = null\r\n                      } else {\r\n                        _objToSave = JSON.parse(vText)\r\n                      }\r\n                    } catch (error) {\r\n                      _canSave = false\r\n                      AHUI.showToastWarning(\"Parse JSON Error!!!\")\r\n                    }\r\n                  }\r\n                }\r\n                _valueToSave =\r\n                  _objToSave === null ? null : HJson.getString(_objToSave)\r\n              }\r\n\r\n              if (_canSave) {\r\n                setIsLoading(true)\r\n                HUtils.runFuntion(fnList, \"updateCell\", [\r\n                  _valueToSave,\r\n                  {\r\n                    cbSuccess: r => {\r\n                      console.warn(\"cbSuccess:\", r)\r\n                      setIsLoading(false)\r\n                      HUtils.runFuntion(fnList, \"hideModal\", [])\r\n                    },\r\n                    cbError: e => {\r\n                      console.warn(\"cbErrro:\", e)\r\n                      if (e.msg) {\r\n                        AHUI.showToastWarning(e.msg)\r\n                      }\r\n                      setIsLoading(false)\r\n                    },\r\n                  },\r\n                ])\r\n              }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </WrapJsonModalContent>\r\n  )\r\n}\r\nexport default function MTCObjEditor(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  let _obj = null\r\n  let _objCount = 0\r\n  let _validJson = true\r\n  let _isXML = false\r\n  if (typeof ctc.valueCell === \"string\" && ctc.valueCell.length > 0) {\r\n    try {\r\n      _obj = JSON.parse(ctc.valueCell)\r\n      _objCount = Object.keys(_obj).length\r\n    } catch (error) {\r\n      console.warn(\"Parse Json Error\", error)\r\n      _obj = {}\r\n      //truong hop cell la null hoac rong thi ko phai loi\r\n      if (ctc.valueCell != null && ctc.valueCell != \"\") {\r\n        _validJson = false\r\n        if (ctc.valueCell.startsWith(\"<\") && ctc.valueCell.endsWith(\">\")) {\r\n          _isXML = true\r\n        }\r\n      }\r\n    }\r\n  } else if (typeof ctc.valueCell === \"object\") {\r\n    //bo sung ho tro value type object\r\n    _obj = ctc.valueCell\r\n    if (_obj != null) {\r\n      _objCount = Object.keys(_obj).length\r\n    }\r\n  }\r\n  const config = {\r\n    ...ctc.getSharedConfig(),\r\n    ...ctc.moreObj,\r\n    jsonview: {\r\n      showMini: true,\r\n      showContentJson: true,\r\n      showShortText: true,\r\n      countShortText: 50,\r\n      enableClipboard: false,\r\n      displayDataTypes: false,\r\n      defaultTab: \"text\",\r\n      ...ctc.moreObj.jsonview,\r\n    },\r\n  }\r\n  // console.warn(\"render json_editor:\", _obj)\r\n  return (\r\n    <div\r\n      className={ctc.classNameWrap(\"mtc-json_editor\", { scrwhhover: true })}\r\n      onClick={() => {\r\n        console.warn(\"Click json:\", props)\r\n        MyModal.showFromComponent(\r\n          props => {\r\n            return (\r\n              <ModalEditor\r\n                {...props}\r\n                ctc={ctc}\r\n                validJson={_validJson}\r\n                isXML={_isXML}\r\n                jsonValue={ctc.valueCell}\r\n                obj={_obj || {}}\r\n                config={config}\r\n              />\r\n            )\r\n          },\r\n          {\r\n            title: \"JSON\",\r\n            size: \"xl\",\r\n            backdrop: \"static\",\r\n            showHeader: false,\r\n            fnList: {\r\n              updateCell: (v, opts) => {\r\n                console.warn(\"Updatecell:\", v, opts)\r\n                ctc.updateFieldData(v, opts)\r\n              },\r\n            },\r\n            ...FlowGetConfigModal({ ...ctc }),\r\n          }\r\n        )\r\n      }}\r\n      style={ctc.styleWrap({\r\n        // maxHeight: \"120px\",\r\n        padding: \"0px\",\r\n        cursor: ctc.canEdit === true ? \"pointer\" : \"inherit\",\r\n        overflow: \"auto\",\r\n        minHeight: _objCount > 0 ? \"47px\" : \"inherit\",\r\n        ...config.style,\r\n      })}\r\n    >\r\n      {_obj != null && config.jsonview.showMini === true && (\r\n        <JsonContainerMini\r\n          style={{ height: config.jsonview.showContentJson ? \"auto\" : \"100%\" }}\r\n        >\r\n          {_isXML == true ? (\r\n            <div\r\n              style={{\r\n                color: \"#f77d02\",\r\n              }}\r\n            >\r\n              XML\r\n            </div>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                color: _validJson ? \"green\" : \"red\",\r\n              }}\r\n            >\r\n              JSON ({_validJson ? _obj != null && `${_objCount}` : \"Error\"})\r\n            </div>\r\n          )}\r\n          {config.jsonview.showContentJson && (\r\n            <div\r\n              style={{ color: \"grey\", fontWeight: \"normal\", fontSize: \"12px\" }}\r\n            >\r\n              {FlowGetCustomDisplay({\r\n                ...ctc,\r\n                value: ctc.valueCell,\r\n                defaultConfigDisplay: {\r\n                  showShortText: config.jsonview.showShortText,\r\n                  countShort: config.jsonview.countShortText,\r\n                },\r\n              })}\r\n            </div>\r\n          )}\r\n        </JsonContainerMini>\r\n      )}\r\n      {_obj == null && config.jsonview.showMini === true && (\r\n        <JsonContainerMini style={{ color: \"grey\" }}>\r\n          <div>JSON</div>\r\n        </JsonContainerMini>\r\n      )}\r\n      {_obj != null && config.jsonview.showMini !== true && (\r\n        <JsonContainer>\r\n          <ReactJson src={_obj} {...config.jsonview} />\r\n        </JsonContainer>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","const PasteHelper = {\r\n  fnUpload: null,\r\n  fnPatse: function (e) {\r\n    e.preventDefault()\r\n    console.warn(`paste:`, e)\r\n    var items = e.clipboardData.items\r\n    console.warn(`paste items:`, items)\r\n    let _files = []\r\n    if (items) {\r\n      for (var i = 0; i < items.length; i++) {\r\n        var item = items[i]\r\n        console.log(\"Paste Item type: \" + item.type, item.kind)\r\n        if (item.kind == \"file\") {\r\n          let _file = item.getAsFile()\r\n          _files.push(_file)\r\n          console.log(\"Paste Item file: \" + item, _file)\r\n        } else {\r\n          const text = (e.originalEvent || e).clipboardData.getData(\r\n            \"text/plain\"\r\n          )\r\n          //ko biet vi sao an di - 28/12/2021 - mo lai - bo sung check null\r\n          if (window.document.execCommand) {\r\n            window.document.execCommand(\"insertText\", false, text)\r\n          }\r\n          console.log(`paste text:`, text)\r\n        }\r\n      }\r\n      console.log(`PasteHelper.fnUpload:`, PasteHelper.fnUpload)\r\n      if (PasteHelper.fnUpload && _files.length > 0) {\r\n        PasteHelper.fnUpload(_files)\r\n      }\r\n    }\r\n  },\r\n  checkPasteSupported() {\r\n    var el = document.createElement(\"div\")\r\n    el.setAttribute(\"onpaste\", \"return;\")\r\n    return typeof el.onpaste == \"function\"\r\n  },\r\n  addEventUploadFileAfterPaste: function (fnUpload) {\r\n    PasteHelper.fnUpload = fnUpload\r\n  },\r\n  removeEventUploadFileAfterPaste: function () {\r\n    PasteHelper.fnUpload = null\r\n  },\r\n  removeEvenPaste: function () {\r\n    window.removeEventListener(\"paste\", PasteHelper.fnPatse, false)\r\n  },\r\n  addEventPaste: function () {\r\n    window.addEventListener(\"paste\", PasteHelper.fnPatse, false)\r\n  },\r\n  copyTextToClipboard(text, cbSuccess) {\r\n    if (\r\n      navigator &&\r\n      navigator.clipboard &&\r\n      navigator.clipboard.writeText &&\r\n      text\r\n    ) {\r\n      navigator.clipboard.writeText(text).then(() => {\r\n        if (cbSuccess) {\r\n          cbSuccess()\r\n        }\r\n      })\r\n    }\r\n  },\r\n}\r\nexport default PasteHelper\r\n"],"sourceRoot":""}