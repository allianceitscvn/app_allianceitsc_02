{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/select2_modal.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","ModalSelectModal","props","sourceData","valueSelected","onChange","showSelectedOnFirstRow","virtualized","style","maxHeight","type","inModal","MTCSelect2Modal","ctc","useConfigTableCell","_textDisplay","getTextDisplaySelect","className","classNameWrap","onClick","canEdit","MyModal","showFromComponent","propsComponent","fnListMyTableCell","fnGetSourceData","fnList","valueCell","more","KMore","itemOption","console","warn","Value","HUtils","runFuntion","title","fnGetHeaderTitle","customTitle","currentTitle","updateCell","v","opts","updateFieldData","FlowGetCustomDisplay","value","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","useEffect","moreObj","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","_display","fDisplay","fShow","_sourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","backdrop","showHeader","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/134.de00a83e.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { MyUI, HUtils } from \"@macashipo/mlib\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport styled from \"styled-components\"\r\nimport { FlowGetCustomDisplay, KMore } from \"src/helpers/Flows/TableCell\"\r\n\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n`\r\nfunction ModalSelectModal(props) {\r\n  const {\r\n    sourceData,\r\n    valueSelected,\r\n    onChange,\r\n    showSelectedOnFirstRow,\r\n    virtualized,\r\n  } = props\r\n  return (\r\n    <div style={{ maxHeight: \"calc(100vh - 5rem)\" }}>\r\n      <MyUI\r\n        type={\r\n          virtualized === true\r\n            ? \"select_box_search_virtualized\"\r\n            : \"select_box_search\"\r\n        }\r\n        sourceData={sourceData}\r\n        showSelectedOnFirstRow={showSelectedOnFirstRow}\r\n        valueSelected={valueSelected}\r\n        onChange={onChange}\r\n        inModal={true}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default function MTCSelect2Modal(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCText:\", props)\r\n  let _textDisplay = ctc.getTextDisplaySelect()\r\n  return (\r\n    <WrapCell\r\n      className={ctc.classNameWrap(\"mct-select2_modal\")}\r\n      onClick={() => {\r\n        if (ctc.canEdit) {\r\n          MyModal.showFromComponent(\r\n            propsComponent => {\r\n              return (\r\n                <ModalSelectModal\r\n                  {...propsComponent}\r\n                  sourceData={fnListMyTableCell.fnGetSourceData(ctc.fnList)}\r\n                  valueSelected={ctc.valueCell}\r\n                  virtualized={ctc.more[KMore.virtualized]}\r\n                  showSelectedOnFirstRow={\r\n                    ctc.more[KMore.showSelectedOnFirstRow]\r\n                  }\r\n                  onChange={itemOption => {\r\n                    console.warn(\r\n                      \"onChange:\",\r\n                      itemOption,\r\n                      itemOption.Value,\r\n                      ctc.valueCell\r\n                    )\r\n                    HUtils.runFuntion(ctc, \"updateFieldData\", [\r\n                      itemOption.Value === ctc.valueCell\r\n                        ? \"\"\r\n                        : itemOption.Value,\r\n                      {},\r\n                    ])\r\n                    //hidemodal\r\n                    HUtils.runFuntion(propsComponent.fnList, \"hideModal\", [])\r\n                  }}\r\n                  ctc={ctc}\r\n                />\r\n              )\r\n            },\r\n            {\r\n              title: fnListMyTableCell.fnGetHeaderTitle(ctc.fnList, [\r\n                {\r\n                  customTitle: currentTitle => {\r\n                    if (_textDisplay) {\r\n                      return `${currentTitle}: ${_textDisplay}`\r\n                    }\r\n                    return currentTitle\r\n                  },\r\n                },\r\n              ]),\r\n              // backdrop: \"static\",\r\n              fnList: {\r\n                updateCell: (v, opts) => {\r\n                  console.warn(\"Updatecell:\", v, opts)\r\n                  ctc.updateFieldData(v, opts)\r\n                },\r\n              },\r\n            }\r\n          )\r\n        }\r\n      }}\r\n    >\r\n      {FlowGetCustomDisplay({ ...ctc, value: _textDisplay })}\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}