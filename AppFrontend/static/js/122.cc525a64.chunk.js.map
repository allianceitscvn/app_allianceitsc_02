{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/modal_table_extra.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapModalTable","styled","div","WrapJson","WrapIcon","button","ModalTable","props","console","warn","_data","fnList","fnGetData","Data","ExtraData","configPage","UIUrl","ScreenCode","Title","APIName","UIType","Config","RequestData","Id","fnCustomUpdateField","apiController","cbSuccess","cbError","requestData","row","newValue","fieldName","kfnGetIsInModal","FlowClientBuildOptions","configHeader","show","configTable","canDelete","optionsTable","sizePerPage","hideSizePerPage","paginationShowsTotal","tableProps","pagination","_dataPretty","JSON","stringify","type","value","options","mode","name","json","statementIndent","lineNumbers","lineWrapping","indentWithTabs","tabSize","theme","MTCReadonly","ctc","useConfigTableCell","cell","HIs","isObject","btnsMore","length","push","onClick","cellJson","HJson","getObj","MyModal","showFromComponent","title","fnListMyTableCell","fnGetHeaderTitle","size","className","classNameWrap","scrwhhover","style","styleWrap","cursor","canEdit","overflow","FlowGetCustomDisplay","defaultConfigDisplay","showShortText","countShort","renderTopRight","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","_optionField","slice","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","ProjectId","FieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","useEffect","moreObj","updateFieldData","v","opts","fnGetApiPath","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","Object","keys","renderHide","customConfig","cls","styledMini","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","moreBtns","moreConfig","renderLoadingOverlay","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/122.cc525a64.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { HIs, HJson, MyLib, MyPage } from \"@macashipo/mlib\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyTableCell, kfnGetIsInModal } from \"src/helpers/fnList\"\r\nimport { FlowClientBuildOptions } from \"src/helpers/Flows/Client\"\r\nimport styled from \"styled-components\"\r\nimport { FlowGetCustomDisplay } from \"src/helpers/Flows/TableCell\"\r\n\r\nconst WrapModalTable = styled.div`\r\n  overflow: hidden;\r\n  & .mpat-header {\r\n    padding: 0px;\r\n    margin: 0px;\r\n    margin-bottom: 10px;\r\n  }\r\n  & .mpat-table {\r\n    margin-bottom: 0px !important;\r\n    box-shadow: none;\r\n    > .card-body {\r\n      padding: 0px;\r\n    }\r\n  }\r\n`\r\n\r\nconst WrapJson = styled.div`\r\n  border: 1px solid #e9ecef;\r\n`\r\nconst WrapIcon = styled.button`\r\n  font-size: 18px;\r\n  color: #283343;\r\n  background: #c1daff;\r\n  padding: 2px;\r\n  border-radius: 4px;\r\n  line-height: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  border: 0px;\r\n`\r\n\r\nconst ModalTable = props => {\r\n  console.warn(\"render modal\", props)\r\n  let _data = null\r\n  if (props.fnList && props.fnList.fnGetData) {\r\n    _data = props.fnList.fnGetData()\r\n  }\r\n  if (_data) {\r\n    if (_data.Data && _data.ExtraData) {\r\n      // console.warn(\"render modal data\", _data)\r\n      return (\r\n        <WrapModalTable>\r\n          <MyPage\r\n            configPage={{\r\n              UIUrl: \"\",\r\n              ScreenCode: \"ClientTableExtra\",\r\n              Title: \"\",\r\n              APIName: \"\",\r\n              UIType: \"admin_table_client\",\r\n              Config: null,\r\n              RequestData: \"\",\r\n              Id: \"\",\r\n            }}\r\n            fnList={{\r\n              fnCustomUpdateField: ({\r\n                apiController,\r\n                cbSuccess,\r\n                cbError,\r\n                requestData,\r\n                row,\r\n                newValue,\r\n                fieldName,\r\n              }) => {\r\n                console.warn(\"Update field\", row, newValue, fieldName)\r\n              },\r\n              [kfnGetIsInModal]: () => {\r\n                return true\r\n              },\r\n              getClientOptions: () => {\r\n                return FlowClientBuildOptions({\r\n                  configHeader: {\r\n                    show: false,\r\n                  },\r\n                  configTable: {\r\n                    canDelete: false,\r\n                    optionsTable: {\r\n                      sizePerPage: 10000,\r\n                      hideSizePerPage: true,\r\n                      paginationShowsTotal: false,\r\n                    },\r\n                    tableProps: {\r\n                      pagination: false,\r\n                    },\r\n                  },\r\n                })\r\n              },\r\n              getClientList: () => {\r\n                return {\r\n                  Data: _data.Data,\r\n                  ExtraData: _data.ExtraData,\r\n                }\r\n              },\r\n            }}\r\n          />\r\n        </WrapModalTable>\r\n      )\r\n    } else {\r\n      let _dataPretty = \"\"\r\n      if (_data) {\r\n        _dataPretty = JSON.stringify(_data, 0, 2)\r\n      }\r\n      return (\r\n        <WrapJson>\r\n          <MyLib\r\n            type={\"code_mirror\"}\r\n            value={_dataPretty}\r\n            options={{\r\n              // mode: \"javascript\",\r\n              mode: {\r\n                name: \"javascript\",\r\n                json: true,\r\n                statementIndent: 2,\r\n              },\r\n              lineNumbers: true,\r\n              lineWrapping: true,\r\n              indentWithTabs: false,\r\n              tabSize: 2,\r\n              theme: \"default\",\r\n            }}\r\n          />\r\n        </WrapJson>\r\n      )\r\n    }\r\n  }\r\n  return <div>No data</div>\r\n}\r\nexport default function MTCReadonly(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const { cell } = props\r\n  if (HIs.isObject(cell)) {\r\n    return <div></div>\r\n  }\r\n  const btnsMore = []\r\n  if (cell && cell.length > 0) {\r\n    btnsMore.push(\r\n      <WrapIcon\r\n        onClick={() => {\r\n          console.warn(\"Click show\")\r\n          const cellJson = HJson.getObj(cell)\r\n          if (cellJson) {\r\n            MyModal.showFromComponent(ModalTable, {\r\n              title:\r\n                fnListMyTableCell.fnGetHeaderTitle(ctc.fnList) || ctc.fieldName,\r\n              size: \"xl\",\r\n              fnList: {\r\n                fnGetData: () => {\r\n                  return cellJson\r\n                },\r\n              },\r\n            })\r\n          }\r\n        }}\r\n      >\r\n        <i className=\"fa fa-table\" />\r\n      </WrapIcon>\r\n    )\r\n  }\r\n  return (\r\n    <div\r\n      className={ctc.classNameWrap(\"mct-modal_table_extra\", {\r\n        scrwhhover: true,\r\n      })}\r\n      style={ctc.styleWrap({\r\n        // maxHeight: \"120px\",\r\n        cursor: ctc.canEdit === true ? \"pointer\" : \"inherit\",\r\n        overflow: \"auto\",\r\n      })}\r\n    >\r\n      {FlowGetCustomDisplay({\r\n        ...ctc,\r\n        value: cell,\r\n        defaultConfigDisplay: {\r\n          showShortText: true,\r\n          countShort: 50,\r\n        },\r\n      })}\r\n      {ctc.renderTopRight(btnsMore, {\r\n        ctc,\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}