{"version":3,"sources":["modules/adminpanel/MyLoading/index.tsx","modules/adminpanel/MyPage/Types/myprofile.tsx","helpers/Flows/App.js"],"names":["loading","keyframes","WrapLoading","styled","div","MyLoadingPage","style","width","height","PProfile","state","data","tabId","uploading","dataLoading","keyForm","requestProfile","setState","HApi","apiGeneric","method","path","name","then","response","Data","catch","error","console","requestUpdateChanges","newValues","FlowUpdateAuthInfo","DisplayName","avatar","ProfilePicturePath","requestUpdatePwd","url","requestUploadAvatar","files","apiUpload","Avatar","onChangeTab","index","onSaveChanges","warn","hasChange","valuesUpdate","Object","keys","forEach","v","push","FieldName","NewValue","Id","Values","HUI","showToast","type","onUploadAvatar","acceptedFiles","file","reader","FileReader","onloadend","_files","FormData","append","readAsDataURL","onChangePassword","Password","NewPassword","ConfirmPassword","renderTabs","className","onClick","renderInfoTab","configForm","defaultValues","more","typeWrapControl","controls","label","fieldName","placeholder","disabled","controlType","moreOptionsDateFlatPickr","dateFormat","morePropsDateFlatPickr","rows","fnList","renderFooter","cForm","Button","color","getCurrentValues","renderPwdTab","renderHeader","displayName","email","EmailAddress","htmlFor","margin","src","id","accept","onChange","e","target","renderContent","HConfig","changeTitle","this","document","body","classList","add","FlowAddClassBody","KClassBody","appFullContainer","remove","FlowRemoveClassBody","React","Component"],"mappings":"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","file":"static/js/99.06c00c56.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { ImSpinner8 } from \"react-icons/im\"\r\nimport styled, { keyframes } from \"styled-components\"\r\n\r\nconst loading = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`\r\nconst WrapLoading = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  & svg {\r\n    fill: var(--color-primary);\r\n    animation: ${loading} 2s linear infinite;\r\n  }\r\n  & p {\r\n    color: var(--color-primary);\r\n    margin-top: 1rem;\r\n  }\r\n  & > div {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n  }\r\n`\r\n\r\nexport default function MyLoadingPage() {\r\n  return (\r\n    <WrapLoading>\r\n      <div>\r\n        <ImSpinner8 style={{ width: 30, height: 30 }} />\r\n        <p>Please wait a second...</p>\r\n      </div>\r\n    </WrapLoading>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { HApi, HConfig, HUI } from \"src/core/helpers\"\r\nimport { MdCameraAlt } from \"react-icons/md\"\r\nimport { MyForm, MyUI } from \"src/core/components\"\r\nimport { Button } from \"reactstrap\"\r\nimport { ImSpinner8 } from \"react-icons/im\"\r\nimport \"./Styles/myprofile.scss\"\r\nimport MyLoadingPage from \"../../MyLoading\"\r\nimport { KClassBody } from \"src/helpers/K\"\r\nimport { FlowAddClassBody, FlowRemoveClassBody } from \"src/helpers/Flows/App\"\r\nimport { FlowUpdateAuthInfo } from \"src/helpers/Flows/Auth\"\r\nclass PProfile extends React.Component {\r\n  state: any = {\r\n    data: null,\r\n    tabId: 0,\r\n    uploading: false,\r\n    dataLoading: false,\r\n    keyForm: 0,\r\n  }\r\n  componentDidMount() {\r\n    HConfig.changeTitle(\"My Profile\", \"My Profile\")\r\n    this.requestProfile()\r\n    FlowAddClassBody(KClassBody.appFullContainer)\r\n  }\r\n  componentWillUnmount() {\r\n    FlowRemoveClassBody(KClassBody.appFullContainer)\r\n  }\r\n  requestProfile = () => {\r\n    const { keyForm } = this.state\r\n    this.setState(\r\n      {\r\n        dataLoading: true,\r\n      },\r\n      () => {\r\n        HApi.apiGeneric({\r\n          method: \"GET\",\r\n          path: \"Account\",\r\n          name: \"UserInfo\",\r\n        })\r\n          .then(response => {\r\n            this.setState(\r\n              {\r\n                dataLoading: false,\r\n              },\r\n              () => {\r\n                if (response?.Data) {\r\n                  this.setState({\r\n                    data: response.Data,\r\n                    keyForm: keyForm + 1,\r\n                  })\r\n                }\r\n              }\r\n            )\r\n          })\r\n          .catch(error => {\r\n            console.error(\"requestProfile error:\", error)\r\n            this.setState({\r\n              dataLoading: false,\r\n            })\r\n          })\r\n      }\r\n    )\r\n  }\r\n  requestUpdateChanges = newValues => {\r\n    const { keyForm } = this.state\r\n    this.setState(\r\n      {\r\n        dataLoading: true,\r\n      },\r\n      () => {\r\n        HApi.apiGeneric({\r\n          method: \"POST\",\r\n          path: \"Account\",\r\n          name: \"UpdateFields\",\r\n          data: newValues,\r\n        })\r\n          .then(response => {\r\n            this.setState(\r\n              {\r\n                dataLoading: false,\r\n              },\r\n              () => {\r\n                if (response?.Data) {\r\n                  this.setState({\r\n                    data: response.Data,\r\n                    keyForm: keyForm + 1,\r\n                  })\r\n                  FlowUpdateAuthInfo({\r\n                    name: response?.Data?.DisplayName,\r\n                    avatar: response?.Data?.ProfilePicturePath,\r\n                  })\r\n                }\r\n              }\r\n            )\r\n          })\r\n          .catch(error => {\r\n            console.error(\"requestUpdateChanges error:\", error)\r\n            this.setState({\r\n              dataLoading: false,\r\n            })\r\n          })\r\n      }\r\n    )\r\n  }\r\n  requestUpdatePwd = newValues => {\r\n    this.setState(\r\n      {\r\n        dataLoading: true,\r\n      },\r\n      () => {\r\n        HApi.apiGeneric({\r\n          method: \"POST\",\r\n          url: \"Account/ChangePassword\",\r\n          data: newValues,\r\n        })\r\n          .then(response => {\r\n            this.setState({\r\n              dataLoading: false,\r\n            })\r\n          })\r\n          .catch(error => {\r\n            console.error(\"requestUpdatePwd error:\", error)\r\n            this.setState({\r\n              dataLoading: false,\r\n            })\r\n          })\r\n      }\r\n    )\r\n  }\r\n  requestUploadAvatar = files => {\r\n    this.setState(\r\n      {\r\n        uploading: true,\r\n      },\r\n      () => {\r\n        HApi.apiUpload({\r\n          url: \"Upload/User/MyAvatar\",\r\n          data: files,\r\n        })\r\n          .then(response => {\r\n            this.setState(\r\n              {\r\n                uploading: false,\r\n              },\r\n              () => {\r\n                if (response?.Data) {\r\n                  let { data } = this.state\r\n                  data.ProfilePicturePath = response.Data?.Avatar\r\n                  this.setState({\r\n                    data: { ...data },\r\n                  })\r\n                  //\r\n                  FlowUpdateAuthInfo({\r\n                    name: null,\r\n                    avatar: response.Data?.Avatar,\r\n                  })\r\n                }\r\n              }\r\n            )\r\n          })\r\n          .catch(error => {\r\n            console.error(\"requestUploadAvatar error:\", error)\r\n            this.setState({\r\n              uploading: false,\r\n            })\r\n          })\r\n      }\r\n    )\r\n  }\r\n  onChangeTab = index => {\r\n    this.setState({\r\n      tabId: index,\r\n    })\r\n  }\r\n  onSaveChanges = newValues => {\r\n    console.warn(\"onSaveChanges - newValues\", newValues)\r\n    const { data } = this.state\r\n    let hasChange = false\r\n    let valuesUpdate = [] as any\r\n    if (newValues) {\r\n      Object.keys(newValues).forEach(v => {\r\n        if ((!newValues[v] && data[v]) || newValues[v] !== data[v]) {\r\n          hasChange = true\r\n          valuesUpdate.push({\r\n            FieldName: v,\r\n            NewValue: newValues[v],\r\n          })\r\n        }\r\n      })\r\n      if (hasChange) {\r\n        this.requestUpdateChanges({\r\n          Id: data.Id,\r\n          Values: valuesUpdate,\r\n        })\r\n      } else {\r\n        HUI.showToast(\"There is no changes\", { type: \"warning\" })\r\n      }\r\n    }\r\n  }\r\n  onUploadAvatar = acceptedFiles => {\r\n    let file = acceptedFiles?.[0]\r\n    const reader = new FileReader()\r\n    reader.onloadend = () => {\r\n      let _files = new FormData()\r\n      _files.append(\"file[]\", file)\r\n      this.requestUploadAvatar(_files)\r\n    }\r\n    reader.readAsDataURL(file)\r\n  }\r\n  onChangePassword = newValues => {\r\n    console.warn(\"onChangePassword - newValues\", newValues)\r\n    if (newValues) {\r\n      const { data } = this.state\r\n      if (\r\n        newValues.Password &&\r\n        newValues.NewPassword &&\r\n        newValues.ConfirmPassword &&\r\n        newValues.Password !== newValues.ConfirmPassword\r\n      ) {\r\n        this.requestUpdatePwd({\r\n          Id: data?.Id,\r\n          ...newValues,\r\n        })\r\n      } else if (\r\n        newValues.Password &&\r\n        newValues.ConfirmPassword &&\r\n        newValues.Password === newValues.ConfirmPassword\r\n      ) {\r\n        HUI.showToast(\"New password must be different with current password\", {\r\n          type: \"warning\",\r\n        })\r\n      } else {\r\n        HUI.showToast(\"Please enter all password\", { type: \"warning\" })\r\n      }\r\n    }\r\n  }\r\n  renderTabs = () => {\r\n    const { tabId } = this.state\r\n    return (\r\n      <div className=\"p-row-dFaCjFs tabs\">\r\n        <span\r\n          className={`tab-item${tabId === 0 ? \" active\" : \"\"}`}\r\n          onClick={() => this.onChangeTab(0)}\r\n        >\r\n          Profile\r\n        </span>\r\n        <span\r\n          className={`tab-item${tabId === 1 ? \" active\" : \"\"}`}\r\n          onClick={() => this.onChangeTab(1)}\r\n        >\r\n          Change Password\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n  renderInfoTab = () => {\r\n    const { data, keyForm } = this.state\r\n    const configForm: any = {\r\n      defaultValues: data,\r\n      more: {\r\n        typeWrapControl: \"wfc_inline\",\r\n      },\r\n      controls: [\r\n        {\r\n          label: \"Username\",\r\n          fieldName: \"Username\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your username\",\r\n            disabled: true,\r\n          },\r\n        },\r\n        {\r\n          label: \"Email Address\",\r\n          fieldName: \"EmailAddress\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your email\",\r\n            disabled: true,\r\n          },\r\n        },\r\n        {\r\n          label: \"Display Name\",\r\n          fieldName: \"DisplayName\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your display name\",\r\n          },\r\n        },\r\n        {\r\n          label: \"First Name\",\r\n          fieldName: \"FirstName\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your first name\",\r\n          },\r\n        },\r\n        {\r\n          label: \"Middle Name\",\r\n          fieldName: \"MiddleName\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your middle name\",\r\n          },\r\n        },\r\n        {\r\n          label: \"Last Name\",\r\n          fieldName: \"LastName\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your last name\",\r\n          },\r\n        },\r\n        {\r\n          label: \"Date Of Birth\",\r\n          fieldName: \"DateOfBirth\",\r\n          type: \"v1_mfc_lable_control_inline\",\r\n          more: {\r\n            controlType: \"esc_date_flatpickr\",\r\n            moreOptionsDateFlatPickr: {\r\n              dateFormat: \"Y/m/d\",\r\n            },\r\n            morePropsDateFlatPickr: {\r\n              placeholder: \"yyyy/mm/dd\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          label: \"Phone Number\",\r\n          fieldName: \"PhoneNumber\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your phone number\",\r\n          },\r\n        },\r\n        {\r\n          label: \"Address\",\r\n          fieldName: \"Address\",\r\n          type: \"text\",\r\n          more: {\r\n            placeholder: \"Enter your address\",\r\n          },\r\n        },\r\n        {\r\n          label: \"Note\",\r\n          fieldName: \"Note\",\r\n          type: \"textarea\",\r\n          more: {\r\n            placeholder: \"Enter your note\",\r\n            rows: 5,\r\n          },\r\n        },\r\n      ],\r\n    }\r\n    return (\r\n      <div className=\"p-info-tab\">\r\n        <strong className=\"p-title-tab\">My Profile Infomation</strong>\r\n        <MyForm\r\n          key={keyForm}\r\n          configForm={configForm}\r\n          fnList={{}}\r\n          renderFooter={cForm => {\r\n            return (\r\n              <div className=\"p-row-dFaCjFe\">\r\n                <Button\r\n                  color=\"esc-info\"\r\n                  onClick={() => this.onSaveChanges(cForm.getCurrentValues())}\r\n                >\r\n                  Save Changes\r\n                </Button>\r\n              </div>\r\n            )\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  renderPwdTab = () => {\r\n    const { data } = this.state\r\n    const configForm: any = {\r\n      defaultValues: data,\r\n      more: {\r\n        typeWrapControl: \"wfc_inline\",\r\n      },\r\n      controls: [\r\n        {\r\n          label: \"Current Password\",\r\n          fieldName: \"Password\",\r\n          type: \"password\",\r\n          more: {\r\n            placeholder: \"Enter your current password\",\r\n          },\r\n        },\r\n        {\r\n          label: \"New Password\",\r\n          fieldName: \"NewPassword\",\r\n          type: \"password\",\r\n          more: {\r\n            placeholder: \"Enter your new password\",\r\n          },\r\n        },\r\n        {\r\n          label: \"Confirm Password\",\r\n          fieldName: \"ConfirmPassword\",\r\n          type: \"password\",\r\n          more: {\r\n            placeholder: \"Confirm new password\",\r\n          },\r\n        },\r\n      ],\r\n    }\r\n    return (\r\n      <div className=\"p-info-tab\">\r\n        <strong className=\"p-title-tab\">My Password</strong>\r\n        <MyForm\r\n          configForm={configForm}\r\n          fnList={{}}\r\n          renderFooter={cForm => {\r\n            return (\r\n              <div className=\"p-row-dFaCjFe\">\r\n                <Button\r\n                  color=\"esc-info\"\r\n                  onClick={() =>\r\n                    this.onChangePassword(cForm.getCurrentValues())\r\n                  }\r\n                >\r\n                  Save Changes\r\n                </Button>\r\n              </div>\r\n            )\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  renderHeader = () => {\r\n    const { data, uploading } = this.state\r\n    const avatar = data?.ProfilePicturePath //|| DefaultAvatar\r\n    const displayName = data?.DisplayName\r\n    const email = data?.EmailAddress\r\n    return (\r\n      <div className=\"p-header bg-gradient-primary text-white\">\r\n        <div className=\"p-row-dFaCjFs\">\r\n          <label\r\n            htmlFor=\"upload-profile-picture\"\r\n            className=\"p-avatar\"\r\n            style={{ margin: \"0px\" }}\r\n          >\r\n            {/* <img src={avatar} alt=\"\" /> */}\r\n            <MyUI type=\"avatar\" src={avatar} />\r\n            {uploading && (\r\n              <div className=\"p-overlay-loading rounded\">\r\n                <ImSpinner8 />\r\n              </div>\r\n            )}\r\n            <div className=\"p-upload\">\r\n              <label htmlFor=\"upload-profile-picture\" style={{ margin: \"0px\" }}>\r\n                <MdCameraAlt />\r\n              </label>\r\n              <input\r\n                id=\"upload-profile-picture\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                disabled={uploading}\r\n                onChange={e => this.onUploadAvatar(e.target.files)}\r\n              />\r\n            </div>\r\n          </label>\r\n          <div className=\"p-short-info\">\r\n            <span className=\"name\">{displayName}</span>\r\n            <span>{email}</span>\r\n          </div>\r\n        </div>\r\n        {this.renderTabs()}\r\n      </div>\r\n    )\r\n  }\r\n  renderContent = () => {\r\n    const { tabId } = this.state\r\n    return (\r\n      <div className=\"p-content\">\r\n        {tabId === 0 && this.renderInfoTab()}\r\n        {tabId === 1 && this.renderPwdTab()}\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    const { dataLoading } = this.state\r\n    return (\r\n      <div className=\"mp_pprofile\">\r\n        {this.renderHeader()}\r\n        {this.renderContent()}\r\n        {dataLoading && <MyLoadingPage />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default PProfile\r\n","export const FlowAddClassBody = (className = \"\") => {\r\n  document.body.classList.add(className)\r\n}\r\nexport const FlowRemoveClassBody = (className = \"\") => {\r\n  document.body.classList.remove(className)\r\n}\r\n"],"sourceRoot":""}