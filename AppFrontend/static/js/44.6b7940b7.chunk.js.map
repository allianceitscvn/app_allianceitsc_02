{"version":3,"sources":["modules/adminpanel/MyButton/Types/upload.tsx","helpers/Flows/Button.js","modules/adminpanel/MyButton/Types/ext.tsx","services/apiUpload.js"],"names":["MyButtonUpload","_cDropzone","_requestApiAfterSuccess","response","props","oneButton","fnList","_moreObj","KMoreOfButton","apiUrlAfter","Data","Photos","length","changeIsLoading","_arrayId","i","_p","push","Id","_queryData","ScreenCode","fnListMyPage","fnGetScreenCode","UploadedFileIds","apiGeneric","method","url","data","getApiQuery","fnGetSharedRequestData","then","res","console","warn","HQuery","parseResponseButtonApi","parseResponseWhenSuccess","catch","err","_requestUpload","files","log","_customHeader","apiUpload","getApiRequest","timeout","customHeader","r","_getAccept","acceptType","HCF","getCF","KConfigApp","fileUploadSupport","_onDropZone","rejected","fnListUI","fnshowDialog","title","i18next","t","msg","this","getMorePropsButton","onClick","open","getTitleDisplay","ref","accept","onDrop","getRootProps","getInputProps","isDragActive","className","MyButtonExt","apiCheckShowModal","tooltip","FlowCheckShowModal","customQuery","cb","_configCheckShow","_request","path","name","ApiGeneric","request","successCallBack","_config","HUtils","get","IsShow","result","FormData","errorCallBack","error","_configButton","NeedReload","fnReloadPage","NeedReloadList","fnReloadList","_moreProps","checkConfirmMsg","ConfirmMsg","fnshowConfirm","onClickOK","state","setFromComponent","React","Component"],"mappings":"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","file":"static/js/44.6b7940b7.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { HApi, HQuery } from \"src/core/helpers\"\r\nimport MyButtonExt from \"./ext\"\r\nimport Dropzone from \"react-dropzone\"\r\nimport { fnListMyPage, fnListUI } from \"src/helpers/fnList\"\r\nimport { KMoreOfButton } from \"src/helpers/Flows/Button\"\r\nimport { HCF, HUI } from \"@macashipo/mlib\"\r\nimport { KConfigApp } from \"src/helpers/K\"\r\nimport apiGeneric from \"src/services/apiGeneric\"\r\nimport apiUpload from \"src/services/apiUpload\"\r\nimport i18next from \"i18next\"\r\nclass MyButtonUpload extends MyButtonExt {\r\n  _cDropzone: any = null\r\n  componentDidMount() {}\r\n  _requestApiAfterSuccess = (response: any) => {\r\n    const { oneButton, fnList } = this.props\r\n    if (\r\n      oneButton._moreObj[KMoreOfButton.apiUrlAfter] &&\r\n      response &&\r\n      response.Data &&\r\n      response.Data.Photos &&\r\n      response.Data.Photos.length > 0\r\n    ) {\r\n      oneButton.changeIsLoading(true)\r\n      let _arrayId: any = []\r\n      for (let i in response.Data.Photos) {\r\n        let _p = response.Data.Photos[i]\r\n        _arrayId.push(_p.Id)\r\n      }\r\n      let _queryData = {\r\n        ScreenCode: fnListMyPage.fnGetScreenCode(fnList),\r\n        // ProjectId: projectId,\r\n        UploadedFileIds: _arrayId,\r\n      }\r\n      apiGeneric({\r\n        method: \"POST\",\r\n        url: `/api/v1/${oneButton._moreObj[KMoreOfButton.apiUrlAfter]}`,\r\n        data: oneButton.getApiQuery({\r\n          ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n          ..._queryData,\r\n        }),\r\n      })\r\n        .then(res => {\r\n          console.warn(\"res\", res)\r\n          HQuery.parseResponseButtonApi(res, oneButton._moreObj)\r\n          this.parseResponseWhenSuccess(res)\r\n          oneButton.changeIsLoading(false)\r\n        })\r\n        .catch(err => {\r\n          oneButton.changeIsLoading(false)\r\n        })\r\n    } else {\r\n      HQuery.parseResponseButtonApi(response, oneButton._moreObj)\r\n      this.parseResponseWhenSuccess(response)\r\n      oneButton.changeIsLoading(false)\r\n    }\r\n  }\r\n  _requestUpload = (files: any[]) => {\r\n    const { oneButton, fnList } = this.props\r\n    console.log(\"upload files\", files)\r\n    oneButton.changeIsLoading(true)\r\n    let _customHeader = {\r\n      ScreenCode: fnListMyPage.fnGetScreenCode(fnList),\r\n      ...oneButton.getApiQuery({\r\n        ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n      }),\r\n    }\r\n    apiUpload({\r\n      ...oneButton.getApiRequest(),\r\n      method: \"UPLOAD\",\r\n      files: files,\r\n      timeout: 0,\r\n      customHeader: _customHeader,\r\n    })\r\n      .then(r => {\r\n        console.warn(\"r:\", r)\r\n        this._requestApiAfterSuccess(r)\r\n      })\r\n      .catch(err => {\r\n        console.warn(\"err:\", err)\r\n        oneButton.changeIsLoading(false)\r\n      })\r\n  }\r\n  _getAccept = () => {\r\n    const { oneButton } = this.props\r\n    let _accept =\r\n      oneButton._moreObj[KMoreOfButton.acceptType] ||\r\n      HCF.getCF(KConfigApp.fileUploadSupport)\r\n    return _accept\r\n  }\r\n  _onDropZone = (files, rejected) => {\r\n    // console.warn('files,rejected: ', files,rejected);\r\n    if (rejected != null && rejected.length > 0) {\r\n      if (files != null && files.length == 0) {\r\n        fnListUI.fnshowDialog({\r\n          title: i18next.t(\"Notice\"),\r\n          msg: `${i18next.t(\"File not supported\")}${this._getAccept()}`,\r\n        })\r\n      }\r\n    }\r\n    if (files != null && files.length > 0) {\r\n      this._requestUpload(files)\r\n    }\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    // console.warn(\"render Button api\", this.props)\r\n    return (\r\n      <Button\r\n        {...this.getMorePropsButton()}\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          if (this._cDropzone != null) {\r\n            this._cDropzone.open()\r\n          }\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n        <Dropzone\r\n          ref={r => {\r\n            this._cDropzone = r\r\n          }}\r\n          accept={this._getAccept()}\r\n          onDrop={this._onDropZone}\r\n        >\r\n          {({ getRootProps, getInputProps, isDragActive, open }) => {\r\n            return (\r\n              <div\r\n                {...getRootProps()}\r\n                className={`dropzone ${\r\n                  isDragActive ? \"dropzone--isActive\" : \"\"\r\n                }`}\r\n              >\r\n                <input {...getInputProps()} />\r\n              </div>\r\n            )\r\n          }}\r\n        </Dropzone>\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonUpload\r\n","import { ApiGeneric } from \"src/services/apiServices\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nexport const KMoreOfButton = {\r\n  apiCheckShowModal: \"apiCheckShowModal\",\r\n  acceptType: \"acceptType\", //upload\r\n  apiUrlAfter: \"apiUrlAfter\", //upload\r\n  title: \"title\", //show title cua button\r\n  tooltip: \"tooltip\", //show tooltip cua button, chua su dung\r\n}\r\n\r\nexport const FlowCheckShowModal = ({\r\n  oneButton,\r\n  fnList,\r\n  customQuery,\r\n  cb,\r\n} = {}) => {\r\n  if (oneButton) {\r\n    let _configCheckShow = oneButton._moreObj[KMoreOfButton.apiCheckShowModal]\r\n    if (_configCheckShow) {\r\n      oneButton.changeIsLoading(true)\r\n      let _request = {\r\n        method: \"POST\",\r\n        url: _configCheckShow.url,\r\n        path: _configCheckShow.path,\r\n        name: _configCheckShow.name,\r\n      }\r\n      ApiGeneric({\r\n        request: _request,\r\n        data: oneButton.getApiQuery({\r\n          ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n          ...customQuery,\r\n        }),\r\n        successCallBack: response => {\r\n          console.warn(\"response\", response)\r\n          let _config = HUtils.get(response, \"Data.Config\")\r\n          if (_config && _config.IsShow) {\r\n            if (cb) {\r\n              cb({\r\n                result: true,\r\n                data: _config.FormData || {},\r\n              })\r\n            }\r\n          } else {\r\n            if (cb) {\r\n              cb({\r\n                result: false,\r\n              })\r\n            }\r\n          }\r\n          oneButton.changeIsLoading(false)\r\n        },\r\n        errorCallBack: (error, response) => {\r\n          oneButton.changeIsLoading(false)\r\n          if (cb) {\r\n            cb({\r\n              result: false,\r\n            })\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb({\r\n          result: true,\r\n        })\r\n      }\r\n    }\r\n  } else {\r\n    if (cb) {\r\n      cb({\r\n        result: true,\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { OneButton } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { KMoreOfButton } from \"src/helpers/Flows/Button\"\r\nimport { fnListMyPage, fnListUI } from \"src/helpers/fnList\"\r\ninterface IProps {\r\n  oneButton: OneButton\r\n  fnList?: any\r\n}\r\nclass MyButtonExt extends React.Component<IProps> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    const { oneButton } = this.props\r\n    oneButton.setFromComponent(this)\r\n  }\r\n  componentDidMount() {}\r\n  onClick = () => {}\r\n  parseResponseWhenSuccess = (res: any) => {\r\n    const { oneButton, fnList } = this.props\r\n    if (oneButton._configButton.NeedReload) {\r\n      fnListMyPage.fnReloadPage(fnList)\r\n    } else if (oneButton._configButton.NeedReloadList) {\r\n      fnListMyPage.fnReloadList(fnList)\r\n    }\r\n  }\r\n  getMorePropsButton = () => {\r\n    const { oneButton } = this.props\r\n    let _moreProps: any = {}\r\n    if (oneButton && oneButton._moreObj) {\r\n      if (oneButton._moreObj[KMoreOfButton.title]) {\r\n        _moreProps.title = oneButton._moreObj[KMoreOfButton.title]\r\n      }\r\n    }\r\n    return _moreProps\r\n  }\r\n  checkConfirmMsg = cb => {\r\n    const { oneButton } = this.props\r\n    //test\r\n    // oneButton._configButton.ConfirmMsg = \"Hello\"\r\n    if (oneButton && oneButton._configButton.ConfirmMsg) {\r\n      fnListUI.fnshowConfirm({\r\n        title: \"Confirm\",\r\n        msg: oneButton._configButton.ConfirmMsg,\r\n        onClickOK: () => {\r\n          if (cb) {\r\n            cb()\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb()\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    return (\r\n      <Button\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          this.onClick()\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonExt\r\n","import { apiUpload } from \"src/core/helpers/api\"\r\nexport default apiUpload\r\n"],"sourceRoot":""}