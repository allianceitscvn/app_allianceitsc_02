{"version":3,"sources":["../../src/hooks/useLoadGoogleCharts.ts","../../src/hooks/useLoadScript.ts","../../src/default-props.ts","../../src/generate-unique-id.ts","../../src/constants.ts","../../src/load-data-table-from-spreadsheet.ts","../../src/Context.tsx","../../src/components/GoogleChartDataTable.tsx","../../src/components/GoogleChartEvents.tsx","../../src/components/GoogleChart.tsx","../../src/ReactGoogleCharts.tsx","../../src/types.ts"],"names":["useLoadGoogleCharts","src","onLoad","onError","chartVersion","chartPackages","chartLanguage","mapsApiKey","useState","googleCharts","setGoogleCharts","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","useEffect","document","foundScript","querySelector","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","LoadGoogleCharts","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","React","Provider","Consumer","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","state","hiddenColumns","listenToLegendToggle","props","googleChartWrapper","events","addListener","selection","getChart","getSelection","dataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","ArrowFormat","format","BarFormat","vizFormatter","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","draw","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","chart","getChartType","clearChart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","colors","from","map","dontcare","onResize","componentDidMount","this","componentWillUnmount","removeAllListeners","componentDidUpdate","GoogleChartDataTable","shouldComponentUpdate","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","chartWrapper","eventArgs","propsFromContext","controlCounter","GoogleChart","googleChartControls","googleChartEditor","isReady","graphID","dashboard_ref","toolbar_ref","getGraphID","instanceGraphID","graph_id","getControlID","index","addControls","controls","control","controlIDMaybe","controlID","controlType","controlOptions","controlWrapperParams","controlProp","ControlWrapper","containerId","bind","chartControl","controlEvents","removeListener","controlWrapper","renderChart","width","height","style","className","divStyle","div","renderControl","key","getContainerId","renderToolBar","toolbarItems","ref","getChartEditor","chartConfig","ChartWrapper","Dashboard","drawToolbar","current","chartEditor","ChartEditor","setControlType","nextProps","nextState","renderToolbar","controlPosition","Chart","_isMounted","loadingStatus","isFullyLoaded","onSuccess","setInterval","clearInterval","loader","errorElement","defaultProps","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"mappings":"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","file":"static/js/1.df8859ba.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n"],"sourceRoot":""}