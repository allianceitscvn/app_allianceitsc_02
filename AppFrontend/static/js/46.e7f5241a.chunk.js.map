{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/json_editor_value.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","helpers/Paste.js"],"names":["JsonContainer","styled","div","JsonContainerMini","WrapJsonModalContent","fnConvertObjToArray","obj","prefixKey","levelConfig","_keys","Object","keys","_arr","i","length","k","_value","_type","Array","isArray","_id","_levelConfigCurrent","_parentsLevelConfig","_levelConfigAll","push","Id","Key","Type","Value","TreeLevel","split","LastOfLevel","HasChild","LevelConfigs","UI_MergeRowByField","UI_CellType_Value","UI_StyleRow","display","alignItems","textAlign","justifyContent","paddingLeft","fontWeight","_arrChild","concat","ModalEditor","props","ctc","fnList","config","configFromModal","React","useState","v","dataList","setDataList","isLoading","setIsLoading","canEdit","useEffect","console","warn","MyModal","renderHeader","cModal","inMyModal","styleModalHeader","marginBottom","title","style","flex","overflow","minHeight","configPage","UIUrl","ScreenCode","Title","APIName","UIType","Config","RequestData","kfnGetIsInModal","apiController","cbSuccess","row","cbError","requestData","newValue","fieldName","LodashSet","HUtils","runFuntion","HJson","getString","r","e","FlowClientBuildOptions","configHeader","sticky","configTable","canDelete","optionsTable","sizePerPage","hideSizePerPage","paginationShowsTotal","Data","ExtraData","Columns","FieldName","CanShow","CanSort","Width","type","more","JSON","stringify","fLevel","fLastOfLevel","fHasChild","fLevelConfig","CanEdit","borderTop","position","left","top","width","height","background","MTCJsonEditor","useConfigTableCell","_obj","valueCell","getObj","getSharedConfig","moreObj","jsonview","showMini","enableClipboard","displayDataTypes","className","classNameWrap","onClick","showFromComponent","fnListMyTableCell","fnGetHeaderTitle","backdrop","showHeader","updateCell","opts","updateFieldData","cursor","color","src","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","extra","_optionKey","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","_optionField","slice","kfnRenderBadge","customMore","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","ProjectId","canUpload","ATCHelper","_extra","_more","_canEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","lockF","fLock","_fLock","_arrLock","countForceUpdate","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","log","IsLocked","fnGetApiPath","fnForceUpdateTable","cbSuccessUpdate","requestCustom","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","finally","hide","onClickFiles","propsComponent","onChangeData","data","mergeObjIfExist","PasteHelper","fnUpload","fnPatse","preventDefault","items","clipboardData","_files","item","kind","_file","getAsFile","text","originalEvent","getData","window","document","execCommand","checkPasteSupported","el","createElement","setAttribute","onpaste","addEventUploadFileAfterPaste","removeEventUploadFileAfterPaste","removeEvenPaste","removeEventListener","addEventPaste","addEventListener","copyTextToClipboard","navigator","clipboard","writeText"],"mappings":"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","file":"static/js/46.e7f5241a.chunk.js","sourcesContent":["import { HJson, HUtils, MyBase, MyPage } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport ReactJson from \"react-json-view\"\r\nimport { Button } from \"reactstrap\"\r\nimport LodashSet from \"lodash/set\"\r\nimport MyModal from \"src/core/components/MyModal/MyModal\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport HPaste from \"src/helpers/Paste\"\r\nimport { FlowClientBuildOptions } from \"src/helpers/Flows/Client\"\r\nimport { fnListMyTableCell, kfnGetIsInModal } from \"src/helpers/fnList\"\r\nexport const JsonContainer = styled.div`\r\n  // max-height: 120px;\r\n  overflow: overlay;\r\n`\r\nexport const JsonContainerMini = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: green;\r\n  font-weight: bold;\r\n  padding: 5px;\r\n`\r\nconst WrapJsonModalContent = styled.div`\r\n  overflow: hidden;\r\n  max-height: calc(100vh - 6rem);\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  & .a-mode-text textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n  }\r\n  & .mp-admin_table .mpat-header {\r\n    padding: 0px;\r\n    margin: 0px;\r\n    margin-bottom: 5px;\r\n  }\r\n  & .mp-admin_table .mpat-table {\r\n    margin-bottom: 0px !important;\r\n    & > .card-body {\r\n      padding: 0px;\r\n    }\r\n    & .react-bs-table-pagination {\r\n      display: none;\r\n    }\r\n  }\r\n`\r\n\r\n/**\r\n * levelConfig:\r\n * 0: |\r\n * 1: |-\r\n * 2: ⌞\r\n * 3: empty\r\n */\r\nconst fnConvertObjToArray = (obj = {}, { prefixKey, levelConfig } = {}) => {\r\n  let _keys = Object.keys(obj)\r\n  let _arr = []\r\n  for (let i = 0; i < _keys.length; i++) {\r\n    let k = _keys[i]\r\n    let _value = obj[k]\r\n    let _type = typeof _value\r\n    if (_type == \"object\") {\r\n      if (_value == null) {\r\n        _type = \"null\"\r\n      }\r\n      if (Array.isArray(_value)) {\r\n        _type = \"array\"\r\n      }\r\n    }\r\n    let _id = `${prefixKey != null ? prefixKey + \".\" : \"\"}${k}`\r\n    let _levelConfigCurrent = 5\r\n    let _parentsLevelConfig = []\r\n    if (levelConfig && levelConfig.length > 0) {\r\n      _parentsLevelConfig = [...levelConfig]\r\n      for (let i = 0; i < _parentsLevelConfig.length; i++) {\r\n        if (_parentsLevelConfig[i] == 2 || _parentsLevelConfig[i] == 3) {\r\n          _parentsLevelConfig[i] = 3 //emtpy\r\n        } else {\r\n          _parentsLevelConfig[i] = 0\r\n        }\r\n      }\r\n      // for (let i = _parentsLevelConfig.length - 1; i >= 0; i--) {\r\n      //   if (_parentsLevelConfig[i] == 2) {\r\n      //     _parentsLevelConfig[i] = 3 //emtpy\r\n      //   } else if (i < _parentsLevelConfig.length - 1) {\r\n      //     //ong noi dua vao ba\r\n      //     if (_parentsLevelConfig[i + 1] == 2) {\r\n      //       _parentsLevelConfig[i] = 3 //emtpy\r\n      //     } else {\r\n      //       _parentsLevelConfig[i] = 0\r\n      //     }\r\n      //   } else {\r\n      //     _parentsLevelConfig[i] = 0\r\n      //   }\r\n      // }\r\n    }\r\n    if (_type == \"object\") {\r\n      _levelConfigCurrent = 1\r\n      if (i == _keys.length - 1) {\r\n        _levelConfigCurrent = 2\r\n      }\r\n    } else if (i == _keys.length - 1) {\r\n      _levelConfigCurrent = 2\r\n    } else {\r\n      _levelConfigCurrent = 1\r\n    }\r\n    let _levelConfigAll = [..._parentsLevelConfig, _levelConfigCurrent]\r\n    _arr.push({\r\n      Id: _id,\r\n      Key: k,\r\n      Type: _type,\r\n      Value: _value,\r\n      TreeLevel: _id.split(\".\").length - 1,\r\n      LastOfLevel: i == _keys.length - 1,\r\n      HasChild: _type == \"object\" ? true : false,\r\n      LevelConfigs: _levelConfigAll,\r\n      UI_MergeRowByField: _type == \"object\" ? \"Key\" : null,\r\n      UI_CellType_Value: _type == \"boolean\" ? \"checkbox\" : \"textarea\",\r\n      UI_StyleRow: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        textAlign: \"left\",\r\n        justifyContent: \"flex-start\",\r\n        paddingLeft: \"5px\",\r\n        fontWeight: _type == \"object\" ? \"bold\" : \"normal\",\r\n      },\r\n    })\r\n    if (_type == \"object\") {\r\n      let _arrChild = fnConvertObjToArray(_value, {\r\n        prefixKey: _id,\r\n        levelConfig: _levelConfigAll,\r\n      })\r\n      if (_arrChild && _arrChild.length > 0) {\r\n        _arr = _arr.concat(_arrChild)\r\n      }\r\n    }\r\n  }\r\n  return _arr\r\n}\r\nconst ModalEditor = props => {\r\n  const { ctc, obj, config, fnList, configFromModal } = props\r\n  const [v, setV] = React.useState(obj)\r\n  const [dataList, setDataList] = React.useState(fnConvertObjToArray(v))\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  const canEdit = ctc.canEdit\r\n  React.useEffect(() => {}, [])\r\n  console.warn(\"render ModalEditor:\", props)\r\n  return (\r\n    <WrapJsonModalContent>\r\n      {MyModal.renderHeader({\r\n        cModal: props.inMyModal,\r\n        styleModalHeader: {\r\n          marginBottom: \"0.5rem\",\r\n        },\r\n        title: props => {\r\n          return (\r\n            <>\r\n              {configFromModal.title}\r\n              {/* <div className=\"btn-group\"></div>\r\n              <div\r\n                className=\"btn-group\"\r\n                style={{ position: \"absolute\", right: \"2rem\" }}\r\n              ></div> */}\r\n            </>\r\n          )\r\n        },\r\n      })}\r\n      <div\r\n        style={{\r\n          flex: 1,\r\n          overflow: `auto`,\r\n          minHeight: \"100px\",\r\n        }}\r\n      >\r\n        <MyPage\r\n          configPage={{\r\n            UIUrl: \"\",\r\n            ScreenCode: \"PageNotFound\",\r\n            Title: \"\",\r\n            APIName: \"\",\r\n            UIType: \"admin_table_client\",\r\n            Config: null,\r\n            RequestData: \"\",\r\n            Id: \"\",\r\n          }}\r\n          fnList={{\r\n            [kfnGetIsInModal]: () => {\r\n              return true\r\n            },\r\n            fnCustomUpdateField: ({\r\n              apiController,\r\n              cbSuccess,\r\n              cbError,\r\n              requestData,\r\n              row,\r\n              newValue,\r\n              fieldName,\r\n            }) => {\r\n              console.warn(\"Update field\", row, newValue, fieldName)\r\n              if (row.Id) {\r\n                LodashSet(v, row.Id, newValue)\r\n                row.Value = newValue\r\n                setDataList(fnConvertObjToArray(v))\r\n                if (cbSuccess) {\r\n                  cbSuccess()\r\n                }\r\n                console.warn(\"v\", v)\r\n                let _canSave = true\r\n                if (_canSave) {\r\n                  setIsLoading(true)\r\n                  HUtils.runFuntion(fnList, \"updateCell\", [\r\n                    HJson.getString(v),\r\n                    {\r\n                      cbSuccess: r => {\r\n                        console.warn(\"cbSuccess:\", r)\r\n                        setIsLoading(false)\r\n                        // HUtils.runFuntion(fnList, \"hideModal\", [])\r\n                      },\r\n                      cbError: e => {\r\n                        console.warn(\"cbErrro:\", e)\r\n                        setIsLoading(false)\r\n                      },\r\n                    },\r\n                  ])\r\n                }\r\n              }\r\n            },\r\n            getClientOptions: () => {\r\n              return FlowClientBuildOptions({\r\n                configHeader: {\r\n                  sticky: true,\r\n                },\r\n                configTable: {\r\n                  canDelete: false,\r\n                  optionsTable: {\r\n                    sizePerPage: 10000,\r\n                    hideSizePerPage: true,\r\n                    paginationShowsTotal: false,\r\n                  },\r\n                },\r\n              })\r\n            },\r\n            getClientList: () => {\r\n              return {\r\n                Data: dataList,\r\n                // Data: [\r\n                //   { Id: \"1\", Key: \"v\", Value: \"vv\" },\r\n                //   { Id: \"2\", Key: \"v\", Value: \"vv\" },\r\n                // ],\r\n                ExtraData: {\r\n                  Columns: {\r\n                    Id: { FieldName: \"Id\", CanShow: true },\r\n                    Key: {\r\n                      FieldName: \"Key\",\r\n                      CanShow: true,\r\n                      CanSort: false,\r\n                      Width: \"30%\",\r\n                      Type: {\r\n                        type: \"readonly_with_tree\",\r\n                        more: JSON.stringify({\r\n                          fLevel: \"TreeLevel\",\r\n                          fLastOfLevel: \"LastOfLevel\",\r\n                          fHasChild: \"HasChild\",\r\n                          fLevelConfig: \"LevelConfigs\",\r\n                        }),\r\n                      },\r\n                    },\r\n                    Value: {\r\n                      FieldName: \"Value\",\r\n                      CanShow: true,\r\n                      CanSort: false,\r\n                      CanEdit: canEdit ? true : false,\r\n                      Width: \"70%\",\r\n                      Type: { type: \"superman\" },\r\n                    },\r\n                  },\r\n                },\r\n              }\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n      <div style={{ borderTop: \"1px solid #e9ecef\" }}></div>\r\n      {isLoading && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            background: \"#ffffff99\",\r\n          }}\r\n        ></div>\r\n      )}\r\n    </WrapJsonModalContent>\r\n  )\r\n}\r\nexport default function MTCJsonEditor(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  let _obj = null\r\n  if (typeof ctc.valueCell === \"string\" && ctc.valueCell.length > 0) {\r\n    _obj = HJson.getObj(ctc.valueCell)\r\n  }\r\n  const config = {\r\n    ...ctc.getSharedConfig(),\r\n    ...ctc.moreObj,\r\n    jsonview: {\r\n      showMini: true,\r\n      enableClipboard: false,\r\n      displayDataTypes: false,\r\n      ...ctc.moreObj.jsonview,\r\n    },\r\n  }\r\n  // console.warn(\"render json_editor:\", _obj)\r\n  return (\r\n    <div\r\n      className={ctc.classNameWrap(\"mtc-json_editor\")}\r\n      onClick={() => {\r\n        console.warn(\"Click json:\", props)\r\n        MyModal.showFromComponent(\r\n          props => {\r\n            return (\r\n              <ModalEditor\r\n                {...props}\r\n                ctc={ctc}\r\n                obj={_obj || {}}\r\n                config={config}\r\n              />\r\n            )\r\n          },\r\n          {\r\n            title: fnListMyTableCell.fnGetHeaderTitle(ctc.fnList) || \"JSON\",\r\n            backdrop: \"static\",\r\n            showHeader: false,\r\n            fnList: {\r\n              updateCell: (v, opts) => {\r\n                console.warn(\"Updatecell:\", v, opts)\r\n                ctc.updateFieldData(v, opts)\r\n              },\r\n            },\r\n          }\r\n        )\r\n      }}\r\n      style={{\r\n        // maxHeight: \"120px\",\r\n        cursor: ctc.canEdit === true ? \"pointer\" : \"inherit\",\r\n        ...config.style,\r\n      }}\r\n    >\r\n      {_obj != null && config.jsonview.showMini === true && (\r\n        <JsonContainerMini>\r\n          <div>JSON ({_obj != null && `${Object.keys(_obj).length}`})</div>\r\n          <div style={{ color: \"grey\", fontWeight: \"normal\" }}>\r\n            {ctc.valueCell}\r\n          </div>\r\n        </JsonContainerMini>\r\n      )}\r\n      {_obj == null && config.jsonview.showMini === true && (\r\n        <JsonContainerMini style={{ color: \"grey\" }}>\r\n          <div>JSON</div>\r\n        </JsonContainerMini>\r\n      )}\r\n      {_obj != null && config.jsonview.showMini !== true && (\r\n        <JsonContainer>\r\n          <ReactJson src={_obj} {...config.jsonview} />\r\n        </JsonContainer>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","const PasteHelper = {\r\n  fnUpload: null,\r\n  fnPatse: function (e) {\r\n    e.preventDefault()\r\n    console.warn(`paste:`, e)\r\n    var items = e.clipboardData.items\r\n    console.warn(`paste items:`, items)\r\n    let _files = []\r\n    if (items) {\r\n      for (var i = 0; i < items.length; i++) {\r\n        var item = items[i]\r\n        console.log(\"Paste Item type: \" + item.type, item.kind)\r\n        if (item.kind == \"file\") {\r\n          let _file = item.getAsFile()\r\n          _files.push(_file)\r\n          console.log(\"Paste Item file: \" + item, _file)\r\n        } else {\r\n          const text = (e.originalEvent || e).clipboardData.getData(\r\n            \"text/plain\"\r\n          )\r\n          //ko biet vi sao an di - 28/12/2021 - mo lai - bo sung check null\r\n          if (window.document.execCommand) {\r\n            window.document.execCommand(\"insertText\", false, text)\r\n          }\r\n          console.log(`paste text:`, text)\r\n        }\r\n      }\r\n      console.log(`PasteHelper.fnUpload:`, PasteHelper.fnUpload)\r\n      if (PasteHelper.fnUpload && _files.length > 0) {\r\n        PasteHelper.fnUpload(_files)\r\n      }\r\n    }\r\n  },\r\n  checkPasteSupported() {\r\n    var el = document.createElement(\"div\")\r\n    el.setAttribute(\"onpaste\", \"return;\")\r\n    return typeof el.onpaste == \"function\"\r\n  },\r\n  addEventUploadFileAfterPaste: function (fnUpload) {\r\n    PasteHelper.fnUpload = fnUpload\r\n  },\r\n  removeEventUploadFileAfterPaste: function () {\r\n    PasteHelper.fnUpload = null\r\n  },\r\n  removeEvenPaste: function () {\r\n    window.removeEventListener(\"paste\", PasteHelper.fnPatse, false)\r\n  },\r\n  addEventPaste: function () {\r\n    window.addEventListener(\"paste\", PasteHelper.fnPatse, false)\r\n  },\r\n  copyTextToClipboard(text, cbSuccess) {\r\n    if (\r\n      navigator &&\r\n      navigator.clipboard &&\r\n      navigator.clipboard.writeText &&\r\n      text\r\n    ) {\r\n      navigator.clipboard.writeText(text).then(() => {\r\n        if (cbSuccess) {\r\n          cbSuccess()\r\n        }\r\n      })\r\n    }\r\n  },\r\n}\r\nexport default PasteHelper\r\n"],"sourceRoot":""}