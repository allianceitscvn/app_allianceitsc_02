{"version":3,"sources":["core/modules/core/MyPage/Types/simulator_sender_email.js","../node_modules/reactstrap/es/Label.js"],"names":["WrapLayout","styled","div","MyLayoutBase","props","getOptionsByKey","key","state","options","requestOptions","ApiGeneric","request","method","path","name","data","successCallBack","response","Data","setState","account","template","requestLoadTemplate","Value","errorCallBack","error","a","AB","dd","cc","console","log","accountId","templateId","AccountId","TemplateId","objForm","Sender","Recipient","Subject","fieldName","TemplateKeys","replace","formInput","requestAdd","sender","recipient","subject","messageBody","showLoadingSend","MessageBody","setTimeout","showPreview","onHandleChangeSelect","v","renderFieldInformation","Info","_fieldName","push","className","for","id","placeholder","type","onChange","onhandleChangeInfo","value","e","target","this","col","gap","style","color","onClick","disabled","HUtils","getTextWithData","dangerouslySetInnerHTML","__html","attrs","fnList","getSourceData","React","Component","_excluded","stringOrNumberProp","PropTypes","oneOfType","number","string","columnProps","bool","shape","size","order","offset","propTypes","children","node","hidden","check","tag","tagPropType","cssModule","object","xs","sm","md","lg","xl","widths","array","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Label","Tag","htmlFor","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","mapToCssModules","classNames","classes","length","createElement","_extends"],"mappings":"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","file":"static/js/151.595a8c77.chunk.js","sourcesContent":["import React, { Fragment } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyBase, HUtils } from \"@macashipo/mlib\"\r\nimport { ApiGeneric } from \"src/services/apiServices\"\r\nimport { Button, Input, Label } from \"reactstrap\"\r\n\r\nconst WrapLayout = styled.div`\r\n  & .a-box-template {\r\n    color: #000;\r\n    border: 1px solid #d9d9d9;\r\n    margin-bottom: 1rem;\r\n    & .form-control {\r\n      padding: 0;\r\n      border: none;\r\n    }\r\n  }\r\n  & .form-title {\r\n    background: #f0f3f5;\r\n    padding: 0.5rem 0.5rem;\r\n    border-bottom: 1px solid #d9d9d9;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    & h5 {\r\n      color: #000;\r\n      font-weight: bold;\r\n      margin-bottom: 0;\r\n    }\r\n    & button {\r\n      font-size: 16px;\r\n    }\r\n  }\r\n  & .form-input {\r\n    color: #000;\r\n    padding: 1rem;\r\n  }\r\n  & .a-box-sender {\r\n    border: 1px solid #d9d9d9;\r\n    margin-bottom: 1rem;\r\n    & .sender-email {\r\n      color: #000;\r\n      padding: 1rem;\r\n    }\r\n    & label {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n  & .a-row {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 0.5rem;\r\n    > :first-child {\r\n      width: 170px;\r\n    }\r\n    > :last-child {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  & .a-box-preview {\r\n    border: 1px solid #d9d9d9;\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  & .form-preview {\r\n    padding: 1rem;\r\n  }\r\n  & .a-row-preview {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 0.5rem;\r\n    border-bottom: 1px solid #d9d9d9;\r\n    color: #000;\r\n    > :first-child {\r\n      width: 70px;\r\n    }\r\n    > :last-child {\r\n      font-weight: bold;\r\n      flex: 1;\r\n    }\r\n  }\r\n  & .message-body {\r\n    color: #000;\r\n  }\r\n`\r\nclass MyLayoutBase extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      options: null,\r\n      account: null,\r\n      template: null,\r\n      data: null,\r\n      formInput: {\r\n        Sender: \"\",\r\n        Recipient: \"\",\r\n        Subject: \"\",\r\n      },\r\n      showPreview: false,\r\n      showLoadingSend: false,\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.requestOptions()\r\n  }\r\n  getOptionsByKey = key => {\r\n    let _options = this.state.options || {}\r\n    return _options[key] || []\r\n  }\r\n  requestOptions = () => {\r\n    ApiGeneric({\r\n      request: {\r\n        method: \"POST\",\r\n        path: \"EmailQueue\",\r\n        name: \"Options\",\r\n      },\r\n      data: {},\r\n      successCallBack: response => {\r\n        if (response.Data) {\r\n          this.setState(\r\n            {\r\n              options: response.Data,\r\n            },\r\n            () => {\r\n              const { account, template } = this.state\r\n              if (account && template) {\r\n                this.requestLoadTemplate(account.Value, template.Value)\r\n              }\r\n            }\r\n          )\r\n        }\r\n      },\r\n      errorCallBack: (error, response) => {\r\n        var a = response.AB.dd.cc(\"A\")\r\n        console.log(a)\r\n      },\r\n    })\r\n  }\r\n  requestLoadTemplate = (accountId, templateId) => {\r\n    ApiGeneric({\r\n      request: {\r\n        method: \"POST\",\r\n        path: \"EmailQueue\",\r\n        name: \"LoadFromTemplate\",\r\n      },\r\n      data: {\r\n        AccountId: accountId,\r\n        TemplateId: templateId,\r\n      },\r\n      successCallBack: response => {\r\n        if (response.Data) {\r\n          const { Sender, Recipient, Subject } = response.Data\r\n\r\n          let objForm = { Sender, Recipient, Subject }\r\n          for (const fieldName in response.Data.TemplateKeys) {\r\n            let _fieldName = fieldName.replace(/[^\\w\\s]/gi, \"\")\r\n            objForm[_fieldName] = response.Data.TemplateKeys[fieldName]\r\n          }\r\n          this.setState(\r\n            {\r\n              data: response.Data,\r\n              formInput: objForm,\r\n            },\r\n            () => {\r\n              console.log(this.state.formInput)\r\n            }\r\n          )\r\n        }\r\n      },\r\n      errorCallBack: (error, response) => {},\r\n    })\r\n  }\r\n  requestAdd = (formInput, sender, recipient, subject, messageBody) => {\r\n    this.setState({ showLoadingSend: true })\r\n    ApiGeneric({\r\n      request: {\r\n        method: \"POST\",\r\n        path: \"EmailQueue\",\r\n        name: \"Add\",\r\n      },\r\n      data: {\r\n        ...formInput,\r\n        Sender: sender,\r\n        Recipient: recipient,\r\n        Subject: subject,\r\n        MessageBody: messageBody,\r\n      },\r\n      successCallBack: response => {\r\n        setTimeout(() => {\r\n          this.setState({ showLoadingSend: false, showPreview: false })\r\n        }, 1000)\r\n        if (response.Data) {\r\n        }\r\n      },\r\n      errorCallBack: (error, response) => {\r\n        setTimeout(() => {\r\n          this.setState({ showLoadingSend: false })\r\n        }, 1000)\r\n      },\r\n    })\r\n  }\r\n\r\n  onHandleChangeSelect = (v, name) => {\r\n    this.setState(\r\n      {\r\n        [name]: v,\r\n      },\r\n      () => {\r\n        const { account, template } = this.state\r\n        if (account && template) {\r\n          this.requestLoadTemplate(account.Value, template.Value)\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  renderFieldInformation = () => {\r\n    const { TemplateKeys } = this.state.data\r\n    var Info = []\r\n    for (const fieldName in TemplateKeys) {\r\n      let _fieldName = fieldName.replace(/[^\\w\\s]/gi, \"\")\r\n      Info.push(\r\n        <div className=\"a-row\">\r\n          <Label for=\"emailSendTo\">{fieldName}</Label>\r\n          <Input\r\n            id=\"emailSendTo\"\r\n            name={_fieldName}\r\n            placeholder={`input ${fieldName}`}\r\n            type=\"text\"\r\n            onChange={this.onhandleChangeInfo}\r\n            value={this.state.formInput[_fieldName]}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n    return Info\r\n  }\r\n\r\n  onhandleChangeInfo = e => {\r\n    const { name, value } = e.target\r\n    this.setState({\r\n      formInput: { ...this.state.formInput, [name]: value },\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { data, formInput } = this.state\r\n    return (\r\n      <WrapLayout\r\n        col={this.props.col}\r\n        gap={this.props.gap}\r\n        style={this.props.style}\r\n        className={this.props.className}\r\n      >\r\n        {this.state.showPreview ? (\r\n          <div className=\"a-box-preview\">\r\n            <div className=\"form-title\">\r\n              <h5>Preview</h5>\r\n              <div>\r\n                <Button\r\n                  color=\"primary\"\r\n                  className=\"mr-2\"\r\n                  onClick={() => {\r\n                    this.setState({ showPreview: !this.state.showPreview })\r\n                  }}\r\n                  disabled={this.state.data ? false : true}\r\n                >\r\n                  {this.state.showPreview ? \"Hide Preview\" : \"Preview\"}\r\n                </Button>\r\n                <Button\r\n                  color=\"success\"\r\n                  onClick={e => {\r\n                    console.log(\"submit:\", formInput)\r\n                    this.requestAdd(\r\n                      formInput,\r\n                      formInput.Sender,\r\n                      formInput.Recipient,\r\n                      formInput.Subject,\r\n                      this.state.data.MessageBody\r\n                    )\r\n                  }}\r\n                >\r\n                  {this.state.showLoadingSend ? (\r\n                    <i className=\"fa fa-spinner fa-spin\"></i>\r\n                  ) : (\r\n                    \"Send\"\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-preview\">\r\n              <div className=\"a-row-preview\">\r\n                <div>Form:</div>\r\n                <div>\r\n                  {HUtils.getTextWithData(formInput.Sender, { ...formInput })}\r\n                </div>\r\n              </div>\r\n              <div className=\"a-row-preview\">\r\n                <div>Subject:</div>\r\n                <div>\r\n                  {HUtils.getTextWithData(formInput.Subject, {\r\n                    ...formInput,\r\n                  })}\r\n                </div>\r\n              </div>\r\n              <div className=\"a-row-preview\">\r\n                <div>Sendto:</div>\r\n                <div>\r\n                  {HUtils.getTextWithData(formInput.Recipient, {\r\n                    ...formInput,\r\n                  })}\r\n                </div>\r\n              </div>\r\n              <div className=\"message-body p-1\">\r\n                <div\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: HUtils.getTextWithData(\r\n                      this.state.data?.MessageBody,\r\n                      {\r\n                        ...formInput,\r\n                      }\r\n                    ),\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <Fragment>\r\n            <div className=\"a-box-template\">\r\n              <div className=\"form-title\">\r\n                <h5>Select Template</h5>\r\n              </div>\r\n              <div className=\"form-input\">\r\n                <div className=\"a-row\">\r\n                  <div>Account</div>\r\n                  <div>\r\n                    <MyBase\r\n                      type=\"select2\"\r\n                      className=\"form-control\"\r\n                      value={this.state.account}\r\n                      onChange={v => this.onHandleChangeSelect(v, \"account\")}\r\n                      attrs={{}}\r\n                      fnList={{\r\n                        getSourceData: () => {\r\n                          return this.getOptionsByKey(\"AccountList\")\r\n                        },\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"a-row\">\r\n                  <div>Template</div>\r\n                  <div>\r\n                    <MyBase\r\n                      type=\"select2\"\r\n                      className=\"form-control\"\r\n                      value={this.state.template}\r\n                      onChange={v => this.onHandleChangeSelect(v, \"template\")}\r\n                      attrs={{}}\r\n                      fnList={{\r\n                        getSourceData: () => {\r\n                          return this.getOptionsByKey(\"TemplateList\")\r\n                        },\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.state.data ? (\r\n              <div className=\"a-box-sender\">\r\n                <div className=\"form-title\">\r\n                  <h5>Fill Information</h5>\r\n                  <div>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className=\"mr-2\"\r\n                      onClick={() => {\r\n                        this.setState({ showPreview: !this.state.showPreview })\r\n                      }}\r\n                      disabled={this.state.data ? false : true}\r\n                    >\r\n                      {this.state.showPreview ? \"Hide Preview\" : \"Preview\"}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-input\">\r\n                  <div className=\"a-row\">\r\n                    <Label for=\"emailSubject\">Subject</Label>\r\n                    <Input\r\n                      id=\"emailSubject\"\r\n                      name=\"Subject\"\r\n                      placeholder=\"input subject\"\r\n                      type=\"text\"\r\n                      value={formInput.Subject}\r\n                      onChange={this.onhandleChangeInfo}\r\n                    />\r\n                  </div>\r\n                  <div className=\"a-row\">\r\n                    <Label for=\"emailSendTo\">Send to</Label>\r\n                    <Input\r\n                      id=\"emailSendTo\"\r\n                      name=\"Recipient\"\r\n                      placeholder=\"input reciver\"\r\n                      type=\"text\"\r\n                      value={formInput.Recipient}\r\n                      onChange={this.onhandleChangeInfo}\r\n                    />\r\n                  </div>\r\n                  {this.renderFieldInformation()}\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Fragment>\r\n        )}\r\n      </WrapLayout>\r\n    )\r\n  }\r\n}\r\nexport default MyLayoutBase\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;"],"sourceRoot":""}