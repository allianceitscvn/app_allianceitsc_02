{"version":3,"sources":["modules/adminpanel/MyUI/Types/ObjEditorTypes/object_all_style_options.ts","modules/adminpanel/MyUI/Types/ObjEditorTypes/style_object_mobile.js","modules/adminpanel/MyUI/Types/obj_editor.js"],"names":["OptionsAllStyle","fontStyle","Value","Text","width","WrapLayout","styled","div","ModeTypeWidth","number","text","max","defaultValue","displayTab","percent","select","color","UI","props","fnList","data","_defaultTab","type","_defaultValue","value","options","console","log","className","placement","overlay","display","Input","min","onChange","e","target","parseInt","HUtils","runFuntion","v","Object","keys","map","fieldName","i","optionsType","Button","onClick","id","name","MUI_Obj_Editor","useState","key","backgroundColor","style","setStyle","updateValueStyle","objectStyle"],"mappings":"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","file":"static/js/228.b531ac05.chunk.js","sourcesContent":["export const OptionsAllStyle = {\r\n  fontStyle: [\r\n    { Value: \"normal\", Text: \"normal\" },\r\n    { Value: \"bold\", Text: \"bold\" },\r\n    { Value: \"100\", Text: \"100\" },\r\n    { Value: \"200\", Text: \"200\" },\r\n    { Value: \"300\", Text: \"300\" },\r\n    { Value: \"400\", Text: \"400\" },\r\n    { Value: \"500\", Text: \"500\" },\r\n    { Value: \"600\", Text: \"600\" },\r\n    { Value: \"700\", Text: \"700\" },\r\n    { Value: \"800\", Text: \"800\" },\r\n    { Value: \"900\", Text: \"900\" },\r\n  ],\r\n  width: [\r\n    {\r\n      Value: \"auto\",\r\n      Text: \"auto\",\r\n    },\r\n  ],\r\n}\r\n","import { react } from \"@babel/types\"\r\nimport { HUtils, MyLib } from \"@macashipo/mlib\"\r\nimport React, { useRef, useState } from \"react\"\r\nimport { Button, Input } from \"reactstrap\"\r\nimport styled from \"styled-components\"\r\nimport { Tooltip } from \"src/core/components\"\r\n\r\nconst WrapLayout = styled.div`\r\n  margin-right: 20px;\r\n  margin-bottom: 20px;\r\n\r\n  & .wrap-value-left-top {\r\n    max-height: 38px;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  & .wrap-value {\r\n    display: flex;\r\n    align-items: top;\r\n    & .value-width {\r\n      min-width: 100px;\r\n    }\r\n    & .form-control {\r\n      width: 100px;\r\n    }\r\n    & .btn-group {\r\n      margin-left: 10px;\r\n      flex: 1;\r\n      & .btn {\r\n        border: 1px solid #b4b8c7;\r\n      }\r\n    }\r\n  }\r\n  & .style-label {\r\n    height: 38px;\r\n    line-height: 38px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n  & .wrap-value-range {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-top: 5px;\r\n    & .form-control-range {\r\n    }\r\n  }\r\n  & input {\r\n    width: 100%;\r\n    flex: 1;\r\n  }\r\n  input[type=\"number\"]::-webkit-inner-spin-button,\r\n  input[type=\"number\"]::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    margin: 0;\r\n  }\r\n`\r\n\r\nconst ModeTypeWidth = {\r\n  number: {\r\n    text: \"number\",\r\n    max: \"1000\",\r\n    defaultValue: 0,\r\n    displayTab: \"px\",\r\n  },\r\n  percent: {\r\n    text: \"percent\",\r\n    max: \"100\",\r\n    defaultValue: 0,\r\n    displayTab: \"%\",\r\n  },\r\n  select: {\r\n    text: \"select\",\r\n    defaultValue: null,\r\n    displayTab: \"select\",\r\n  },\r\n  color: {\r\n    text: \"color\",\r\n    defaultValue: \"#fff\",\r\n    displayTab: \"color\",\r\n  },\r\n  text: {\r\n    text: \"text\",\r\n    defaultValue: \"\",\r\n    displayTab: \"text\",\r\n  },\r\n}\r\n\r\nconst UI = props => {\r\n  const { fnList, data = {} } = props\r\n  let _defaultTab = data?.type || ModeTypeWidth.number.text\r\n  let _defaultValue = data?.value === 0 ? 0 : data?.value || null\r\n  let options = data?.options || []\r\n  console.log(\"_defaultValue\", data, _defaultValue)\r\n  return (\r\n    <WrapLayout>\r\n      <div className=\"wrap-value\">\r\n        <div className=\"style-label\">\r\n          <Tooltip placement=\"topLeft\" overlay={<div>{data.display}</div>}>\r\n            <div>{data.display}:&nbsp;</div>\r\n          </Tooltip>\r\n        </div>\r\n        <div className=\"wrap-value-left\">\r\n          <div className=\"wrap-value-left-top\">\r\n            <div className=\"value-width\">\r\n              {ModeTypeWidth.number.text === _defaultTab ||\r\n              ModeTypeWidth.percent.text === _defaultTab ? (\r\n                <Input\r\n                  type=\"number\"\r\n                  min={0}\r\n                  max={ModeTypeWidth[_defaultTab].max}\r\n                  value={_defaultValue}\r\n                  onChange={e => {\r\n                    if (\r\n                      e.target.value >= parseInt(ModeTypeWidth[_defaultTab].max)\r\n                    ) {\r\n                      HUtils.runFuntion(fnList, \"updateValueStyle\", [\r\n                        {\r\n                          ...data,\r\n                          value: parseInt(ModeTypeWidth[_defaultTab].max),\r\n                        },\r\n                      ])\r\n                    } else {\r\n                      HUtils.runFuntion(fnList, \"updateValueStyle\", [\r\n                        { ...data, value: e.target.value },\r\n                      ])\r\n                    }\r\n                  }}\r\n                />\r\n              ) : ModeTypeWidth.select.text === _defaultTab ? (\r\n                <MyLib\r\n                  type=\"select2\"\r\n                  onChange={v => {\r\n                    // console.log(v)\r\n                    HUtils.runFuntion(fnList, \"updateValueStyle\", [\r\n                      { ...data, value: v.Value },\r\n                    ])\r\n                  }}\r\n                  Value={_defaultValue}\r\n                  options={options || []}\r\n                />\r\n              ) : ModeTypeWidth.color.text === _defaultTab ? (\r\n                <Input\r\n                  type=\"color\"\r\n                  value={_defaultValue}\r\n                  onChange={e => {\r\n                    HUtils.runFuntion(fnList, \"updateValueStyle\", [\r\n                      { ...data, value: e.target.value },\r\n                    ])\r\n                  }}\r\n                />\r\n              ) : ModeTypeWidth.text.text === _defaultTab ? (\r\n                <Input\r\n                  value={_defaultValue ? _defaultValue : \"\"}\r\n                  onChange={e => {\r\n                    HUtils.runFuntion(fnList, \"updateValueStyle\", [\r\n                      { ...data, value: e.target.value },\r\n                    ])\r\n                  }}\r\n                />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n            <div className=\"btn-group\">\r\n              {Object.keys(ModeTypeWidth).map((fieldName, i) => {\r\n                return data.optionsType?.[fieldName] ? (\r\n                  <Button\r\n                    key={i}\r\n                    color={\r\n                      _defaultTab === ModeTypeWidth[fieldName].text\r\n                        ? \"primary\"\r\n                        : \"secondary\"\r\n                    }\r\n                    onClick={() => {\r\n                      HUtils.runFuntion(fnList, \"updateValueStyle\", [\r\n                        {\r\n                          ...data,\r\n                          type: ModeTypeWidth[fieldName].text,\r\n                          value: ModeTypeWidth[fieldName].defaultValue,\r\n                        },\r\n                      ])\r\n                    }}\r\n                  >\r\n                    {ModeTypeWidth[fieldName].displayTab}\r\n                  </Button>\r\n                ) : (\r\n                  \"\"\r\n                )\r\n              })}\r\n            </div>\r\n          </div>\r\n          {(ModeTypeWidth.number.text === _defaultTab ||\r\n            ModeTypeWidth.percent.text === _defaultTab) && (\r\n            <div className=\"wrap-value-range\">\r\n              <input\r\n                value={_defaultValue ? _defaultValue : 0}\r\n                onChange={e => {\r\n                  HUtils.runFuntion(fnList, \"updateValueStyle\", [\r\n                    { ...data, value: e.target.value },\r\n                  ])\r\n                }}\r\n                max={ModeTypeWidth[_defaultTab].max}\r\n                id=\"exampleRange\"\r\n                name=\"range\"\r\n                type=\"range\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </WrapLayout>\r\n  )\r\n}\r\nexport default UI\r\n","import { useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { OptionsAllStyle } from \"./ObjEditorTypes/object_all_style_options\"\r\nimport StyleObjectMobile from \"./ObjEditorTypes/style_object_mobile\"\r\nconst WrapLayout = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst styleTemp = {\r\n  width: {\r\n    key: \"width\",\r\n    type: \"number\",\r\n    display: \"width\",\r\n    value: null,\r\n    options: [],\r\n    optionsType: {\r\n      number: true,\r\n      percent: true,\r\n      auto: true,\r\n    },\r\n  },\r\n  fontStyle: {\r\n    key: \"fontStyle\",\r\n    type: \"select\",\r\n    display: \"font-style\",\r\n    value: null,\r\n    optionsType: {\r\n      select: true,\r\n    },\r\n    options: OptionsAllStyle.fontStyle || [],\r\n  },\r\n  backgroundColor: {\r\n    key: \"backgroundColor\",\r\n    type: \"color\",\r\n    display: \"bg-color\",\r\n    value: null,\r\n    optionsType: {\r\n      color: true,\r\n      text: true,\r\n    },\r\n    options: OptionsAllStyle.backgroundColor || [],\r\n  },\r\n}\r\n\r\nconst MUI_Obj_Editor = props => {\r\n  const [listStyleUse, setListStyleUse] = useState([])\r\n  const [style, setStyle] = useState({\r\n    width: {\r\n      key: \"width\",\r\n      type: \"number\",\r\n      display: \"width\",\r\n      value: null,\r\n      options: OptionsAllStyle.width || [],\r\n      optionsType: {\r\n        number: true,\r\n        percent: true,\r\n        select: true,\r\n      },\r\n    },\r\n    fontStyle: {\r\n      key: \"fontStyle\",\r\n      type: \"select\",\r\n      display: \"font-style\",\r\n      value: null,\r\n      optionsType: {\r\n        select: true,\r\n      },\r\n      options: OptionsAllStyle.fontStyle || [],\r\n    },\r\n    backgroundColor: {\r\n      key: \"backgroundColor\",\r\n      type: \"color\",\r\n      display: \"bg-color\",\r\n      value: null,\r\n      optionsType: {\r\n        color: true,\r\n        text: true,\r\n      },\r\n      options: OptionsAllStyle.backgroundColor || [],\r\n    },\r\n  })\r\n\r\n  const updateValueStyle = objectStyle => {\r\n    setStyle({ ...style, [objectStyle.key]: objectStyle })\r\n  }\r\n\r\n  return (\r\n    <WrapLayout>\r\n      <StyleObjectMobile\r\n        fnList={{\r\n          updateValueStyle,\r\n        }}\r\n        data={style.width}\r\n      />\r\n      <StyleObjectMobile\r\n        fnList={{\r\n          updateValueStyle,\r\n        }}\r\n        data={style.fontStyle}\r\n      />\r\n      <StyleObjectMobile\r\n        fnList={{\r\n          updateValueStyle,\r\n        }}\r\n        data={style.backgroundColor}\r\n      />\r\n    </WrapLayout>\r\n  )\r\n}\r\nexport default MUI_Obj_Editor\r\n"],"sourceRoot":""}