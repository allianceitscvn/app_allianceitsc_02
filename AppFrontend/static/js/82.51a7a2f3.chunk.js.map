{"version":3,"sources":["modules/adminpanel/MyFormControl/Types/arrtext.js","modules/adminpanel/MyFormControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFormControl.js","modules/adminpanel/hooks/useConfigFormControl.js"],"names":["MFCText","props","cfc","useConfigFormControl","rInputAdd","React","useRef","_values","valueControl","Array","isArray","console","log","Wrap","className","map","v","i","onClick","_currentValues","_i","indexOf","splice","updateValueControl","overlay","propsOverlay","ref","type","autoFocus","placeholder","onKeyPress","event","key","current","value","hide","overlayClassName","placement","destroyTooltipOnHide","styled","div","MFCWrapControl","noLabel","FlowGetCanShow","configFormControl","fnList","more","KMore","htmlWhenHide","html","_typeWrapControl","fnListMyFormControl","fnGetTypeWrapControl","_configWrapControl","FlowGetMoreOfKey","configWrapControl","MyLayoutHelpers","Types","children","_styleWrapControl","styleWrapControl","defaultValue","style","styleLabel","label","styleControl","kgetSourceData","fnListOfFormControl","fieldName","_fnList","info","optionKey","sourceList","fnListMyForm","getSourceList","_dataForm","getCurrentValues","AHOptions","kfnGetTypeWrapControl","_typeWrapControlFromMyForm","hasOwnProperty","typeWrapControl","refConfigFormControl","FlowMergeWithCustomProps","custom","defaultValues","getDefaultValues","useState","setValueControl","refFnList","forceUpdate","useForceUpdate","addFnListFromControl","kresetFormControl","warn","FlowFnListFromExtControl","keys","HUtils","runFuntion","newValue","updateValueControlWithMoreFields","moreValues","Object","f","getDisabled","disabled","getMoreAttrs","_moreAttrs","autoComplete","String","placeHolder","rows"],"mappings":"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","file":"static/js/82.51a7a2f3.chunk.js","sourcesContent":["import React from \"react\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport { Alert } from \"reactstrap\"\r\nimport useConfigFormControl from \"../../hooks/useConfigFormControl\"\r\nimport styled from \"styled-components\"\r\nimport { Popover } from \"src/core/components\"\r\nexport default function MFCText(props) {\r\n  const cfc = useConfigFormControl({ props })\r\n  const rInputAdd = React.useRef(null)\r\n  let _values = cfc.valueControl || []\r\n  if (Array.isArray(_values) == false) {\r\n    _values = []\r\n  }\r\n  console.log(\"_values\", _values)\r\n  return (\r\n    <WrapControl cfc={cfc} {...props}>\r\n      <Wrap className=\"mfc-arrtext\">\r\n        {_values != null &&\r\n          _values.map((v, i) => {\r\n            return (\r\n              <div className=\"a-item\" key={i}>\r\n                {v}\r\n                <div\r\n                  className=\"a-remove\"\r\n                  onClick={() => {\r\n                    let _currentValues = [..._values]\r\n                    let _i = _currentValues.indexOf(v)\r\n                    if (_i > -1) {\r\n                      _currentValues.splice(_i, 1)\r\n                      console.log(\"_currentValues:\", _currentValues)\r\n                      cfc.updateValueControl(_currentValues)\r\n                    }\r\n                  }}\r\n                >\r\n                  <i className=\"fa fa-minus\" />\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        <Popover\r\n          overlay={propsOverlay => {\r\n            return (\r\n              <div className=\"input-group\">\r\n                <input\r\n                  ref={rInputAdd}\r\n                  type=\"text\"\r\n                  autoFocus\r\n                  placeholder=\"Input\"\r\n                  className=\"form-control\"\r\n                  onKeyPress={event => {\r\n                    if (event.key === \"Enter\") {\r\n                      if (\r\n                        rInputAdd &&\r\n                        rInputAdd.current &&\r\n                        rInputAdd.current.value\r\n                      ) {\r\n                        cfc.updateValueControl([\r\n                          ..._values,\r\n                          rInputAdd.current.value,\r\n                        ])\r\n                        propsOverlay.hide && propsOverlay.hide()\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n                <div className=\"input-group-append\">\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      console.log(\"click:\")\r\n                      if (\r\n                        rInputAdd &&\r\n                        rInputAdd.current &&\r\n                        rInputAdd.current.value\r\n                      ) {\r\n                        cfc.updateValueControl([\r\n                          ..._values,\r\n                          rInputAdd.current.value,\r\n                        ])\r\n                        propsOverlay.hide && propsOverlay.hide()\r\n                      }\r\n                    }}\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )\r\n          }}\r\n          overlayClassName=\"m-popover\"\r\n          placement=\"topRight\"\r\n          destroyTooltipOnHide={true}\r\n        >\r\n          <div className=\"a-add\">\r\n            <i className=\"fa fa-plus\" />\r\n          </div>\r\n        </Popover>\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  & > .a-item {\r\n    padding: 5px;\r\n    background: #c9e9ff;\r\n    border: 1px solid #7ec6f1;\r\n    border-radius: 4px;\r\n    margin-right: 5px;\r\n    position: relative;\r\n    & > .a-remove {\r\n      position: absolute;\r\n      top: -10px;\r\n      right: -6px;\r\n      width: 20px;\r\n      height: 20px;\r\n      background: #f5caca;\r\n      color: #ff4242;\r\n      text-align: center;\r\n      border-radius: 20px;\r\n      display: none;\r\n      cursor: pointer;\r\n    }\r\n    &:hover {\r\n      background: #afdeff;\r\n      & > .a-remove {\r\n        display: block;\r\n      }\r\n    }\r\n  }\r\n  & > .a-add {\r\n    width: 28px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: #cfefcd;\r\n    height: 28px;\r\n    border-radius: 20px;\r\n    color: green;\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyLayout, MyLayoutHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport { fnListMyFormControl } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetCanShow,\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MFCWrapControl(props) {\r\n  const { cfc, noLabel } = props\r\n  //check can show\r\n  let _canShow = FlowGetCanShow({\r\n    configFormControl: cfc.configFormControl,\r\n    fnList: cfc.fnList,\r\n    more: cfc.more,\r\n  })\r\n  if (_canShow === false) {\r\n    if (cfc.more && cfc.more[KMore.htmlWhenHide]) {\r\n      return <MyUI type=\"html\" html={cfc.more[KMore.htmlWhenHide]} />\r\n    }\r\n    return null\r\n  }\r\n\r\n  let _typeWrapControl = fnListMyFormControl.fnGetTypeWrapControl(cfc.fnList)\r\n  let _configWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.configWrapControl,\r\n    }) || {}\r\n  // console.log(\"_typeWrapControl:\", _typeWrapControl)\r\n  if (MyLayoutHelpers.Types[_typeWrapControl]) {\r\n    return (\r\n      <MyLayout\r\n        type={_typeWrapControl}\r\n        cfc={cfc}\r\n        noLabel={noLabel}\r\n        children={props.children}\r\n        configWrapControl={_configWrapControl}\r\n      />\r\n    )\r\n  }\r\n  let _styleWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.styleWrapControl,\r\n      defaultValue: false,\r\n    }) || {}\r\n  // console.warn(\"render wrap:\", props, _styleWrapControl)\r\n  return (\r\n    <Wrap\r\n      className=\"mfcw-v1\"\r\n      style={{ ..._styleWrapControl, ..._configWrapControl.style }}\r\n    >\r\n      {noLabel !== true && (\r\n        <div style={_configWrapControl.styleLabel}>{cfc.label}</div>\r\n      )}\r\n      <div style={_configWrapControl.styleControl}>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { fnListMyForm, kfnGetTypeWrapControl } from \"src/helpers/fnList\"\r\nimport { HUtils, HIs } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport { KMore } from \"src/helpers/Flows/FormControl\"\r\nconst kgetSourceData = \"getSourceData\"\r\nconst fnListOfFormControl = {\r\n  init({ props }) {\r\n    const configFormControl = props.configFormControl || {}\r\n    const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n\r\n    _fnList[kgetSourceData] = () => {\r\n      console.info(kgetSourceData, fieldName)\r\n      if (more && more.optionKey) {\r\n        const sourceList = fnListMyForm.getSourceList(_fnList)\r\n        if (sourceList && sourceList[more.optionKey]) {\r\n          return sourceList[more.optionKey]\r\n        } else {\r\n          if (\r\n            more.optionKey.indexOf(\".\") > -1 &&\r\n            more.optionKey.indexOf(\"[\") > -1\r\n          ) {\r\n            //option multi\r\n            //\r\n            let _dataForm = fnListMyForm.getCurrentValues(_fnList)\r\n            return AHOptions.getOptionsByLevel(\r\n              sourceList,\r\n              more.optionKey,\r\n              _dataForm\r\n            )\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n    _fnList[kfnGetTypeWrapControl] = () => {\r\n      let _typeWrapControlFromMyForm =\r\n        fnListMyForm.fnGetTypeWrapControl(props.fnList) || \"\"\r\n      if (more && more.hasOwnProperty(KMore.typeWrapControl)) {\r\n        _typeWrapControlFromMyForm = more[KMore.typeWrapControl]\r\n      }\r\n      return _typeWrapControlFromMyForm\r\n    }\r\n    return _fnList\r\n  },\r\n  getSourceData() {},\r\n}\r\n\r\nconst helpersOfFormControl = {}\r\nexport { helpersOfFormControl, fnListOfFormControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport React, { useState } from \"react\"\r\nimport { fnListOfFormControl } from \"./fnListOfFormControl\"\r\nimport { fnListMyForm, kresetFormControl } from \"src/helpers/fnList\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowFnListFromExtControl,\r\n  FlowMergeWithCustomProps,\r\n} from \"src/helpers/Flows/FormControl\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigFormControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFormControl = React.useRef(props.configFormControl)\r\n  const configFormControl = refConfigFormControl.current || {}\r\n  const { label, fieldName } = configFormControl\r\n  FlowMergeWithCustomProps({ configFormControl, custom: props.custom })\r\n  const more = configFormControl.more || {}\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n  const defaultValues = fnListMyForm.getDefaultValues(props.fnList) || {}\r\n  // console.warn(\"defaultValues\", defaultValues)\r\n  const [valueControl, setValueControl] = useState(\r\n    defaultValues[fieldName] || \"\"\r\n  )\r\n  const refFnList = React.useRef(fnListOfFormControl.init({ props }))\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\")\r\n  //   if (countForceUpdate < countForceUpdateMax) setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      console.warn(\"reset form control\")\r\n      setValueControl(defaultValues[fieldName] || \"\")\r\n    },\r\n    fieldName,\r\n  ])\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    FlowFnListFromExtControl.keys.forceUpdate,\r\n    () => {\r\n      forceUpdate()\r\n    },\r\n    fieldName,\r\n  ])\r\n\r\n  return {\r\n    more: more,\r\n    forceUpdate,\r\n    configFormControl,\r\n    label,\r\n    defaultValues,\r\n    fieldName,\r\n    optionKey: more.optionKey,\r\n    valueControl,\r\n    fnList,\r\n    setValueControl,\r\n    updateValueControl: v => {\r\n      // console.warn(\"update value\", props)\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n      ])\r\n    },\r\n    updateValueControlWithMoreFields: (v, moreValues = {}) => {\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n        ...Object.keys(moreValues).map((f, i) => {\r\n          return {\r\n            fieldName: f,\r\n            newValue: moreValues[f],\r\n          }\r\n        }),\r\n      ])\r\n    },\r\n    getDisabled: () => {\r\n      return more.disabled === true\r\n    },\r\n    getMoreAttrs: () => {\r\n      let _moreAttrs = {}\r\n      // console.log(\"more:\", more)\r\n      if (more.autoComplete != null) {\r\n        _moreAttrs.autoComplete = String(more.autoComplete)\r\n        if (more.autoComplete === false) {\r\n          _moreAttrs.autoComplete = \"new-password\" //for chrome disabled autofill\r\n        }\r\n      }\r\n      if (more.placeholder) {\r\n        _moreAttrs.placeHolder = more.placeholder\r\n      }\r\n      if (more.disabled) {\r\n        _moreAttrs.disabled = more.disabled\r\n      }\r\n      if (more.rows) {\r\n        _moreAttrs.rows = more.rows\r\n      }\r\n      return _moreAttrs\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigFormControl\r\n"],"sourceRoot":""}