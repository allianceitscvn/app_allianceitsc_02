{"version":3,"sources":["modules/adminpanel/MyFormControl/Types/password.js","modules/adminpanel/MyFormControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFormControl.js","modules/adminpanel/hooks/useConfigFormControl.js"],"names":["MFCText","props","cfc","useConfigFormControl","className","type","inputType","value","valueControl","onChange","v","setValueControl","attrs","onBlur","updateValueControl","getMoreAttrs","fnList","getMore","Wrap","styled","div","MFCWrapControl","noLabel","FlowGetCanShow","configFormControl","more","KMore","htmlWhenHide","html","_typeWrapControl","fnListMyFormControl","fnGetTypeWrapControl","_configWrapControl","FlowGetMoreOfKey","key","configWrapControl","MyLayoutHelpers","Types","children","_styleWrapControl","styleWrapControl","defaultValue","style","styleLabel","label","styleControl","kgetSourceData","fnListOfFormControl","fieldName","_fnList","console","info","optionKey","sourceList","fnListMyForm","getSourceList","indexOf","_dataForm","getCurrentValues","AHOptions","kfnGetTypeWrapControl","_typeWrapControlFromMyForm","hasOwnProperty","typeWrapControl","refConfigFormControl","React","useRef","current","FlowMergeWithCustomProps","custom","defaultValues","getDefaultValues","useState","refFnList","forceUpdate","useForceUpdate","addFnListFromControl","kresetFormControl","warn","FlowFnListFromExtControl","keys","HUtils","runFuntion","newValue","updateValueControlWithMoreFields","moreValues","Object","map","f","i","getDisabled","disabled","_moreAttrs","autoComplete","String","placeholder","placeHolder","rows"],"mappings":"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","file":"static/js/88.4275abfb.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { MyBase } from \"@macashipo/mlib\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigFormControl from \"../../hooks/useConfigFormControl\"\r\nexport default function MFCText(props) {\r\n  const cfc = useConfigFormControl({ props })\r\n  // console.warn(\"render MFCText:\", props)\r\n  return (\r\n    <WrapControl cfc={cfc} {...props}>\r\n      <div className=\"mfc-text\">\r\n        <MyBase\r\n          type=\"text\"\r\n          inputType=\"password\"\r\n          className=\"form-control\"\r\n          value={cfc.valueControl}\r\n          onChange={v => {\r\n            // console.warn(\"text:\", v)\r\n            cfc.setValueControl(v)\r\n          }}\r\n          attrs={{\r\n            onBlur: () => {\r\n              cfc.updateValueControl(cfc.valueControl)\r\n            },\r\n            ...cfc.getMoreAttrs(),\r\n          }}\r\n          fnList={{\r\n            getMore: () => {\r\n              return {}\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </WrapControl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyLayout, MyLayoutHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport { fnListMyFormControl } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetCanShow,\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MFCWrapControl(props) {\r\n  const { cfc, noLabel } = props\r\n  //check can show\r\n  let _canShow = FlowGetCanShow({\r\n    configFormControl: cfc.configFormControl,\r\n    fnList: cfc.fnList,\r\n    more: cfc.more,\r\n  })\r\n  if (_canShow === false) {\r\n    if (cfc.more && cfc.more[KMore.htmlWhenHide]) {\r\n      return <MyUI type=\"html\" html={cfc.more[KMore.htmlWhenHide]} />\r\n    }\r\n    return null\r\n  }\r\n\r\n  let _typeWrapControl = fnListMyFormControl.fnGetTypeWrapControl(cfc.fnList)\r\n  let _configWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.configWrapControl,\r\n    }) || {}\r\n  // console.log(\"_typeWrapControl:\", _typeWrapControl)\r\n  if (MyLayoutHelpers.Types[_typeWrapControl]) {\r\n    return (\r\n      <MyLayout\r\n        type={_typeWrapControl}\r\n        cfc={cfc}\r\n        noLabel={noLabel}\r\n        children={props.children}\r\n        configWrapControl={_configWrapControl}\r\n      />\r\n    )\r\n  }\r\n  let _styleWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.styleWrapControl,\r\n      defaultValue: false,\r\n    }) || {}\r\n  // console.warn(\"render wrap:\", props, _styleWrapControl)\r\n  return (\r\n    <Wrap\r\n      className=\"mfcw-v1\"\r\n      style={{ ..._styleWrapControl, ..._configWrapControl.style }}\r\n    >\r\n      {noLabel !== true && (\r\n        <div style={_configWrapControl.styleLabel}>{cfc.label}</div>\r\n      )}\r\n      <div style={_configWrapControl.styleControl}>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { fnListMyForm, kfnGetTypeWrapControl } from \"src/helpers/fnList\"\r\nimport { HUtils, HIs } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport { KMore } from \"src/helpers/Flows/FormControl\"\r\nconst kgetSourceData = \"getSourceData\"\r\nconst fnListOfFormControl = {\r\n  init({ props }) {\r\n    const configFormControl = props.configFormControl || {}\r\n    const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n\r\n    _fnList[kgetSourceData] = () => {\r\n      console.info(kgetSourceData, fieldName)\r\n      if (more && more.optionKey) {\r\n        const sourceList = fnListMyForm.getSourceList(_fnList)\r\n        if (sourceList && sourceList[more.optionKey]) {\r\n          return sourceList[more.optionKey]\r\n        } else {\r\n          if (\r\n            more.optionKey.indexOf(\".\") > -1 &&\r\n            more.optionKey.indexOf(\"[\") > -1\r\n          ) {\r\n            //option multi\r\n            //\r\n            let _dataForm = fnListMyForm.getCurrentValues(_fnList)\r\n            return AHOptions.getOptionsByLevel(\r\n              sourceList,\r\n              more.optionKey,\r\n              _dataForm\r\n            )\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n    _fnList[kfnGetTypeWrapControl] = () => {\r\n      let _typeWrapControlFromMyForm =\r\n        fnListMyForm.fnGetTypeWrapControl(props.fnList) || \"\"\r\n      if (more && more.hasOwnProperty(KMore.typeWrapControl)) {\r\n        _typeWrapControlFromMyForm = more[KMore.typeWrapControl]\r\n      }\r\n      return _typeWrapControlFromMyForm\r\n    }\r\n    return _fnList\r\n  },\r\n  getSourceData() {},\r\n}\r\n\r\nconst helpersOfFormControl = {}\r\nexport { helpersOfFormControl, fnListOfFormControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport React, { useState } from \"react\"\r\nimport { fnListOfFormControl } from \"./fnListOfFormControl\"\r\nimport { fnListMyForm, kresetFormControl } from \"src/helpers/fnList\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowFnListFromExtControl,\r\n  FlowMergeWithCustomProps,\r\n} from \"src/helpers/Flows/FormControl\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigFormControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFormControl = React.useRef(props.configFormControl)\r\n  const configFormControl = refConfigFormControl.current || {}\r\n  const { label, fieldName } = configFormControl\r\n  FlowMergeWithCustomProps({ configFormControl, custom: props.custom })\r\n  const more = configFormControl.more || {}\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n  const defaultValues = fnListMyForm.getDefaultValues(props.fnList) || {}\r\n  // console.warn(\"defaultValues\", defaultValues)\r\n  const [valueControl, setValueControl] = useState(\r\n    defaultValues[fieldName] || \"\"\r\n  )\r\n  const refFnList = React.useRef(fnListOfFormControl.init({ props }))\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\")\r\n  //   if (countForceUpdate < countForceUpdateMax) setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      console.warn(\"reset form control\")\r\n      setValueControl(defaultValues[fieldName] || \"\")\r\n    },\r\n    fieldName,\r\n  ])\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    FlowFnListFromExtControl.keys.forceUpdate,\r\n    () => {\r\n      forceUpdate()\r\n    },\r\n    fieldName,\r\n  ])\r\n\r\n  return {\r\n    more: more,\r\n    forceUpdate,\r\n    configFormControl,\r\n    label,\r\n    defaultValues,\r\n    fieldName,\r\n    optionKey: more.optionKey,\r\n    valueControl,\r\n    fnList,\r\n    setValueControl,\r\n    updateValueControl: v => {\r\n      // console.warn(\"update value\", props)\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n      ])\r\n    },\r\n    updateValueControlWithMoreFields: (v, moreValues = {}) => {\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n        ...Object.keys(moreValues).map((f, i) => {\r\n          return {\r\n            fieldName: f,\r\n            newValue: moreValues[f],\r\n          }\r\n        }),\r\n      ])\r\n    },\r\n    getDisabled: () => {\r\n      return more.disabled === true\r\n    },\r\n    getMoreAttrs: () => {\r\n      let _moreAttrs = {}\r\n      // console.log(\"more:\", more)\r\n      if (more.autoComplete != null) {\r\n        _moreAttrs.autoComplete = String(more.autoComplete)\r\n        if (more.autoComplete === false) {\r\n          _moreAttrs.autoComplete = \"new-password\" //for chrome disabled autofill\r\n        }\r\n      }\r\n      if (more.placeholder) {\r\n        _moreAttrs.placeHolder = more.placeholder\r\n      }\r\n      if (more.disabled) {\r\n        _moreAttrs.disabled = more.disabled\r\n      }\r\n      if (more.rows) {\r\n        _moreAttrs.rows = more.rows\r\n      }\r\n      return _moreAttrs\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigFormControl\r\n"],"sourceRoot":""}