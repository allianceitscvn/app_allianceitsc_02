{"version":3,"sources":["modules/adminpanel/MyUI/Types/selectcheck_box_search.js","helpers/AText.js","modules/adminpanel/MyUI/Types/_variable.js"],"names":["WrapSelect","styled","div","MUISelectBox","props","sourceData","optionsSelected","valueSelected","onChange","hasRightPanel","configFormAddNew","onSubmitAddNew","currentListLoadingByValue","React","useState","sourceDataFilterd","setSourceDataFilterd","isAddNew","setIsAddNew","textSearch","setTextSearch","setTextSearchDone","forceUpdate","useForceUpdate","handlerSearch","useCallback","debounce","s","console","warn","length","_arrFilter","filter","v","i","_textFilter","Text_Filter","Text","AText","compareTextForSearch","searchKoDau","_listData","isSelected","option","_v","Value","indexOf","_listSelected","_listSelectedValue","map","_listSelectedMissing","push","getTextByValue","_UI_Missing","isLoadingByValue","itemOption","fnList","fnForceUpdate","fnRequestUpdate","log","onChangeItem","isCheckAll","className","type","placeholder","i18next","t","value","ev","_s","currentTarget","onClick","classnames","active","style","maxHeight","HeightScrollSelect2Box","overflow","options","wheelPropagation","selected","readOnly","checked","marginLeft","cursor","color","fontWeight","configForm","renderFooter","cForm","getCurrentValues","cbSuccess","text","opts","_textSearch","toLowerCase","_text","HText"],"mappings":"0VAaMA,EAAaC,IAAOC,IAAV,suFAyJD,SAASC,EAAaC,GACnC,IACEC,EAQED,EARFC,WACAC,EAOEF,EAPFE,gBACAC,EAMEH,EANFG,cACAC,EAKEJ,EALFI,SACAC,EAIEL,EAJFK,cACAC,EAGEN,EAHFM,iBACAC,EAEEP,EAFFO,eACAC,EACER,EADFQ,0BAEF,EAAkDC,IAAMC,SAAST,GAAjE,mBAAOU,EAAP,KAA0BC,EAA1B,KACA,EAAgCH,IAAMC,UAAS,GAA/C,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoCL,IAAMC,SAAS,IAAnD,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA4CP,IAAMC,SAAS,IAA3D,mBAAuBO,GAAvB,WACMC,EAAcC,cAEdC,EAAgBX,IAAMY,YAC1BC,oBAAS,SAAAC,GAEP,GADAC,QAAQC,KAAK,UAAWF,GACpBtB,GAAcA,EAAWyB,OAAS,EAAG,CACvC,IAAIC,EAAa1B,EAAW2B,QAAO,SAACC,EAAGC,GACrC,IAAIC,EAAcF,EAAEG,aAAeH,EAAEI,KACrC,QACEC,IAAMC,qBAAqBJ,EAAaR,EAAG,CAAEa,aAAa,OAM9DxB,EAAqBe,GACrBV,EAAkBM,MAEnB,KACH,IAEEc,EAAYpC,EACZc,GAAcA,EAAWW,OAAS,IACpCW,EAAY1B,GAGd,IAAM2B,EAAa,SAAAC,GACjB,IAAIC,EAAKD,EAAOE,MAChB,SAAItC,GAAiBA,EAAcuC,QAAQF,IAAO,IAMhDG,EAAgB,GACpB,GAAIN,IACFM,EAAgB1C,EAAW2B,QAAO,SAACC,EAAGC,GACpC,OAAOQ,EAAWT,OAIFH,OAASvB,EAAcuB,OAAQ,CAC/C,IAD+C,EAC3CkB,EAAqBD,EAAcE,KAAI,SAAChB,EAAGC,GAC7C,OAAOD,EAAEY,SAEPK,EAAuB,GAJoB,cAKjC3C,GALiC,IAK/C,2BAA6B,CAAC,IAArBoB,EAAoB,SACW,GAAlCqB,EAAmBF,QAAQnB,IAC7BuB,EAAqBC,KAAK,CACxBN,MAAOlB,EACPU,KAAMe,YAAe9C,EAAiBqB,GACtC0B,aAAa,KAV4B,8BAc3CH,EAAqBpB,OAAS,IAChCiB,EAAa,UAAOG,EAAP,YAAgCH,KAKnD,IAAMO,EAAmB,SAAAC,GAEvB,SAAI3C,IAA6BA,EAAyB,UAGtDA,GAA6B2C,GAAcA,EAAWV,OACpDjC,EAA0B2C,EAAWV,SAOvCW,EAAS,CACbC,cAAe,WACbnC,KAEFoC,gBAAiB,WACf9B,QAAQ+B,IAAI,mBAAoB/C,GAChCU,MAIEsC,EAAe,SAAC3B,GAA4B,IAAD,yDAAP,GAAf4B,EAAsB,EAAtBA,WACzB,GAAIrD,EAAU,CACZ,GAAI8C,EAAiBrB,GAEnB,YADAL,QAAQ+B,IAAI,gBAAiB1B,GAG3B4B,IACFjD,EAAyB,MAAW,GAEtCJ,EAASyB,EAAG,CACVuB,aAWN,OAPA5B,QAAQ+B,IACN,gBACAtD,EACAE,EACAH,EACAQ,GAGA,eAACZ,EAAD,CAAY8D,UAAU,iBAAtB,UACE,gCACE,sBAAKA,UAAU,WAAf,UACE,mBAAGA,UAAU,iBACb,uBACEC,KAAK,OACLC,YAAaC,IAAQC,EAAE,aACvBC,MAAOhD,EACPX,SAAU,SAAA4D,GACR,IAAIC,EAAKD,EAAGE,cAAcH,MAC1B/C,EAAciD,GACd7C,EAAc6C,SAIpB,sBAAKP,UAAU,QAAf,UACE,qBACEA,UAAU,QACVS,QAAS,WACH9B,GAAaA,EAAUX,OAAS,GAClC8B,EACEnB,EAAUQ,KAAI,SAAChB,EAAGC,GAChB,OAAOD,EAAEY,SAEX,CACEgB,YAAY,KATtB,SAeGpB,EAAUX,OAAS,GAAK,eAE1BpB,GACC,qBACEoD,UAAWU,IAAW,gBAAiB,CAAEC,OAAQxD,IACjDsD,QAAS,WACPrD,GAAY,IAHhB,wBAUHC,GAAcA,EAAWW,OAAS,GAAyB,GAApBW,EAAUX,QAChD,qBAAKgC,UAAU,oBAAf,6BAEF,wBACA,qBAAKY,MAAO,CAAEC,UAAWC,IAAwBC,SAAU,UAA3D,SACE,cAAC,IAAD,CAAkBC,QAAS,CAAEC,kBAAkB,GAA/C,SACE,qBAAKL,MAAO,CAAEC,UAAWC,KAAzB,SACGnC,GACCA,EAAUQ,KAAI,SAAChB,EAAGC,GAChB,OACE,sBAEE4B,UAAWU,IAAW,SAAU,CAC9BQ,SAAUtC,EAAWT,KAEvBsC,QAAS,WACPX,EAAa3B,EAAG,CACduB,YAPN,UAWE,qBAAKM,UAAU,aAAf,SACGR,EAAiBrB,GAChB,mBAAG6B,UAAU,0BAEb,uBACEC,KAAK,WACLkB,UAAQ,EACRC,QAASxC,EAAWT,OAI1B,8BAAMA,EAAEI,SArBHH,eA6BpBzB,IAA8B,IAAbQ,GAChB,sBAAK6C,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGf,EAAcjB,OAAS,EAAvB,UACMiB,EAAcjB,OADpB,aAEG,gBACHiB,EAAcjB,OAAS,GACtB,sBACEgC,UAAU,QACVY,MAAO,CAAES,WAAY,OAAQC,OAAQ,WACrCb,QAAS,WACPX,EAAa,GAAI,CACfJ,YALN,0BAaJ,qBAAKkB,MAAO,CAAEC,UAAW,QAASE,SAAU,UAA5C,SACE,cAAC,IAAD,UACE,qBAAKf,UAAU,YAAYY,MAAO,CAAEC,UAAW,SAA/C,SACG5B,EAAcE,KAAI,SAAChB,EAAGC,GACrB,OACE,sBAEE4B,UAAWU,IAAW,SAAU,CAC9BQ,UAAU,EACV,qBAAuC,IAAlB/C,EAAEoB,cAJ3B,UAOE,qBAAKS,UAAU,SAAf,SAAyB7B,EAAEI,OAC3B,qBAAKyB,UAAU,WAAf,SACE,cAAC,IAAD,CACEuB,MAAM,OACNd,QAAS,WACPX,EAAa3B,EAAG,CACduB,YAJN,SAQE,mBAAGM,UAAU,sBAhBZ5B,gBA2BP,IAAbjB,GACC,sBAAK6C,UAAU,wBAAf,UACE,qBAAKA,UAAU,WAAWY,MAAO,CAAEY,WAAY,QAA/C,qBAGA,qBAAKZ,MAAO,CAAEC,UAAW,QAASE,SAAU,UAA5C,SACE,cAAC,IAAD,UACE,qBAAKf,UAAU,YAAYY,MAAO,CAAEC,UAAW,SAA/C,SACE,qBAAKb,UAAU,SAAf,SACE,cAAC,IAAD,CACEyB,WAAY7E,EACZ8C,OAAQ,GACRgC,aAAc,SAAAC,GACZ,OACE,sBAAK3B,UAAU,gBAAf,UACE,cAAC,IAAD,CACES,QAAS,WACPrD,GAAY,IAFhB,mBAOA,cAAC,IAAD,CACEmE,MAAM,UACNd,QAAS,WACH5D,GACFA,EAAe8E,EAAMC,mBAAoB,CACvCC,UAAW,WACTzE,GAAY,OANtB,kCAwBnBN,GAA6BA,EAAyB,MACrD,qBAAKkD,UAAU,gBAAf,SACE,mBAAGA,UAAU,iC,iCCxdvB,WACMxB,EAAQ,CAEZC,qBAFY,WAE4C,IAAnCqD,EAAkC,uDAA3B,GAAIzE,EAAuB,uDAAV,GAAI0E,EAAM,uCACrD,GAAI1E,EAAW2B,QAAQ,MAAQ,GAAK3B,EAAW2B,QAAQ,MAAQ,EAAG,CAChE,IAAIgD,EAAc3E,EAAW4E,cACzBC,EAAQJ,EAAKG,cACjB,OAAIC,EAAMlD,QAAQgD,IAAgB,EAMpC,OAAOG,QAAM1D,qBAAqBqD,EAAMzE,EAAY0E,KAIzCvD,O,iCCjBf,kCAAO,IAAMsC,EAAyB","file":"static/js/62.1924d309.chunk.js","sourcesContent":["import React from \"react\"\r\nimport classnames from \"classnames\"\r\nimport { Button } from \"reactstrap\"\r\nimport { debounce } from \"lodash\"\r\nimport { HText } from \"@macashipo/mlib\"\r\nimport styled from \"styled-components\"\r\nimport i18next from \"i18next\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\nimport MyForm from \"src/core/components/MyForm/MyForm\"\r\nimport { HeightScrollSelect2Box } from \"./_variable\"\r\nimport useForceUpdate from \"../../hooks/useForceUpdate\"\r\nimport { getTextByValue } from \"src/core/helpers/options\"\r\nimport AText from \"src/helpers/AText\"\r\nconst WrapSelect = styled.div`\r\n  padding: 0rem 0px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  & .a-btn {\r\n    cursor: pointer;\r\n    padding: 2px 4px;\r\n    border-radius: 4px;\r\n    &:hover {\r\n      background: #033c73;\r\n      color: white;\r\n    }\r\n    &.active {\r\n      background: #033c73;\r\n      color: white;\r\n    }\r\n  }\r\n  & .a-search-no-found {\r\n    padding: 0.5rem;\r\n    text-align: center;\r\n  }\r\n  & .a-search {\r\n    position: relative;\r\n    border-bottom: 2px solid #0b4277;\r\n    & i {\r\n      position: absolute;\r\n      left: 10px;\r\n      top: 11px;\r\n    }\r\n    & input {\r\n      width: 100%;\r\n      border: 0px;\r\n      height: 35px;\r\n      padding: 0rem;\r\n      padding-left: 28px;\r\n      border-radius: 4px;\r\n      margin-bottom: 0rem;\r\n      &:focus {\r\n        outline: 0;\r\n        background: var(--color-bg-focus);\r\n      }\r\n    }\r\n  }\r\n  & .a-bar {\r\n    height: 30px;\r\n    border-bottom: 1px solid #bcc3cd;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0px 0.5rem;\r\n    background: #f9fafb;\r\n    & .a-right {\r\n      margin-left: auto;\r\n    }\r\n  }\r\n  & .option {\r\n    color: #575757;\r\n    min-height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0.5rem;\r\n    padding-left: 0.5rem;\r\n    cursor: pointer;\r\n    border-bottom: 1px solid #e9ecef;\r\n    & .a-checkbox {\r\n      margin-right: 0.5rem;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n  }\r\n  & .option:last-child {\r\n    border-bottom: 0px;\r\n  }\r\n  & .option:hover {\r\n    color: #546c84;\r\n    background-color: #fbfbfb;\r\n  }\r\n  & .option.selected {\r\n    background: #f7fbff;\r\n  }\r\n  & .option.a-missinginsource {\r\n    color: #c7c7c7;\r\n  }\r\n  & .a-rightpanel {\r\n    width: 180px;\r\n    border-left: 1px solid #bcc3cd;\r\n    & .a-header {\r\n      height: 37px;\r\n      border-bottom: 2px solid #225383;\r\n      display: flex;\r\n      padding: 0.5rem;\r\n      align-items: center;\r\n    }\r\n    & .a-content {\r\n      & .a-remove {\r\n        margin-left: auto;\r\n      }\r\n      & .option {\r\n        background: transparent;\r\n        border-bottom: 0px;\r\n        padding: 0.25rem 0.5rem;\r\n        & .a-text {\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n        }\r\n        & .a-remove button {\r\n          padding: 0px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  & .a-addnew {\r\n    & .a-content {\r\n      padding: 0.5rem;\r\n      & .a-form-footer {\r\n        margin-top: 0.5rem;\r\n        & button {\r\n          padding: 5px;\r\n          margin: 2px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  & .a-loading-all {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: #ffffff75;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 20px;\r\n  }\r\n`\r\n\r\n// const TestConfigForm = {\r\n//   defaultValues: {\r\n//     fName: \"Test fName\",\r\n//   },\r\n//   controls: [\r\n//     {\r\n//       label: \"Name\",\r\n//       fieldName: \"fName\",\r\n//       type: \"text\",\r\n//       more: {\r\n//         relativeTo: [\"fName2\"],\r\n//       },\r\n//     },\r\n//   ],\r\n// }\r\nexport default function MUISelectBox(props) {\r\n  const {\r\n    sourceData,\r\n    optionsSelected,\r\n    valueSelected,\r\n    onChange,\r\n    hasRightPanel,\r\n    configFormAddNew,\r\n    onSubmitAddNew,\r\n    currentListLoadingByValue,\r\n  } = props\r\n  const [sourceDataFilterd, setSourceDataFilterd] = React.useState(sourceData)\r\n  const [isAddNew, setIsAddNew] = React.useState(false)\r\n  const [textSearch, setTextSearch] = React.useState(\"\")\r\n  const [textSearchDone, setTextSearchDone] = React.useState(\"\")\r\n  const forceUpdate = useForceUpdate()\r\n  // console.warn(\"MUISelectBox:\", sourceData, valueSelected)\r\n  const handlerSearch = React.useCallback(\r\n    debounce(s => {\r\n      console.warn(\"search:\", s)\r\n      if (sourceData && sourceData.length > 0) {\r\n        let _arrFilter = sourceData.filter((v, i) => {\r\n          let _textFilter = v.Text_Filter || v.Text\r\n          if (\r\n            AText.compareTextForSearch(_textFilter, s, { searchKoDau: true })\r\n          ) {\r\n            return true\r\n          }\r\n          return false\r\n        })\r\n        setSourceDataFilterd(_arrFilter)\r\n        setTextSearchDone(s)\r\n      }\r\n    }, 300),\r\n    []\r\n  )\r\n  let _listData = sourceData\r\n  if (textSearch && textSearch.length > 0) {\r\n    _listData = sourceDataFilterd\r\n  }\r\n\r\n  const isSelected = option => {\r\n    let _v = option.Value\r\n    if (valueSelected && valueSelected.indexOf(_v) > -1) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  let _listSelected = []\r\n  if (_listData) {\r\n    _listSelected = sourceData.filter((v, i) => {\r\n      return isSelected(v)\r\n    })\r\n    //nhung item ko co trong sourceData se bi miss\r\n    // console.warn(\"List:\", _listSelected, valueSelected)\r\n    if (_listSelected.length < valueSelected.length) {\r\n      let _listSelectedValue = _listSelected.map((v, i) => {\r\n        return v.Value\r\n      })\r\n      let _listSelectedMissing = []\r\n      for (let s of valueSelected) {\r\n        if (_listSelectedValue.indexOf(s) == -1) {\r\n          _listSelectedMissing.push({\r\n            Value: s,\r\n            Text: getTextByValue(optionsSelected, s),\r\n            _UI_Missing: true,\r\n          })\r\n        }\r\n      }\r\n      if (_listSelectedMissing.length > 0) {\r\n        _listSelected = [..._listSelectedMissing, ..._listSelected]\r\n      }\r\n    }\r\n  }\r\n\r\n  const isLoadingByValue = itemOption => {\r\n    // console.log(\"isLoadingByValue:\", currentListLoadingByValue, itemOption)\r\n    if (currentListLoadingByValue && currentListLoadingByValue[\"_all\"]) {\r\n      return true\r\n    }\r\n    if (currentListLoadingByValue && itemOption && itemOption.Value) {\r\n      if (currentListLoadingByValue[itemOption.Value]) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  const fnList = {\r\n    fnForceUpdate: () => {\r\n      forceUpdate()\r\n    },\r\n    fnRequestUpdate: () => {\r\n      console.log(\"fnRequestUpdate:\", currentListLoadingByValue)\r\n      forceUpdate()\r\n    },\r\n  }\r\n\r\n  const onChangeItem = (v, { isCheckAll } = {}) => {\r\n    if (onChange) {\r\n      if (isLoadingByValue(v)) {\r\n        console.log(\"requesting...\", v)\r\n        return\r\n      }\r\n      if (isCheckAll) {\r\n        currentListLoadingByValue[\"_all\"] = true\r\n      }\r\n      onChange(v, {\r\n        fnList,\r\n      })\r\n    }\r\n  }\r\n  console.log(\r\n    \"MUISelectBox:\",\r\n    sourceData,\r\n    valueSelected,\r\n    props,\r\n    currentListLoadingByValue\r\n  )\r\n  return (\r\n    <WrapSelect className=\"mui-select_box\">\r\n      <div>\r\n        <div className=\"a-search\">\r\n          <i className=\"fa fa-search\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder={i18next.t(\"Search...\")}\r\n            value={textSearch}\r\n            onChange={ev => {\r\n              let _s = ev.currentTarget.value\r\n              setTextSearch(_s)\r\n              handlerSearch(_s)\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"a-bar\">\r\n          <div\r\n            className=\"a-btn\"\r\n            onClick={() => {\r\n              if (_listData && _listData.length > 0) {\r\n                onChangeItem(\r\n                  _listData.map((v, i) => {\r\n                    return v.Value\r\n                  }),\r\n                  {\r\n                    isCheckAll: true,\r\n                  }\r\n                )\r\n              }\r\n            }}\r\n          >\r\n            {_listData.length > 0 && \"Select all\"}\r\n          </div>\r\n          {configFormAddNew && (\r\n            <div\r\n              className={classnames(\"a-btn a-right\", { active: isAddNew })}\r\n              onClick={() => {\r\n                setIsAddNew(true)\r\n              }}\r\n            >\r\n              Add new\r\n            </div>\r\n          )}\r\n        </div>\r\n        {textSearch && textSearch.length > 0 && _listData.length == 0 && (\r\n          <div className=\"a-search-no-found\">No search found</div>\r\n        )}\r\n        <div></div>\r\n        <div style={{ maxHeight: HeightScrollSelect2Box, overflow: \"hidden\" }}>\r\n          <PerfectScrollbar options={{ wheelPropagation: false }}>\r\n            <div style={{ maxHeight: HeightScrollSelect2Box }}>\r\n              {_listData &&\r\n                _listData.map((v, i) => {\r\n                  return (\r\n                    <div\r\n                      key={i}\r\n                      className={classnames(\"option\", {\r\n                        selected: isSelected(v),\r\n                      })}\r\n                      onClick={() => {\r\n                        onChangeItem(v, {\r\n                          fnList,\r\n                        })\r\n                      }}\r\n                    >\r\n                      <div className=\"a-checkbox\">\r\n                        {isLoadingByValue(v) ? (\r\n                          <i className=\"fa fa-spin fa-spinner\" />\r\n                        ) : (\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            readOnly\r\n                            checked={isSelected(v)}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                      <div>{v.Text}</div>\r\n                    </div>\r\n                  )\r\n                })}\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </div>\r\n      {hasRightPanel && isAddNew !== true && (\r\n        <div className=\"a-rightpanel\">\r\n          <div className=\"a-header\">\r\n            {_listSelected.length > 0\r\n              ? `${_listSelected.length} selected`\r\n              : \"None selected\"}\r\n            {_listSelected.length > 0 && (\r\n              <span\r\n                className=\"a-btn\"\r\n                style={{ marginLeft: \"auto\", cursor: \"pointer\" }}\r\n                onClick={() => {\r\n                  onChangeItem([], {\r\n                    fnList,\r\n                  })\r\n                }}\r\n              >\r\n                Clear all\r\n              </span>\r\n            )}\r\n          </div>\r\n          <div style={{ maxHeight: \"330px\", overflow: \"hidden\" }}>\r\n            <PerfectScrollbar>\r\n              <div className=\"a-content\" style={{ maxHeight: \"330px\" }}>\r\n                {_listSelected.map((v, i) => {\r\n                  return (\r\n                    <div\r\n                      key={i}\r\n                      className={classnames(\"option\", {\r\n                        selected: true,\r\n                        \"a-missinginsource\": v._UI_Missing === true,\r\n                      })}\r\n                    >\r\n                      <div className=\"a-text\">{v.Text}</div>\r\n                      <div className=\"a-remove\">\r\n                        <Button\r\n                          color=\"link\"\r\n                          onClick={() => {\r\n                            onChangeItem(v, {\r\n                              fnList,\r\n                            })\r\n                          }}\r\n                        >\r\n                          <i className=\"fa fa-times\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </PerfectScrollbar>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isAddNew === true && (\r\n        <div className=\"a-rightpanel a-addnew\">\r\n          <div className=\"a-header\" style={{ fontWeight: \"bold\" }}>\r\n            Add new\r\n          </div>\r\n          <div style={{ maxHeight: \"330px\", overflow: \"hidden\" }}>\r\n            <PerfectScrollbar>\r\n              <div className=\"a-content\" style={{ maxHeight: \"330px\" }}>\r\n                <div className=\"a-form\">\r\n                  <MyForm\r\n                    configForm={configFormAddNew}\r\n                    fnList={{}}\r\n                    renderFooter={cForm => {\r\n                      return (\r\n                        <div className=\"a-form-footer\">\r\n                          <Button\r\n                            onClick={() => {\r\n                              setIsAddNew(false)\r\n                            }}\r\n                          >\r\n                            Close\r\n                          </Button>\r\n                          <Button\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              if (onSubmitAddNew) {\r\n                                onSubmitAddNew(cForm.getCurrentValues(), {\r\n                                  cbSuccess: () => {\r\n                                    setIsAddNew(false)\r\n                                  },\r\n                                })\r\n                              }\r\n                            }}\r\n                          >\r\n                            Add\r\n                          </Button>\r\n                        </div>\r\n                      )\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </PerfectScrollbar>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {currentListLoadingByValue && currentListLoadingByValue[\"_all\"] && (\r\n        <div className=\"a-loading-all\">\r\n          <i className=\"fa fa-spin fa-spinner\" />\r\n        </div>\r\n      )}\r\n    </WrapSelect>\r\n  )\r\n}\r\n","import { HText } from \"@macashipo/mlib\"\r\nconst AText = {\r\n  //bo sung compareTextForSearch, truong hop search ki tu []\r\n  compareTextForSearch(text = \"\", textSearch = \"\", opts) {\r\n    if (textSearch.indexOf(\"[\") > -1 || textSearch.indexOf(\"]\") > -1) {\r\n      let _textSearch = textSearch.toLowerCase()\r\n      let _text = text.toLowerCase()\r\n      if (_text.indexOf(_textSearch) > -1) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n    return HText.compareTextForSearch(text, textSearch, opts)\r\n  },\r\n}\r\n\r\nexport default AText\r\n","export const HeightScrollSelect2Box = \"315px\"\r\n"],"sourceRoot":""}