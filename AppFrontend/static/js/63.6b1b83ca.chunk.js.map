{"version":3,"sources":["modules/adminpanel/MyButton/Types/add_new.js","helpers/Flows/Button.js","modules/adminpanel/MyButton/Types/ext.tsx"],"names":["MyButtonAddNew","_requestAddNew","props","oneButton","fnList","changeIsLoading","HUtils","runFuntion","requestData","_configButton","RequestData","cbSuccess","cbError","this","getMorePropsButton","onClick","console","warn","i18next","t","MyButtonExt","KMoreOfButton","apiCheckShowModal","acceptType","apiUrlAfter","title","tooltip","FlowCheckShowModal","customQuery","cb","_configCheckShow","_moreObj","_request","method","url","path","name","ApiGeneric","request","data","getApiQuery","fnListMyPage","fnGetSharedRequestData","successCallBack","response","_config","get","IsShow","result","FormData","errorCallBack","error","parseResponseWhenSuccess","res","NeedReload","fnReloadPage","NeedReloadList","fnReloadList","_moreProps","checkConfirmMsg","ConfirmMsg","fnListUI","fnshowConfirm","msg","onClickOK","state","setFromComponent","getTitleDisplay","React","Component"],"mappings":"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","file":"static/js/63.6b1b83ca.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport MyButtonExt from \"./ext\"\r\nimport i18next from \"i18next\"\r\nclass MyButtonAddNew extends MyButtonExt {\r\n  componentDidMount() {}\r\n  _requestAddNew = () => {\r\n    const { oneButton, fnList } = this.props\r\n    oneButton.changeIsLoading(true)\r\n    HUtils.runFuntion(fnList, \"fnRequestAddNew\", [\r\n      {\r\n        // requestData: oneButton.getApiQuery({}),//se bao gom query filter v.v.. lay tu onePage\r\n        requestData: oneButton._configButton.RequestData || {}, //chi lay tu requestData\r\n        cbSuccess: () => {\r\n          HUtils.runFuntion(fnList, \"fnReloadList\", [])\r\n          oneButton.changeIsLoading(false)\r\n        },\r\n        cbError: () => {\r\n          oneButton.changeIsLoading(false)\r\n        },\r\n      },\r\n    ])\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    // console.warn(\"render Button link\", this.props)\r\n    return (\r\n      <Button\r\n        {...this.getMorePropsButton()}\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          console.warn(\"addnew\", this.props)\r\n          this._requestAddNew()\r\n        }}\r\n      >\r\n        {i18next.t(\"btn.Add New\")}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonAddNew\r\n","import { ApiGeneric } from \"src/services/apiServices\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nexport const KMoreOfButton = {\r\n  apiCheckShowModal: \"apiCheckShowModal\",\r\n  acceptType: \"acceptType\", //upload\r\n  apiUrlAfter: \"apiUrlAfter\", //upload\r\n  title: \"title\", //show title cua button\r\n  tooltip: \"tooltip\", //show tooltip cua button, chua su dung\r\n}\r\n\r\nexport const FlowCheckShowModal = ({\r\n  oneButton,\r\n  fnList,\r\n  customQuery,\r\n  cb,\r\n} = {}) => {\r\n  if (oneButton) {\r\n    let _configCheckShow = oneButton._moreObj[KMoreOfButton.apiCheckShowModal]\r\n    if (_configCheckShow) {\r\n      oneButton.changeIsLoading(true)\r\n      let _request = {\r\n        method: \"POST\",\r\n        url: _configCheckShow.url,\r\n        path: _configCheckShow.path,\r\n        name: _configCheckShow.name,\r\n      }\r\n      ApiGeneric({\r\n        request: _request,\r\n        data: oneButton.getApiQuery({\r\n          ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n          ...customQuery,\r\n        }),\r\n        successCallBack: response => {\r\n          console.warn(\"response\", response)\r\n          let _config = HUtils.get(response, \"Data.Config\")\r\n          if (_config && _config.IsShow) {\r\n            if (cb) {\r\n              cb({\r\n                result: true,\r\n                data: _config.FormData || {},\r\n              })\r\n            }\r\n          } else {\r\n            if (cb) {\r\n              cb({\r\n                result: false,\r\n              })\r\n            }\r\n          }\r\n          oneButton.changeIsLoading(false)\r\n        },\r\n        errorCallBack: (error, response) => {\r\n          oneButton.changeIsLoading(false)\r\n          if (cb) {\r\n            cb({\r\n              result: false,\r\n            })\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb({\r\n          result: true,\r\n        })\r\n      }\r\n    }\r\n  } else {\r\n    if (cb) {\r\n      cb({\r\n        result: true,\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { OneButton } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { KMoreOfButton } from \"src/helpers/Flows/Button\"\r\nimport { fnListMyPage, fnListUI } from \"src/helpers/fnList\"\r\ninterface IProps {\r\n  oneButton: OneButton\r\n  fnList?: any\r\n}\r\nclass MyButtonExt extends React.Component<IProps> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    const { oneButton } = this.props\r\n    oneButton.setFromComponent(this)\r\n  }\r\n  componentDidMount() {}\r\n  onClick = () => {}\r\n  parseResponseWhenSuccess = (res: any) => {\r\n    const { oneButton, fnList } = this.props\r\n    if (oneButton._configButton.NeedReload) {\r\n      fnListMyPage.fnReloadPage(fnList)\r\n    } else if (oneButton._configButton.NeedReloadList) {\r\n      fnListMyPage.fnReloadList(fnList)\r\n    }\r\n  }\r\n  getMorePropsButton = () => {\r\n    const { oneButton } = this.props\r\n    let _moreProps: any = {}\r\n    if (oneButton && oneButton._moreObj) {\r\n      if (oneButton._moreObj[KMoreOfButton.title]) {\r\n        _moreProps.title = oneButton._moreObj[KMoreOfButton.title]\r\n      }\r\n    }\r\n    return _moreProps\r\n  }\r\n  checkConfirmMsg = cb => {\r\n    const { oneButton } = this.props\r\n    //test\r\n    // oneButton._configButton.ConfirmMsg = \"Hello\"\r\n    if (oneButton && oneButton._configButton.ConfirmMsg) {\r\n      fnListUI.fnshowConfirm({\r\n        title: \"Confirm\",\r\n        msg: oneButton._configButton.ConfirmMsg,\r\n        onClickOK: () => {\r\n          if (cb) {\r\n            cb()\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb()\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    return (\r\n      <Button\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          this.onClick()\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonExt\r\n"],"sourceRoot":""}