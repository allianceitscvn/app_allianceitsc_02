{"version":3,"sources":["helpers/Tools/GGChat.js","modules/qlproject/MyUI/prj_new_release.js"],"names":["GGChat","sendWebHook","webhook","msg","startsWith","axios","post","text","console","warn","MUIPJNewRelease","props","requestNotify","state","log","this","_projectInfo","HUtils","runFuntion","fnList","WrapLayout","configForm","defaultValues","release_date","Date","getTime","pushnotify","more","controls","label","fieldName","type","optionKey","getSourceList","enviroments","map","v","i","Text","Value","platforms","renderFooter","cForm","className","Button","onClick","color","_values","getCurrentValues","_needPushNotify","enviroment","platform","_key","key","value","isUpdateValue","cbSuccess","_keyOfBundle","row","_data","HJson","getObj","Array","isArray","unshift","getString","Component","styled","div"],"mappings":"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","file":"static/js/242.ce07de82.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst GGChat = {\r\n  sendWebHook: (webhook, msg) => {\r\n    if (msg && webhook && webhook.startsWith(\"https://chat.googleapis.com\")) {\r\n      axios.post(webhook, {\r\n        text: msg,\r\n      })\r\n    } else {\r\n      console.warn(\"Cannot send gg chat!\", webhook, msg)\r\n    }\r\n  },\r\n}\r\nexport default GGChat\r\n","import { Component } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { ApiGeneric } from \"src/services/apiServices\"\r\nimport { HJson, HUtils } from \"@macashipo/mlib\"\r\nimport { MyForm } from \"src/core/components\"\r\nimport { Button } from \"reactstrap\"\r\nimport GGChat from \"src/helpers/Tools/GGChat\"\r\n\r\nclass MUIPJNewRelease extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n  componentDidMount() {}\r\n  requestNotify = (data = {}) => {\r\n    GGChat.sendWebHook(\r\n      \"https://chat.googleapis.com/v1/spaces/AAAANzIFHu0/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=NpKK5pi-PbIlT8eq4uJU7sRNabhRvpixW47XRf4vGcc\",\r\n      \"\"\r\n    )\r\n  }\r\n  render() {\r\n    console.log(this.props)\r\n    let _projectInfo = HUtils.runFuntion(\r\n      this.props.fnList,\r\n      \"getCurrentProjectInfo\"\r\n    )\r\n    return (\r\n      <WrapLayout>\r\n        <MyForm\r\n          configForm={{\r\n            defaultValues: {\r\n              release_date: new Date().getTime(),\r\n              pushnotify: true,\r\n            },\r\n            more: {},\r\n            controls: [\r\n              {\r\n                label: \"Enviroment\",\r\n                fieldName: \"enviroment\",\r\n                type: \"select_tag\",\r\n                more: {\r\n                  optionKey: \"enviroments\",\r\n                },\r\n              },\r\n              {\r\n                label: \"Platform\",\r\n                fieldName: \"platform\",\r\n                type: \"select_tag\",\r\n                more: {\r\n                  optionKey: \"platforms\",\r\n                },\r\n              },\r\n              {\r\n                label: \"Version\",\r\n                fieldName: \"version\",\r\n                type: \"text\",\r\n              },\r\n              {\r\n                label: \"Date release\",\r\n                fieldName: \"release_date\",\r\n                type: \"date\",\r\n              },\r\n              {\r\n                label: \"Link\",\r\n                fieldName: \"link\",\r\n                type: \"text\",\r\n              },\r\n              {\r\n                label: \"Changelog\",\r\n                fieldName: \"changelog\",\r\n                type: \"textarea\",\r\n              },\r\n              {\r\n                label: \"Push Notify\",\r\n                fieldName: \"pushnotify\",\r\n                type: \"checkbox\",\r\n              },\r\n            ],\r\n          }}\r\n          fnList={{\r\n            getSourceList: () => {\r\n              return {\r\n                enviroments:\r\n                  _projectInfo.enviroments.map((v, i) => {\r\n                    return {\r\n                      Text: v,\r\n                      Value: v,\r\n                    }\r\n                  }) || [],\r\n                platforms:\r\n                  _projectInfo.platforms.map((v, i) => {\r\n                    return {\r\n                      Text: v,\r\n                      Value: v,\r\n                    }\r\n                  }) || [],\r\n              }\r\n            },\r\n          }}\r\n          renderFooter={cForm => {\r\n            return (\r\n              <div className=\"a-form-footer\">\r\n                <Button\r\n                  onClick={() => {\r\n                    console.log(this.props)\r\n                    HUtils.runFuntion(this.props.fnList, \"hideModal\")\r\n                  }}\r\n                >\r\n                  Close\r\n                </Button>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    let _values = cForm.getCurrentValues()\r\n                    console.log(\"OK\", _values)\r\n                    let _needPushNotify = false\r\n                    if (\r\n                      _values.enviroment &&\r\n                      _values.platform &&\r\n                      _values.release_date\r\n                    ) {\r\n                      if (_values.pushnotify) {\r\n                        _needPushNotify = true\r\n                      }\r\n                      let _key = `${_values.enviroment}_${_values.platform}_release_${_values.release_date}`\r\n                      HUtils.runFuntion(\r\n                        this.props.fnList,\r\n                        \"onUpdateProjectExtra\",\r\n                        [\r\n                          {\r\n                            key: _key,\r\n                            value: _values,\r\n                            isUpdateValue: true,\r\n                            cbSuccess: () => {\r\n                              console.log(\"Add success\")\r\n                              let _keyOfBundle = `${_values.enviroment}_${_values.platform}_releases`\r\n                              HUtils.runFuntion(\r\n                                this.props.fnList,\r\n                                \"getCurrentProjectExtra\",\r\n                                [\r\n                                  _keyOfBundle,\r\n                                  row => {\r\n                                    let _data = []\r\n                                    if (row && row.Value) {\r\n                                      _data = HJson.getObj(row.Value) || []\r\n                                    }\r\n                                    if (Array.isArray(_data) == false) {\r\n                                      _data = []\r\n                                    }\r\n                                    //bo sung vao dau danh sach\r\n                                    _data.unshift(_values.release_date)\r\n                                    console.log(\"add\")\r\n                                    HUtils.runFuntion(\r\n                                      this.props.fnList,\r\n                                      \"onUpdateProjectExtra\",\r\n                                      [\r\n                                        {\r\n                                          key: `${_values.enviroment}_${_values.platform}_releases`,\r\n                                          value: HJson.getString(_data),\r\n                                          isUpdateValue: true,\r\n                                          cbSuccess: () => {\r\n                                            console.log(\"Add success\")\r\n                                            if (_needPushNotify) {\r\n                                              this.requestNotify(_values)\r\n                                            }\r\n                                          },\r\n                                        },\r\n                                      ]\r\n                                    )\r\n                                  },\r\n                                ]\r\n                              )\r\n                            },\r\n                          },\r\n                        ]\r\n                      )\r\n                    }\r\n                  }}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </div>\r\n            )\r\n          }}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            this.requestNotify()\r\n          }}\r\n        >\r\n          Test\r\n        </button>\r\n      </WrapLayout>\r\n    )\r\n  }\r\n}\r\n\r\nconst WrapLayout = styled.div`\r\n  & form > .a-form-footer {\r\n    margin-top: 0.5rem;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    & button {\r\n      padding: 5px;\r\n      margin: 2px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default MUIPJNewRelease\r\n"],"sourceRoot":""}