{"version":3,"sources":["modules/adminpanel/MyPage/Types/admin_table_client.js"],"names":["AdminTable","props","cfp","useConfigPage","configPage","needOptions","needList","onePage","React","useEffect","console","warn","_options","_list","fnList","getClientOptions","getClientList","applyClientData","showLoading","renderLoading","errorMsg","renderError","info","_myUITypeHeader","_myUITypeFilter","fnListMyPage","fnGetIsInTableExpand","errorOption","Object","keys","type","className","_oneScreenConfig","_header","show","_msgShowInUI","color"],"mappings":"gPAMe,SAASA,EAAWC,GACjC,IAAMC,EAAMC,YAAcF,EAAMG,WAAY,CAC1CH,QACAI,aAAa,EACbC,UAAU,IAEIJ,EAAIK,QAapB,GAZAC,IAAMC,WAAU,WACdC,QAAQC,KAAK,eAAgBV,GAC7B,IAAIW,EAAW,KACXC,EAAQ,KACRZ,EAAMa,QAAUb,EAAMa,OAAOC,mBAC/BH,EAAWX,EAAMa,OAAOC,oBAEtBd,EAAMa,QAAUb,EAAMa,OAAOE,gBAC/BH,EAAQZ,EAAMa,OAAOE,iBAEvBd,EAAIe,gBAAgBL,EAAUC,KAC7B,IACCX,EAAIgB,YACN,OAAOhB,EAAIiB,gBAEb,GAAIjB,EAAIkB,SACN,OAAOlB,EAAImB,YAAYnB,EAAIkB,UAE7BV,QAAQY,KAAK,qBAAsBpB,GACnC,IAAIqB,EAAkB,oBAClBC,EAAkB,oBAMtB,IALsD,IAAlDC,IAAaC,qBAAqBxB,EAAIY,UACxCS,EAAkB,yBAClBC,EAAkB,4BAGhBtB,EAAIK,QAAJ,mBAAmC,CACrC,IAAMoB,EAAczB,EAAIK,QAAJ,mBAEpB,OADAG,QAAQC,KAAK,SAAUgB,EAAaC,OAAOC,KAAKF,IACzC,cAAC,OAAD,CAAMG,KAAK,iBAGpB,OACE,sBAAKC,UAAU,iBAAf,WACiD,IAA9C7B,EAAIK,QAAQyB,iBAAiBC,QAAQC,MACpC,cAAC,OAAD,2BAAUjC,GAAV,IAAiB6B,KAAMP,EAAiBrB,IAAKA,KAE/C,cAAC,OAAD,2BAAUD,GAAV,IAAiB6B,KAAMN,EAAiBtB,IAAKA,KAC5CA,EAAIK,QAAQ4B,cACX,cAAC,IAAD,CAAOC,MAAM,UAAb,SAAwBlC,EAAIK,QAAQ4B,eAGtC,cAAC,OAAD,2BAAUlC,GAAV,IAAiB6B,KAAK,mBAAmB5B,IAAKA,U","file":"static/js/97.e6a73648.chunk.js","sourcesContent":["import { HUtils, MyUI } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Alert } from \"reactstrap\"\r\nimport useConfigPage from \"../../hooks/useConfigPage\"\r\nimport \"./Styles/admin_table.css\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nexport default function AdminTable(props) {\r\n  const cfp = useConfigPage(props.configPage, {\r\n    props,\r\n    needOptions: false,\r\n    needList: false,\r\n  })\r\n  const onePage = cfp.onePage\r\n  React.useEffect(() => {\r\n    console.warn(\"render first\", props)\r\n    let _options = null\r\n    let _list = null\r\n    if (props.fnList && props.fnList.getClientOptions) {\r\n      _options = props.fnList.getClientOptions()\r\n    }\r\n    if (props.fnList && props.fnList.getClientList) {\r\n      _list = props.fnList.getClientList()\r\n    }\r\n    cfp.applyClientData(_options, _list)\r\n  }, [])\r\n  if (cfp.showLoading) {\r\n    return cfp.renderLoading()\r\n  }\r\n  if (cfp.errorMsg) {\r\n    return cfp.renderError(cfp.errorMsg)\r\n  }\r\n  console.info(\"render Page table:\", cfp)\r\n  let _myUITypeHeader = \"admintable_header\"\r\n  let _myUITypeFilter = \"admintable_filter\"\r\n  if (fnListMyPage.fnGetIsInTableExpand(cfp.fnList) === true) {\r\n    _myUITypeHeader = \"admintable_header_mini\"\r\n    _myUITypeFilter = \"admintable_filter_detail\"\r\n  }\r\n\r\n  if (cfp.onePage[\"UI_LoadOptionError\"]) {\r\n    const errorOption = cfp.onePage[\"UI_LoadOptionError\"]\r\n    console.warn(\"error:\", errorOption, Object.keys(errorOption))\r\n    return <MyUI type=\"msgbox_error\" />\r\n  }\r\n\r\n  return (\r\n    <div className=\"mp-admin_table\">\r\n      {cfp.onePage._oneScreenConfig._header.show !== false && (\r\n        <MyUI {...props} type={_myUITypeHeader} cfp={cfp} />\r\n      )}\r\n      <MyUI {...props} type={_myUITypeFilter} cfp={cfp} />\r\n      {cfp.onePage._msgShowInUI && (\r\n        <Alert color=\"warning\">{cfp.onePage._msgShowInUI}</Alert>\r\n      )}\r\n\r\n      <MyUI {...props} type=\"admintable_table\" cfp={cfp} />\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}