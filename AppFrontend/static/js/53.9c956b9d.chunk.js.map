{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/checkbox_disabled.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","modules/adminpanel/MyTableCell/Types/checkbox.js"],"names":["MTCCheckboxDisabled","props","custom","className","more","cbNormal","color","iconChar","cbPositive","colorDisabled","configNegative","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","type","onSendMsg","msg","console","error","onReExpand","HUtils","runFuntion","ctc","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","useConfigTableCell","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","moreObj","updateFieldData","v","opts","warn","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","style","Object","keys","renderHide","classNameWrap","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist","WrapCell","styled","div","WrapCheckbox","fnGetConfigState","moreProps","kField","fColor","fColorDisabled","MTCCheckbox","fnListMyTableCell","fnGetIsHide","_morePropsWrapCheckbox","fnGetMorePropsWrapCheckbox","onClick","FlowGetTitleTooltipOfColumn","checked","onChange"],"mappings":"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","file":"static/js/53.9c956b9d.chunk.js","sourcesContent":["import React from \"react\"\r\nimport MTCCheckbox from \"./checkbox\"\r\n\r\nexport default function MTCCheckboxDisabled(props) {\r\n  return (\r\n    <MTCCheckbox\r\n      {...props}\r\n      custom={{\r\n        className: \"mtc-checkbox_disabled\",\r\n        more: {\r\n          cbNormal: {\r\n            color: \"#efefef\",\r\n            iconChar: \"\\f05e\",\r\n          },\r\n          cbPositive: {\r\n            color: \"#c71c22\",\r\n            colorDisabled: \"#bf2f34\",\r\n            iconChar: \"\\f05e\",\r\n          },\r\n          configNegative: {\r\n            color: \"#efefef\",\r\n            iconChar: \"\\f05e\",\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","import React from \"react\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport V from \"src/helpers/V\"\r\nimport { MyLoading } from \"@macashipo/mlib\"\r\nimport styled from \"styled-components\"\r\nimport { KMore, FlowGetTitleTooltipOfColumn } from \"src/helpers/Flows/TableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\n\r\nconst WrapCell = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  &.disabled > div > div {\r\n    cursor: auto;\r\n  }\r\n`\r\nconst WrapCheckbox = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  display: block;\r\n  & > div {\r\n    min-height: 20px;\r\n    margin-bottom: 0;\r\n    font-weight: normal;\r\n    cursor: pointer;\r\n  }\r\n  & input[type=\"checkbox\"] {\r\n    display: none;\r\n    position: absolute;\r\n    margin-left: -20px;\r\n  }\r\n  & input[type=\"checkbox\"] + i:before {\r\n    content: \"${props =>\r\n      props.cbNormal && props.cbNormal.iconChar\r\n        ? props.cbNormal.iconChar\r\n        : \"\\f096\"}\";\r\n    position: relative;\r\n    color: ${props =>\r\n      props.cbNormal && props.cbNormal.color ? props.cbNormal.color : \"#999\"};\r\n  }\r\n  &:hover input[type=\"checkbox\"] + i:before {\r\n    color: ${props =>\r\n      props.cbPositive && props.cbPositive.color\r\n        ? props.cbPositive.color\r\n        : \"#3db73d\"};\r\n  }\r\n  & input[type=\"checkbox\"]:checked + i:before {\r\n    content: \"${props =>\r\n      props.cbPositive && props.cbPositive.iconChar\r\n        ? props.cbPositive.iconChar\r\n        : \"\\f046\"}\";\r\n    color: ${props =>\r\n      props.cbPositive && props.cbPositive.color\r\n        ? props.cbPositive.color\r\n        : \"#3db73d\"};\r\n  }\r\n  & input[type=\"checkbox\"]:disabled + i:before {\r\n    color: ${props =>\r\n      props.cbNormal && props.cbNormal.colorDisabled\r\n        ? props.cbNormal.colorDisabled\r\n        : \"#ddd\"};\r\n  }\r\n  & input[type=\"checkbox\"]:disabled:checked + i:before {\r\n    color: ${props =>\r\n      props.cbPositive && props.cbPositive.colorDisabled\r\n        ? props.cbPositive.colorDisabled\r\n        : \"#228322\"};\r\n  }\r\n`\r\nconst fnGetConfigState = (row, moreProps, more, kField) => {\r\n  if (more && more[kField]) {\r\n    moreProps[kField] = more[kField]\r\n    //color, iconChar, fColor, colorDisabled\r\n    if (more[kField].fColor && row[more[kField].fColor]) {\r\n      moreProps[kField].color = row[more[kField].fColor]\r\n    }\r\n    if (more[kField].fColorDisabled && row[more[kField].fColorDisabled]) {\r\n      moreProps[kField].colorDisabled = row[more[kField].fColorDisabled]\r\n    }\r\n  }\r\n}\r\nconst fnGetMorePropsWrapCheckbox = (row, more) => {\r\n  let _moreProps = {}\r\n  fnGetConfigState(row, _moreProps, more, KMore.cbNormal)\r\n  fnGetConfigState(row, _moreProps, more, KMore.cbPositive)\r\n  // console.log(\"_moreProps:\", _moreProps)\r\n  return _moreProps\r\n}\r\nexport default function MTCCheckbox(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const { more, row } = ctc\r\n  if (fnListMyTableCell.fnGetIsHide(ctc.fnList)) {\r\n    return ctc.renderHide()\r\n  }\r\n  let _morePropsWrapCheckbox = fnGetMorePropsWrapCheckbox(row, more)\r\n  // console.warn(\"render MTCCheckbox:\", props, row, more, _morePropsWrapCheckbox)\r\n  return (\r\n    <WrapCell\r\n      className={ctc.classNameWrap(\"mtc-checkbox\")}\r\n      style={ctc.styleWrap()}\r\n    >\r\n      <WrapCheckbox\r\n        onClick={() => {\r\n          console.warn(\"onClick:\")\r\n          if (ctc.canEdit) {\r\n            ctc.updateFieldData(ctc.valueCell === true ? false : true)\r\n          }\r\n        }}\r\n        // title={V.TableCell_GetTitleOfColumn(ctc)}//chuyen sang Flow\r\n        title={FlowGetTitleTooltipOfColumn({ ...ctc })}\r\n        {..._morePropsWrapCheckbox}\r\n        // configNormal={{\r\n        //   color: \"#ccc\",\r\n        //   iconChar: \"\\f071\",\r\n        // }}\r\n        // configPositive={{\r\n        //   color: \"red\",\r\n        //   colorDisabled: \"\",\r\n        //   iconChar: \"\\f071\",\r\n        // }}\r\n        // configNegative={{\r\n        //   color: \"#fff\",\r\n        //   iconChar: \"\\f071\",\r\n        // }}\r\n      >\r\n        <div onClick={() => {}}>\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!ctc.canEdit}\r\n            checked={ctc.valueCell === true ? true : false}\r\n            onChange={() => {}}\r\n          />\r\n          <i className=\"fa fa-2x\"></i>\r\n        </div>\r\n      </WrapCheckbox>\r\n      {ctc.isUpdating === true && ctc.renderLoadingOverlay()}\r\n    </WrapCell>\r\n  )\r\n}\r\n"],"sourceRoot":""}