{"version":3,"sources":["modules/adminpanel/MyFormControl/Types/datepicker_text.js","modules/adminpanel/MyFormControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFormControl.js","modules/adminpanel/hooks/useConfigFormControl.js","helpers/U.js","modules/adminpanel/MyFormControl/Types/datepicker.js"],"names":["MFCDatePicker","props","custom","more","isText","Wrap","styled","div","MFCWrapControl","cfc","noLabel","FlowGetCanShow","configFormControl","fnList","KMore","htmlWhenHide","type","html","_typeWrapControl","fnListMyFormControl","fnGetTypeWrapControl","_configWrapControl","FlowGetMoreOfKey","key","configWrapControl","MyLayoutHelpers","Types","children","_styleWrapControl","styleWrapControl","defaultValue","className","style","styleLabel","label","styleControl","kgetSourceData","fnListOfFormControl","fieldName","_fnList","console","info","optionKey","sourceList","fnListMyForm","getSourceList","indexOf","_dataForm","getCurrentValues","AHOptions","kfnGetTypeWrapControl","_typeWrapControlFromMyForm","hasOwnProperty","typeWrapControl","useConfigFormControl","refConfigFormControl","React","useRef","current","FlowMergeWithCustomProps","defaultValues","getDefaultValues","useState","valueControl","setValueControl","refFnList","forceUpdate","useForceUpdate","addFnListFromControl","kresetFormControl","warn","FlowFnListFromExtControl","keys","updateValueControl","v","HUtils","runFuntion","newValue","updateValueControlWithMoreFields","moreValues","Object","map","f","i","getDisabled","disabled","getMoreAttrs","_moreAttrs","autoComplete","String","placeholder","placeHolder","rows","padString","width","string","padding","length","str","_value","Date","_more","FlowGetMore","isOnlyTime","test","arr","split","Number","isStringHourMinute","_date","setHours","setMinutes","getDateWithHourMinute","toString","getDateWithString","value","onChange","_valueUpdate","getTime","date","_str","getHours","getMinutes","getStringHourMinuteFromDate","HFormat","format","getStringDateFromDate","attrs","flatpickr"],"mappings":"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","file":"static/js/48.5163b1c6.chunk.js","sourcesContent":["import DatePicker from \"./datepicker\"\r\n\r\nexport default function MFCDatePicker(props) {\r\n  return (\r\n    <DatePicker\r\n      {...props}\r\n      custom={{\r\n        more: {\r\n          isText: true,\r\n        },\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyLayout, MyLayoutHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport { fnListMyFormControl } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetCanShow,\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MFCWrapControl(props) {\r\n  const { cfc, noLabel } = props\r\n  //check can show\r\n  let _canShow = FlowGetCanShow({\r\n    configFormControl: cfc.configFormControl,\r\n    fnList: cfc.fnList,\r\n    more: cfc.more,\r\n  })\r\n  if (_canShow === false) {\r\n    if (cfc.more && cfc.more[KMore.htmlWhenHide]) {\r\n      return <MyUI type=\"html\" html={cfc.more[KMore.htmlWhenHide]} />\r\n    }\r\n    return null\r\n  }\r\n\r\n  let _typeWrapControl = fnListMyFormControl.fnGetTypeWrapControl(cfc.fnList)\r\n  let _configWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.configWrapControl,\r\n    }) || {}\r\n  // console.log(\"_typeWrapControl:\", _typeWrapControl)\r\n  if (MyLayoutHelpers.Types[_typeWrapControl]) {\r\n    return (\r\n      <MyLayout\r\n        type={_typeWrapControl}\r\n        cfc={cfc}\r\n        noLabel={noLabel}\r\n        children={props.children}\r\n        configWrapControl={_configWrapControl}\r\n      />\r\n    )\r\n  }\r\n  let _styleWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.styleWrapControl,\r\n      defaultValue: false,\r\n    }) || {}\r\n  // console.warn(\"render wrap:\", props, _styleWrapControl)\r\n  return (\r\n    <Wrap\r\n      className=\"mfcw-v1\"\r\n      style={{ ..._styleWrapControl, ..._configWrapControl.style }}\r\n    >\r\n      {noLabel !== true && (\r\n        <div style={_configWrapControl.styleLabel}>{cfc.label}</div>\r\n      )}\r\n      <div style={_configWrapControl.styleControl}>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { fnListMyForm, kfnGetTypeWrapControl } from \"src/helpers/fnList\"\r\nimport { HUtils, HIs } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport { KMore } from \"src/helpers/Flows/FormControl\"\r\nconst kgetSourceData = \"getSourceData\"\r\nconst fnListOfFormControl = {\r\n  init({ props }) {\r\n    const configFormControl = props.configFormControl || {}\r\n    const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n\r\n    _fnList[kgetSourceData] = () => {\r\n      console.info(kgetSourceData, fieldName)\r\n      if (more && more.optionKey) {\r\n        const sourceList = fnListMyForm.getSourceList(_fnList)\r\n        if (sourceList && sourceList[more.optionKey]) {\r\n          return sourceList[more.optionKey]\r\n        } else {\r\n          if (\r\n            more.optionKey.indexOf(\".\") > -1 &&\r\n            more.optionKey.indexOf(\"[\") > -1\r\n          ) {\r\n            //option multi\r\n            //\r\n            let _dataForm = fnListMyForm.getCurrentValues(_fnList)\r\n            return AHOptions.getOptionsByLevel(\r\n              sourceList,\r\n              more.optionKey,\r\n              _dataForm\r\n            )\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n    _fnList[kfnGetTypeWrapControl] = () => {\r\n      let _typeWrapControlFromMyForm =\r\n        fnListMyForm.fnGetTypeWrapControl(props.fnList) || \"\"\r\n      if (more && more.hasOwnProperty(KMore.typeWrapControl)) {\r\n        _typeWrapControlFromMyForm = more[KMore.typeWrapControl]\r\n      }\r\n      return _typeWrapControlFromMyForm\r\n    }\r\n    return _fnList\r\n  },\r\n  getSourceData() {},\r\n}\r\n\r\nconst helpersOfFormControl = {}\r\nexport { helpersOfFormControl, fnListOfFormControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport React, { useState } from \"react\"\r\nimport { fnListOfFormControl } from \"./fnListOfFormControl\"\r\nimport { fnListMyForm, kresetFormControl } from \"src/helpers/fnList\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowFnListFromExtControl,\r\n  FlowMergeWithCustomProps,\r\n} from \"src/helpers/Flows/FormControl\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigFormControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFormControl = React.useRef(props.configFormControl)\r\n  const configFormControl = refConfigFormControl.current || {}\r\n  const { label, fieldName } = configFormControl\r\n  FlowMergeWithCustomProps({ configFormControl, custom: props.custom })\r\n  const more = configFormControl.more || {}\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n  const defaultValues = fnListMyForm.getDefaultValues(props.fnList) || {}\r\n  // console.warn(\"defaultValues\", defaultValues)\r\n  const [valueControl, setValueControl] = useState(\r\n    defaultValues[fieldName] || \"\"\r\n  )\r\n  const refFnList = React.useRef(fnListOfFormControl.init({ props }))\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\")\r\n  //   if (countForceUpdate < countForceUpdateMax) setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      console.warn(\"reset form control\")\r\n      setValueControl(defaultValues[fieldName] || \"\")\r\n    },\r\n    fieldName,\r\n  ])\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    FlowFnListFromExtControl.keys.forceUpdate,\r\n    () => {\r\n      forceUpdate()\r\n    },\r\n    fieldName,\r\n  ])\r\n\r\n  return {\r\n    more: more,\r\n    forceUpdate,\r\n    configFormControl,\r\n    label,\r\n    defaultValues,\r\n    fieldName,\r\n    optionKey: more.optionKey,\r\n    valueControl,\r\n    fnList,\r\n    setValueControl,\r\n    updateValueControl: v => {\r\n      // console.warn(\"update value\", props)\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n      ])\r\n    },\r\n    updateValueControlWithMoreFields: (v, moreValues = {}) => {\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n        ...Object.keys(moreValues).map((f, i) => {\r\n          return {\r\n            fieldName: f,\r\n            newValue: moreValues[f],\r\n          }\r\n        }),\r\n      ])\r\n    },\r\n    getDisabled: () => {\r\n      return more.disabled === true\r\n    },\r\n    getMoreAttrs: () => {\r\n      let _moreAttrs = {}\r\n      // console.log(\"more:\", more)\r\n      if (more.autoComplete != null) {\r\n        _moreAttrs.autoComplete = String(more.autoComplete)\r\n        if (more.autoComplete === false) {\r\n          _moreAttrs.autoComplete = \"new-password\" //for chrome disabled autofill\r\n        }\r\n      }\r\n      if (more.placeholder) {\r\n        _moreAttrs.placeHolder = more.placeholder\r\n      }\r\n      if (more.disabled) {\r\n        _moreAttrs.disabled = more.disabled\r\n      }\r\n      if (more.rows) {\r\n        _moreAttrs.rows = more.rows\r\n      }\r\n      return _moreAttrs\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigFormControl\r\n","import { HFormat } from \"@macashipo/mlib\"\r\n\r\n//year-month-day\r\nexport const isStringDate = str => {\r\n  if (\r\n    /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z?/.test(str) ||\r\n    /\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}/.test(str) ||\r\n    /\\d{4}-\\d{2}-\\d{2}/.test(str)\r\n  ) {\r\n    var d = new Date(str)\r\n    return d.toString() !== \"Invalid Date\"\r\n  }\r\n  return false\r\n}\r\n\r\nexport const getDateWithString = str => {\r\n  var _date = new Date(str)\r\n  return _date\r\n}\r\n\r\n//12:05, 01:10\r\nexport const isStringHourMinute = str => {\r\n  if (/\\d{1,2}:\\d{1,2}/.test(str)) {\r\n    var arr = str.split(\":\")\r\n    if (Number(arr[0]) < 24 && Number(arr[1]) < 60) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport const getDateWithHourMinute = str => {\r\n  var _date = new Date()\r\n  if (/\\d{1,2}:\\d{1,2}/.test(str)) {\r\n    var arr = str.split(\":\")\r\n    if (Number(arr[0]) < 24 && Number(arr[1]) < 60) {\r\n      _date.setHours(Number(arr[0]))\r\n      _date.setMinutes(Number(arr[1]))\r\n    }\r\n  }\r\n  return _date\r\n}\r\n\r\nexport const getStringHourMinuteFromDate = date => {\r\n  let _str = \"\"\r\n  if (date) {\r\n    _str = `${padString(2, String(date.getHours()), \"0\")}:${padString(\r\n      2,\r\n      String(date.getMinutes()),\r\n      \"0\"\r\n    )}`\r\n  }\r\n  return _str\r\n}\r\n\r\nexport const getStringDateFromDate = date => {\r\n  let _str = \"\"\r\n  if (date) {\r\n    _str = HFormat.format(date.getTime(), {\r\n      type: \"date\",\r\n      format: \"YYYY-MM-DD\",\r\n    })\r\n  }\r\n  return _str\r\n}\r\n\r\nexport const padString = (width, string, padding) => {\r\n  return width <= string.length\r\n    ? string\r\n    : padString(width, padding + string, padding)\r\n}\r\n\r\nexport const checkPushArrayInObjIfNotExist = (obj, key, value) => {\r\n  if (obj) {\r\n    if (obj[key] == null) {\r\n      obj[key] = []\r\n    }\r\n    if (obj[key] && obj[key].indexOf(value) == -1) {\r\n      obj[key].push(value)\r\n    }\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport { MyBase } from \"@macashipo/mlib\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigFormControl from \"../../hooks/useConfigFormControl\"\r\n\r\nimport {\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n  FlowGetMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  getDateWithHourMinute,\r\n  getDateWithString,\r\n  getStringHourMinuteFromDate,\r\n  getStringDateFromDate,\r\n  isStringDate,\r\n  isStringHourMinute,\r\n} from \"src/helpers/U\"\r\n\r\nconst Wrap = styled.div`\r\n  & > input {\r\n    background: transparent;\r\n    height: 36px;\r\n  }\r\n`\r\nexport default function MFCDatePicker(props) {\r\n  const cfc = useConfigFormControl({ props })\r\n  // console.warn(\"render MFCDatePicker:\", props, cfc, cfc.valueControl)\r\n  let _value =\r\n    cfc.valueControl && typeof cfc.valueControl === \"number\"\r\n      ? new Date(cfc.valueControl)\r\n      : null\r\n  let _more = FlowGetMore({ configFormControl: cfc.configFormControl })\r\n\r\n  //check isText\r\n  if (_more && _more[KMore.isText]) {\r\n    if (_more[KMore.isOnlyTime] && isStringHourMinute(cfc.valueControl)) {\r\n      _value = getDateWithHourMinute(cfc.valueControl)\r\n    } else if (isStringDate(cfc.valueControl)) {\r\n      _value = getDateWithString(cfc.valueControl)\r\n    }\r\n  }\r\n  return (\r\n    <WrapControl cfc={cfc} {...props}>\r\n      <Wrap className=\"mfc-datepicker\">\r\n        <MyBase\r\n          type=\"date_flatpickr\"\r\n          value={_value}\r\n          onChange={v => {\r\n            // console.warn(\"text:\", v)\r\n            if (v && v.length > 0) {\r\n              let _date = v[0]\r\n              let _valueUpdate = _date.getTime()\r\n              // console.warn(\"update date:\", _date)\r\n              //check isText\r\n              if (_more && _more[KMore.isText]) {\r\n                if (_more[KMore.isOnlyTime]) {\r\n                  _valueUpdate = getStringHourMinuteFromDate(_date)\r\n                } else {\r\n                  _valueUpdate = getStringDateFromDate(_date)\r\n                }\r\n              }\r\n              cfc.updateValueControl(_valueUpdate)\r\n            }\r\n          }}\r\n          attrs={{\r\n            ...FlowGetMoreOfKey({\r\n              configFormControl: cfc.configFormControl,\r\n              key: KMore.flatpickr,\r\n              defaultValue: {},\r\n            }),\r\n          }}\r\n        />\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n"],"sourceRoot":""}