{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/pickcolor.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","WrapNoItem","WrapItemOptionText","MTCSelectModernPopover","props","ctc","sourceData","fnListMyTableCell","fnGetSourceData","fnList","length","ColorCode","hasOwnProperty","map","v","i","Value","Text","Name","console","warn","style","minWidth","minHeight","undefined","className","i18next","t","type","valueSelected","valueCell","isRadio","renderOptionText","borderRightColor","onChange","itemOption","HUtils","runFuntion","hide","MTCPickColor","cell","useConfigTableCell","_bgColor","classNameWrap","overlay","overlayClassName","placement","destroyTooltipOnHide","disabled","canEdit","background","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","useEffect","moreObj","updateFieldData","opts","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","button","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/125.dd29caf9.chunk.js","sourcesContent":["import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { HIs, HUtils, MyUI } from \"@macashipo/mlib\"\r\nimport { Popover } from \"src/core/components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport i18next from \"i18next\"\r\nconst WrapCell = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  & > div {\r\n    border: 1px solid #f1f4f6;\r\n    border-radius: 12px;\r\n    height: 24px;\r\n    width: 24px;\r\n    cursor: pointer;\r\n    box-shadow: inset 0 0 1px #ffffff;\r\n  }\r\n`\r\nconst WrapNoItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 36px;\r\n  font-style: italic;\r\n  color: #adadad;\r\n`\r\nconst WrapItemOptionText = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  border-right: 10px solid transparent;\r\n`\r\nconst Select2Color = option => {\r\n  let _bg = option.value || \"transparent\"\r\n  return (\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <i className=\"fa fa-square\" style={{ color: _bg, fontSize: \"20px\" }}></i>{\" \"}\r\n      &nbsp; {option.label}\r\n    </div>\r\n  )\r\n}\r\nfunction MTCSelectModernPopover(props) {\r\n  const { ctc } = props\r\n  const sourceData = fnListMyTableCell.fnGetSourceData(ctc.fnList)\r\n  //Update sourceData when not have Value, just have ColorCode\r\n  if (\r\n    sourceData &&\r\n    sourceData.length > 0 &&\r\n    sourceData[0].ColorCode &&\r\n    !sourceData[0].hasOwnProperty(\"Value\")\r\n  ) {\r\n    sourceData.map((v, i) => {\r\n      v.Value = v.ColorCode\r\n      v.Text = v.Text || v.Name || v.ColorCode\r\n      return v\r\n    })\r\n  }\r\n  console.warn(\"sourceData:\", sourceData)\r\n  return (\r\n    <div style={{ minWidth: \"100px\", minHeight: \"50px\" }}>\r\n      {(sourceData == null ||\r\n        sourceData == undefined ||\r\n        (sourceData && sourceData.length === 0)) && (\r\n        <WrapNoItem className=\"no-items\">\r\n          {i18next.t(\"No item option\")}\r\n        </WrapNoItem>\r\n      )}\r\n      {sourceData && sourceData.length > 0 && (\r\n        <MyUI\r\n          type=\"select_box_search_v2\"\r\n          sourceData={sourceData}\r\n          valueSelected={ctc.valueCell}\r\n          isRadio={true}\r\n          renderOptionText={v => {\r\n            return (\r\n              <WrapItemOptionText style={{ borderRightColor: v.ColorCode }}>\r\n                {v.Text}\r\n              </WrapItemOptionText>\r\n            )\r\n          }}\r\n          onChange={itemOption => {\r\n            console.warn(\r\n              \"onChange:\",\r\n              itemOption,\r\n              itemOption.Value,\r\n              ctc.valueCell\r\n            )\r\n            HUtils.runFuntion(ctc, \"updateFieldData\", [\r\n              itemOption.Value === ctc.valueCell ? \"\" : itemOption.Value,\r\n              {},\r\n            ])\r\n            //hide popover\r\n            if (props.hide) {\r\n              props.hide()\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default function MTCPickColor(props) {\r\n  const { cell } = props\r\n  const ctc = useConfigTableCell({ props })\r\n  let _bgColor = \"#999\"\r\n  if (ctc.valueCell) {\r\n    _bgColor = ctc.valueCell\r\n  }\r\n  return (\r\n    <WrapCell className={ctc.classNameWrap(\"mct-pickcolor\")}>\r\n      <Popover\r\n        overlay={props => {\r\n          return <MTCSelectModernPopover ctc={ctc} {...props} />\r\n        }}\r\n        overlayClassName=\"m-popover m-popover-full\"\r\n        placement=\"bottom\"\r\n        destroyTooltipOnHide={true}\r\n        disabled={ctc.canEdit === false}\r\n      >\r\n        <div style={{ background: _bgColor }}></div>\r\n      </Popover>\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}