{"version":3,"sources":["modules/adminpanel/MyFormControl/Types/alert.js","modules/adminpanel/MyFormControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFormControl.js","modules/adminpanel/hooks/useConfigFormControl.js"],"names":["MFCText","props","cfc","useConfigFormControl","className","valueControl","Wrap","styled","div","MFCWrapControl","noLabel","FlowGetCanShow","configFormControl","fnList","more","KMore","htmlWhenHide","type","html","_typeWrapControl","fnListMyFormControl","fnGetTypeWrapControl","_configWrapControl","FlowGetMoreOfKey","key","configWrapControl","MyLayoutHelpers","Types","children","_styleWrapControl","styleWrapControl","defaultValue","style","styleLabel","label","styleControl","kgetSourceData","fnListOfFormControl","fieldName","_fnList","console","info","optionKey","sourceList","fnListMyForm","getSourceList","indexOf","_dataForm","getCurrentValues","AHOptions","kfnGetTypeWrapControl","_typeWrapControlFromMyForm","hasOwnProperty","typeWrapControl","refConfigFormControl","React","useRef","current","FlowMergeWithCustomProps","custom","defaultValues","getDefaultValues","useState","setValueControl","refFnList","forceUpdate","useForceUpdate","addFnListFromControl","kresetFormControl","warn","FlowFnListFromExtControl","keys","updateValueControl","v","HUtils","runFuntion","newValue","updateValueControlWithMoreFields","moreValues","Object","map","f","i","getDisabled","disabled","getMoreAttrs","_moreAttrs","autoComplete","String","placeholder","placeHolder","rows"],"mappings":"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","file":"static/js/81.cb4ac3b1.chunk.js","sourcesContent":["import React from \"react\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport { Alert } from \"reactstrap\"\r\nimport useConfigFormControl from \"../../hooks/useConfigFormControl\"\r\nexport default function MFCText(props) {\r\n  const cfc = useConfigFormControl({ props })\r\n  return (\r\n    <WrapControl cfc={cfc} {...props}>\r\n      <div className=\"mfc-alert\">\r\n        <Alert>{cfc.valueControl}</Alert>\r\n      </div>\r\n    </WrapControl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyLayout, MyLayoutHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport { fnListMyFormControl } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetCanShow,\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MFCWrapControl(props) {\r\n  const { cfc, noLabel } = props\r\n  //check can show\r\n  let _canShow = FlowGetCanShow({\r\n    configFormControl: cfc.configFormControl,\r\n    fnList: cfc.fnList,\r\n    more: cfc.more,\r\n  })\r\n  if (_canShow === false) {\r\n    if (cfc.more && cfc.more[KMore.htmlWhenHide]) {\r\n      return <MyUI type=\"html\" html={cfc.more[KMore.htmlWhenHide]} />\r\n    }\r\n    return null\r\n  }\r\n\r\n  let _typeWrapControl = fnListMyFormControl.fnGetTypeWrapControl(cfc.fnList)\r\n  let _configWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.configWrapControl,\r\n    }) || {}\r\n  // console.log(\"_typeWrapControl:\", _typeWrapControl)\r\n  if (MyLayoutHelpers.Types[_typeWrapControl]) {\r\n    return (\r\n      <MyLayout\r\n        type={_typeWrapControl}\r\n        cfc={cfc}\r\n        noLabel={noLabel}\r\n        children={props.children}\r\n        configWrapControl={_configWrapControl}\r\n      />\r\n    )\r\n  }\r\n  let _styleWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.styleWrapControl,\r\n      defaultValue: false,\r\n    }) || {}\r\n  // console.warn(\"render wrap:\", props, _styleWrapControl)\r\n  return (\r\n    <Wrap\r\n      className=\"mfcw-v1\"\r\n      style={{ ..._styleWrapControl, ..._configWrapControl.style }}\r\n    >\r\n      {noLabel !== true && (\r\n        <div style={_configWrapControl.styleLabel}>{cfc.label}</div>\r\n      )}\r\n      <div style={_configWrapControl.styleControl}>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { fnListMyForm, kfnGetTypeWrapControl } from \"src/helpers/fnList\"\r\nimport { HUtils, HIs } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport { KMore } from \"src/helpers/Flows/FormControl\"\r\nconst kgetSourceData = \"getSourceData\"\r\nconst fnListOfFormControl = {\r\n  init({ props }) {\r\n    const configFormControl = props.configFormControl || {}\r\n    const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n\r\n    _fnList[kgetSourceData] = () => {\r\n      console.info(kgetSourceData, fieldName)\r\n      if (more && more.optionKey) {\r\n        const sourceList = fnListMyForm.getSourceList(_fnList)\r\n        if (sourceList && sourceList[more.optionKey]) {\r\n          return sourceList[more.optionKey]\r\n        } else {\r\n          if (\r\n            more.optionKey.indexOf(\".\") > -1 &&\r\n            more.optionKey.indexOf(\"[\") > -1\r\n          ) {\r\n            //option multi\r\n            //\r\n            let _dataForm = fnListMyForm.getCurrentValues(_fnList)\r\n            return AHOptions.getOptionsByLevel(\r\n              sourceList,\r\n              more.optionKey,\r\n              _dataForm\r\n            )\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n    _fnList[kfnGetTypeWrapControl] = () => {\r\n      let _typeWrapControlFromMyForm =\r\n        fnListMyForm.fnGetTypeWrapControl(props.fnList) || \"\"\r\n      if (more && more.hasOwnProperty(KMore.typeWrapControl)) {\r\n        _typeWrapControlFromMyForm = more[KMore.typeWrapControl]\r\n      }\r\n      return _typeWrapControlFromMyForm\r\n    }\r\n    return _fnList\r\n  },\r\n  getSourceData() {},\r\n}\r\n\r\nconst helpersOfFormControl = {}\r\nexport { helpersOfFormControl, fnListOfFormControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport React, { useState } from \"react\"\r\nimport { fnListOfFormControl } from \"./fnListOfFormControl\"\r\nimport { fnListMyForm, kresetFormControl } from \"src/helpers/fnList\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowFnListFromExtControl,\r\n  FlowMergeWithCustomProps,\r\n} from \"src/helpers/Flows/FormControl\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigFormControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFormControl = React.useRef(props.configFormControl)\r\n  const configFormControl = refConfigFormControl.current || {}\r\n  const { label, fieldName } = configFormControl\r\n  FlowMergeWithCustomProps({ configFormControl, custom: props.custom })\r\n  const more = configFormControl.more || {}\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n  const defaultValues = fnListMyForm.getDefaultValues(props.fnList) || {}\r\n  // console.warn(\"defaultValues\", defaultValues)\r\n  const [valueControl, setValueControl] = useState(\r\n    defaultValues[fieldName] || \"\"\r\n  )\r\n  const refFnList = React.useRef(fnListOfFormControl.init({ props }))\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\")\r\n  //   if (countForceUpdate < countForceUpdateMax) setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      console.warn(\"reset form control\")\r\n      setValueControl(defaultValues[fieldName] || \"\")\r\n    },\r\n    fieldName,\r\n  ])\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    FlowFnListFromExtControl.keys.forceUpdate,\r\n    () => {\r\n      forceUpdate()\r\n    },\r\n    fieldName,\r\n  ])\r\n\r\n  return {\r\n    more: more,\r\n    forceUpdate,\r\n    configFormControl,\r\n    label,\r\n    defaultValues,\r\n    fieldName,\r\n    optionKey: more.optionKey,\r\n    valueControl,\r\n    fnList,\r\n    setValueControl,\r\n    updateValueControl: v => {\r\n      // console.warn(\"update value\", props)\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n      ])\r\n    },\r\n    updateValueControlWithMoreFields: (v, moreValues = {}) => {\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n        ...Object.keys(moreValues).map((f, i) => {\r\n          return {\r\n            fieldName: f,\r\n            newValue: moreValues[f],\r\n          }\r\n        }),\r\n      ])\r\n    },\r\n    getDisabled: () => {\r\n      return more.disabled === true\r\n    },\r\n    getMoreAttrs: () => {\r\n      let _moreAttrs = {}\r\n      // console.log(\"more:\", more)\r\n      if (more.autoComplete != null) {\r\n        _moreAttrs.autoComplete = String(more.autoComplete)\r\n        if (more.autoComplete === false) {\r\n          _moreAttrs.autoComplete = \"new-password\" //for chrome disabled autofill\r\n        }\r\n      }\r\n      if (more.placeholder) {\r\n        _moreAttrs.placeHolder = more.placeholder\r\n      }\r\n      if (more.disabled) {\r\n        _moreAttrs.disabled = more.disabled\r\n      }\r\n      if (more.rows) {\r\n        _moreAttrs.rows = more.rows\r\n      }\r\n      return _moreAttrs\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigFormControl\r\n"],"sourceRoot":""}