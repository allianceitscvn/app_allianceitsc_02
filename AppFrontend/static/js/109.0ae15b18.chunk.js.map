{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/_modal_html_editor.js","modules/adminpanel/MyTableCell/Types/cs_email_tp_action.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapModal","styled","div","ModeType","ModalHtmlEditor","props","valueCell","fnList","onSave","React","useState","v","setV","mode","setMode","isLoading","setIsLoading","style","maxHeight","MyModal","renderHeader","cModal","inMyModal","title","className","Button","onClick","color","position","right","disabled","changeLoading","HUtils","runFuntion","cbSuccess","r","console","warn","fnListModal","hideModal","cbError","e","msg","AHUI","type","html","onBlur","value","onChange","attrs","WrapCell","configGrid","templateColumns","MTCCopy","ctc","useConfigTableCell","linkOrCell","V","TableCell_GetLink","_fBody","classNameWrap","showFromComponent","propsComponent","updateFieldData","fieldName","row","fnListMyTableCell","fnGetHeaderTitle","showHeader","backdrop","updateCell","opts","showFromMyPage","UIType","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","error","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","moreObj","apiController","fnGetApiPath","newValue","fnForceUpdateTable","cbSuccessUpdate","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","button","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","finally","hide","onClickFiles","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/109.0ae15b18.chunk.js","sourcesContent":["import { HUtils, MyBase, MyLib, MyUI } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\nimport styled from \"styled-components\"\r\nimport { fnListModal } from \"src/helpers/fnList\"\r\n\r\nconst WrapModal = styled.div`\r\n  & .rdw-editor-main {\r\n    border: 1px solid #f1f1f1;\r\n    min-height: 100px;\r\n    max-height: 300px;\r\n    padding: 0px 5px;\r\n  }\r\n  & .a-mode-textarea textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n  & .a-mode-preview {\r\n    max-height: calc(100vh - 10rem);\r\n    overflow: auto;\r\n  }\r\n`\r\n\r\nconst ModeType = {\r\n  html: \"html\",\r\n  textarea: \"textarea\",\r\n  preview: \"preview\",\r\n}\r\n\r\nfunction ModalHtmlEditor(props) {\r\n  const { valueCell, fnList, onSave } = props\r\n  const [v, setV] = React.useState(valueCell || \"\")\r\n  const [mode, setMode] = React.useState(ModeType.html)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  return (\r\n    <WrapModal style={{ maxHeight: \"calc(100vh - 5rem)\" }}>\r\n      {MyModal.renderHeader({\r\n        cModal: props.inMyModal,\r\n        title: props => {\r\n          return (\r\n            <>\r\n              <div className=\"btn-group\">\r\n                <Button\r\n                  onClick={() => {\r\n                    setMode(ModeType.html)\r\n                  }}\r\n                  color={mode === ModeType.html ? \"primary\" : \"secondary\"}\r\n                >\r\n                  HTML\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    setMode(ModeType.textarea)\r\n                  }}\r\n                  color={mode === ModeType.textarea ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Code\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    setMode(ModeType.preview)\r\n                  }}\r\n                  color={mode === ModeType.preview ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Preview\r\n                </Button>\r\n              </div>\r\n              <div\r\n                className=\"btn-group\"\r\n                style={{ position: \"absolute\", right: \"3rem\" }}\r\n              >\r\n                <Button\r\n                  disabled={isLoading}\r\n                  onClick={() => {\r\n                    if (onSave) {\r\n                      onSave(v, {\r\n                        fnList: {\r\n                          ...fnList,\r\n                          changeLoading: isLoading => {\r\n                            setIsLoading(isLoading)\r\n                          },\r\n                        },\r\n                      })\r\n                    } else {\r\n                      HUtils.runFuntion(fnList, \"updateCell\", [\r\n                        v,\r\n                        {\r\n                          cbSuccess: r => {\r\n                            console.warn(\"cbSuccess:\", r)\r\n                            setIsLoading(false)\r\n                            fnListModal.hideModal(fnList)\r\n                          },\r\n                          cbError: e => {\r\n                            console.warn(\"cbErrro:\", e)\r\n                            if (e.msg) {\r\n                              AHUI.showToastWarning(e.msg)\r\n                            }\r\n                            setIsLoading(false)\r\n                          },\r\n                        },\r\n                      ])\r\n                    }\r\n                  }}\r\n                  color={\"success\"}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </div>\r\n            </>\r\n          )\r\n        },\r\n      })}\r\n      <div>\r\n        {mode === ModeType.html && (\r\n          <div className=\"a-mode-html\">\r\n            <MyLib\r\n              type=\"draft_wysiwyg\"\r\n              html={v}\r\n              onBlur={({ html }) => {\r\n                console.warn(\"AAA\", html)\r\n                if (html != v) {\r\n                  setV(html)\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n        {mode === ModeType.textarea && (\r\n          <div className=\"a-mode-textarea\">\r\n            <MyBase\r\n              type=\"textarea\"\r\n              value={v}\r\n              onChange={v => {\r\n                setV(v)\r\n              }}\r\n              attrs={{}}\r\n            />\r\n          </div>\r\n        )}\r\n        {mode === ModeType.preview && (\r\n          <div className=\"a-mode-preview\">\r\n            <MyUI type=\"html\" html={v} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </WrapModal>\r\n  )\r\n}\r\n\r\nexport default ModalHtmlEditor\r\n","import { Button } from \"reactstrap\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListModal, fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport V from \"src/helpers/V\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport ModalHtmlEditor from \"./_modal_html_editor\"\r\nconst WrapCell = styled.div`\r\n  display: grid;\r\n  padding: 2px;\r\n  grid-column-gap: 2px;\r\n  grid-row-gap: 2px;\r\n  grid-template-columns: ${props => props.configGrid.templateColumns};\r\n  max-height: ${props => props.configGrid.maxHeight};\r\n  & > button {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nexport default function MTCCopy(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const linkOrCell = V.TableCell_GetLink(ctc)\r\n  let _showEdit = true\r\n  let _showView = true\r\n  let _showSend = true\r\n  let _configGrid = {\r\n    templateColumns: \"1fr\",\r\n    maxHeight: \"60px\",\r\n  }\r\n  let _fBody = \"Body\"\r\n  return (\r\n    <WrapCell\r\n      className={ctc.classNameWrap(\"mtc-cs-email-action\")}\r\n      configGrid={_configGrid}\r\n    >\r\n      {_showEdit && (\r\n        <Button\r\n          color=\"primary\"\r\n          title=\"Edit Body\"\r\n          onClick={() => {\r\n            console.warn(\"Click\", linkOrCell)\r\n            MyModal.showFromComponent(\r\n              propsComponent => {\r\n                return (\r\n                  <ModalHtmlEditor\r\n                    {...propsComponent}\r\n                    onSave={(v, { fnList }) => {\r\n                      console.warn(\"onsave:\", v, fnList)\r\n                      ctc.updateFieldData(v, { fieldName: _fBody })\r\n                      fnListModal.hideModal(fnList)\r\n                    }}\r\n                    ctc={ctc}\r\n                    valueCell={ctc.row[_fBody]}\r\n                  />\r\n                )\r\n              },\r\n              {\r\n                title: fnListMyTableCell.fnGetHeaderTitle(ctc.fnList),\r\n                showHeader: false,\r\n                backdrop: \"static\",\r\n                // backdrop: \"static\",\r\n                fnList: {\r\n                  updateCell: (v, opts) => {\r\n                    console.warn(\"Updatecell:\", v, opts)\r\n                    ctc.updateFieldData(v, opts)\r\n                  },\r\n                },\r\n              }\r\n            )\r\n          }}\r\n        >\r\n          <i className=\"fa fa-edit\" />\r\n        </Button>\r\n      )}\r\n      {_showSend && (\r\n        <Button\r\n          color=\"primary\"\r\n          title=\"Test Send Email\"\r\n          onClick={() => {\r\n            console.warn(\"Click\", linkOrCell)\r\n            MyModal.showFromMyPage(\r\n              {\r\n                UIType: \"simulator_sender_email\",\r\n              },\r\n              {\r\n                title: \"Email Sender\",\r\n              }\r\n            )\r\n          }}\r\n        >\r\n          <i className=\"fa fa-send\" />\r\n        </Button>\r\n      )}\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}