{"version":3,"sources":["modules/adminpanel/MyTableFilterControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFilterControl.js","modules/adminpanel/hooks/useConfigTableFilterControl.js","modules/adminpanel/MyTableFilterControl/Types/select2.js"],"names":["Wrap","styled","div","MTFCWrapControl","props","_title","oneFilterControl","title","HIs","isJsonString","_obj","HJson","getObj","className","children","fnListOfFilterControl","configFilterControl","_fnList","fnList","kfnGetTitleControl","useConfigTableFilterControl","refConfigFilterControl","React","useRef","current","type","currentValue","more","refFnList","forceUpdate","useForceUpdate","custom","_fnGetFilterOutFromValue","MyTableFilterControlHelpers","ConfigByType","fn","value","setFnGetFilterOutFromValue","_loadFirst","setFromComponent","console","warn","loadLocal","clearValue","updateCurrentValue","fnListMyPage","fnGetOnePage","clear","updateData","v","getSourceData","optionKey","startsWith","MTFCSelect2","ctfc","_isMulti","_moreAttrs","KMore","multi","select2","isMulti","moreProps","onChange","Array","isArray","length","map","vv","ii","Value","Text","attrs","isClearable","closeMenuOnSelect","placeholder","FlowGetPlaceHolder","defaultValue","i18next","t"],"mappings":"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","file":"static/js/142.76a5459f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { HIs, HJson } from \"@macashipo/mlib\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  min-width: 300px;\r\n  & input {\r\n    padding: 0.25rem;\r\n    line-height: 1rem;\r\n    height: 1.5rem;\r\n  }\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MTFCWrapControl(props) {\r\n  const { oneFilterControl } = props\r\n  // console.warn(\"render MTFCWrapControl:\", props)\r\n  let _title = oneFilterControl.title\r\n  if (HIs.isJsonString(_title)) {\r\n    let _obj = HJson.getObj(_title, {})\r\n    if (_obj && _obj.title) {\r\n      _title = _obj.title\r\n    }\r\n  }\r\n  return (\r\n    <Wrap className=\"mtfcw-ap col-4\">\r\n      <div>{_title}</div>\r\n      <div>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { HIs, HJson } from \"@macashipo/mlib\"\r\nimport { kfnGetTitleControl } from \"src/helpers/fnList\"\r\n\r\nconst fnListOfFilterControl = {\r\n  init({ props, configFilterControl }) {\r\n    // const configFormControl = props.configFormControl || {}\r\n    // const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n    _fnList[kfnGetTitleControl] = () => {\r\n      let _title = configFilterControl.title\r\n      if (HIs.isJsonString(_title)) {\r\n        let _obj = HJson.getObj(_title, {})\r\n        if (_obj && _obj.title) {\r\n          _title = _obj.title\r\n        }\r\n      }\r\n      return _title\r\n    }\r\n    return _fnList\r\n  },\r\n}\r\n\r\nconst helpersOfFilterControl = {}\r\nexport { helpersOfFilterControl, fnListOfFilterControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HJson, MyTableFilterControlHelpers } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { fnListOfFilterControl } from \"./fnListOfFilterControl\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigTableFilterControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFilterControl = React.useRef(props.oneFilterControl)\r\n  const configFilterControl = refConfigFilterControl.current\r\n  const { type, currentValue, more } = configFilterControl //title, fieldName, optionKey, onePage\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n\r\n  const refFnList = React.useRef(\r\n    fnListOfFilterControl.init({ props, configFilterControl })\r\n  )\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  if (props.custom) {\r\n    if (configFilterControl[\"_applyCustom\"] == null) {\r\n      if (props.custom.more) {\r\n        configFilterControl.more = {\r\n          ...configFilterControl.more,\r\n          ...props.custom.more,\r\n        }\r\n      }\r\n      configFilterControl[\"_applyCustom\"] = true\r\n    }\r\n  }\r\n\r\n  if (configFilterControl) {\r\n    if (configFilterControl._fnGetFilterOutFromValue == null) {\r\n      if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[type]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[type][\"getFilterOut\"](\r\n            value,\r\n            configFilterControl\r\n          )\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      } else if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[\"_default\"]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[\"_default\"][\r\n            \"getFilterOut\"\r\n          ](value, configFilterControl)\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      }\r\n    }\r\n    if (configFilterControl._loadFirst !== false) {\r\n      if (configFilterControl.setFromComponent) {\r\n        configFilterControl.setFromComponent({\r\n          forceUpdate: () => {\r\n            console.warn(\"forceupdateee\")\r\n            forceUpdate()\r\n          },\r\n        })\r\n      }\r\n      configFilterControl.loadLocal()\r\n      configFilterControl._loadFirst = false\r\n      // console.warn(\"load first\", configFilterControl)\r\n    }\r\n  }\r\n\r\n  return {\r\n    forceUpdate,\r\n    configFilterControl,\r\n    currentValue,\r\n    more,\r\n    fnList,\r\n    clearValue: () => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        console.warn(\"clear Value\", props, configFilterControl)\r\n        let _onePage = fnListMyPage.fnGetOnePage(fnList)\r\n        configFilterControl.clear()\r\n        configFilterControl.updateCurrentValue(null)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    updateData: v => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        configFilterControl.updateCurrentValue(v)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    getSourceData: () => {\r\n      //bo sung source list tu json string Source\r\n      // console.warn(\"configFilterControl\", configFilterControl)\r\n      if (\r\n        configFilterControl &&\r\n        configFilterControl.optionKey &&\r\n        configFilterControl.optionKey.startsWith(\"[\")\r\n      ) {\r\n        return HJson.getObj(configFilterControl.optionKey, [])\r\n      }\r\n      if (configFilterControl && configFilterControl.getSourceData) {\r\n        return configFilterControl.getSourceData()\r\n      }\r\n      // if (onePage && onePage._dataOptions && onePage._dataOptions[optionKey]) {\r\n      //   return onePage._dataOptions[optionKey]\r\n      // }\r\n      return []\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigTableFilterControl\r\n","import React from \"react\"\r\nimport { MyBase } from \"@macashipo/mlib\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigTableFilterControl from \"../../hooks/useConfigTableFilterControl\"\r\nimport styled from \"styled-components\"\r\nimport i18next from \"i18next\"\r\nimport { FlowGetPlaceHolder, KMore } from \"src/helpers/Flows/TableFilter\"\r\nconst Wrap = styled.div`\r\n  & .form-control {\r\n    padding: 0px;\r\n    height: auto;\r\n    border: 0px;\r\n  }\r\n`\r\nexport default function MTFCSelect2(props) {\r\n  const oneFilterControl = props.oneFilterControl\r\n  const ctfc = useConfigTableFilterControl({ props })\r\n  const { currentValue } = ctfc\r\n  // console.warn(\"render MTFCSelect2:\", currentValue)\r\n  //khi thay doi multi, ko bi anh huong qua nhieu toi viec load ban dau\r\n  let _isMulti = false\r\n  let _moreAttrs = {}\r\n  if (ctfc.more) {\r\n    if (ctfc.more[KMore.multi] == true) {\r\n      _isMulti = true\r\n    }\r\n    if (ctfc.more[KMore.select2]) {\r\n      if (ctfc.more[KMore.select2].isMulti == true) {\r\n        _isMulti = true\r\n      }\r\n      if (ctfc.more[KMore.select2].moreProps) {\r\n        _moreAttrs = ctfc.more[KMore.select2].moreProps\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <WrapControl {...props}>\r\n      <Wrap className=\"mtfc-select2\">\r\n        <MyBase\r\n          type=\"select2\"\r\n          className=\"form-control\"\r\n          value={currentValue}\r\n          onChange={v => {\r\n            console.warn(\"onChange:\", v)\r\n            if (v) {\r\n              if (Array.isArray(v)) {\r\n                if (v.length > 0) {\r\n                  ctfc.updateData(\r\n                    v.map((vv, ii) => {\r\n                      return {\r\n                        Value: vv.Value,\r\n                        Text: vv.Text,\r\n                      }\r\n                    })\r\n                  )\r\n                } else {\r\n                  ctfc.clearValue()\r\n                }\r\n              } else {\r\n                ctfc.updateData({\r\n                  Value: v.Value,\r\n                  Text: v.Text,\r\n                })\r\n              }\r\n            } else {\r\n              ctfc.clearValue()\r\n            }\r\n          }}\r\n          attrs={{\r\n            isClearable: true,\r\n            isMulti: _isMulti,\r\n            closeMenuOnSelect: _isMulti === true ? false : true,\r\n            placeholder: FlowGetPlaceHolder({\r\n              oneFilterControl: oneFilterControl,\r\n              defaultValue: i18next.t(\"Select...\"),\r\n            }),\r\n            ..._moreAttrs,\r\n          }}\r\n          fnList={{\r\n            getSourceData: () => {\r\n              return ctfc.getSourceData()\r\n            },\r\n          }}\r\n        />\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n"],"sourceRoot":""}