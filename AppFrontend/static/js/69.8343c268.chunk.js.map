{"version":3,"sources":["modules/adminpanel/MyButton/Types/switch_view.js","helpers/Flows/Button.js","modules/adminpanel/MyButton/Types/ext.tsx"],"names":["MB_SwitchView","_changeView","type","config","fnList","props","fnListMyPage","fnChangeSwitchView","this","oneButton","_currentSwitchView","fnGetCurrentSwitchView","_list","list","_type","_default","defaut","console","warn","className","map","v","i","title","color","onClick","MyButtonExt","KMoreOfButton","apiCheckShowModal","acceptType","apiUrlAfter","tooltip","FlowCheckShowModal","customQuery","cb","_configCheckShow","_moreObj","changeIsLoading","_request","method","url","path","name","ApiGeneric","request","data","getApiQuery","fnGetSharedRequestData","successCallBack","response","_config","HUtils","get","IsShow","result","FormData","errorCallBack","error","parseResponseWhenSuccess","res","_configButton","NeedReload","fnReloadPage","NeedReloadList","fnReloadList","getMorePropsButton","_moreProps","checkConfirmMsg","ConfirmMsg","fnListUI","fnshowConfirm","msg","onClickOK","state","setFromComponent","getTitleDisplay","React","Component"],"mappings":"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","file":"static/js/69.8343c268.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport MyButtonExt from \"./ext\"\r\nimport i18next from \"i18next\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nclass MB_SwitchView extends MyButtonExt {\r\n  componentDidMount() {}\r\n  _changeView = (type, config) => {\r\n    const { fnList } = this.props\r\n    fnListMyPage.fnChangeSwitchView(fnList, [{ type, config }])\r\n  }\r\n  render() {\r\n    const { oneButton, fnList } = this.props\r\n    let _currentSwitchView = fnListMyPage.fnGetCurrentSwitchView(fnList) || {}\r\n    let _list = _currentSwitchView.list || []\r\n    let _type = _currentSwitchView.type\r\n    let _default = _currentSwitchView.defaut\r\n    if ((_type == null || _type == \"\") && _default != null) {\r\n      _type = _default\r\n    }\r\n    console.warn(\r\n      \"render switch view:\",\r\n      _currentSwitchView,\r\n      _list,\r\n      _type,\r\n      _default\r\n    )\r\n    return (\r\n      <div className=\"btn-group\">\r\n        {_list.map((v, i) => {\r\n          if (v == \"table\") {\r\n            return (\r\n              <Button\r\n                key={v}\r\n                title=\"Table View\"\r\n                color={_type == \"table\" ? \"primary\" : \"secondary\"}\r\n                onClick={() => {\r\n                  this._changeView(\"table\", {})\r\n                }}\r\n              >\r\n                <i className=\"fa fa-table\"></i>\r\n              </Button>\r\n            )\r\n          } else if (v == \"grid\") {\r\n            return (\r\n              <Button\r\n                key={v}\r\n                title=\"Grid View\"\r\n                color={_type == \"grid\" ? \"primary\" : \"secondary\"}\r\n                onClick={() => {\r\n                  this._changeView(\"grid\", {})\r\n                }}\r\n              >\r\n                <i className=\"fa fa-th\"></i>\r\n              </Button>\r\n            )\r\n          } else if (v == \"list\") {\r\n            return (\r\n              <Button\r\n                key={v}\r\n                title=\"List View\"\r\n                color={_type == \"list\" ? \"primary\" : \"secondary\"}\r\n                onClick={() => {\r\n                  this._changeView(\"list\", {})\r\n                }}\r\n              >\r\n                <i className=\"fa fa-th-list\"></i>\r\n              </Button>\r\n            )\r\n          }\r\n          return <div key={i}></div>\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MB_SwitchView\r\n","import { ApiGeneric } from \"src/services/apiServices\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nexport const KMoreOfButton = {\r\n  apiCheckShowModal: \"apiCheckShowModal\",\r\n  acceptType: \"acceptType\", //upload\r\n  apiUrlAfter: \"apiUrlAfter\", //upload\r\n  title: \"title\", //show title cua button\r\n  tooltip: \"tooltip\", //show tooltip cua button, chua su dung\r\n}\r\n\r\nexport const FlowCheckShowModal = ({\r\n  oneButton,\r\n  fnList,\r\n  customQuery,\r\n  cb,\r\n} = {}) => {\r\n  if (oneButton) {\r\n    let _configCheckShow = oneButton._moreObj[KMoreOfButton.apiCheckShowModal]\r\n    if (_configCheckShow) {\r\n      oneButton.changeIsLoading(true)\r\n      let _request = {\r\n        method: \"POST\",\r\n        url: _configCheckShow.url,\r\n        path: _configCheckShow.path,\r\n        name: _configCheckShow.name,\r\n      }\r\n      ApiGeneric({\r\n        request: _request,\r\n        data: oneButton.getApiQuery({\r\n          ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n          ...customQuery,\r\n        }),\r\n        successCallBack: response => {\r\n          console.warn(\"response\", response)\r\n          let _config = HUtils.get(response, \"Data.Config\")\r\n          if (_config && _config.IsShow) {\r\n            if (cb) {\r\n              cb({\r\n                result: true,\r\n                data: _config.FormData || {},\r\n              })\r\n            }\r\n          } else {\r\n            if (cb) {\r\n              cb({\r\n                result: false,\r\n              })\r\n            }\r\n          }\r\n          oneButton.changeIsLoading(false)\r\n        },\r\n        errorCallBack: (error, response) => {\r\n          oneButton.changeIsLoading(false)\r\n          if (cb) {\r\n            cb({\r\n              result: false,\r\n            })\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb({\r\n          result: true,\r\n        })\r\n      }\r\n    }\r\n  } else {\r\n    if (cb) {\r\n      cb({\r\n        result: true,\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { OneButton } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { KMoreOfButton } from \"src/helpers/Flows/Button\"\r\nimport { fnListMyPage, fnListUI } from \"src/helpers/fnList\"\r\ninterface IProps {\r\n  oneButton: OneButton\r\n  fnList?: any\r\n}\r\nclass MyButtonExt extends React.Component<IProps> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    const { oneButton } = this.props\r\n    oneButton.setFromComponent(this)\r\n  }\r\n  componentDidMount() {}\r\n  onClick = () => {}\r\n  parseResponseWhenSuccess = (res: any) => {\r\n    const { oneButton, fnList } = this.props\r\n    if (oneButton._configButton.NeedReload) {\r\n      fnListMyPage.fnReloadPage(fnList)\r\n    } else if (oneButton._configButton.NeedReloadList) {\r\n      fnListMyPage.fnReloadList(fnList)\r\n    }\r\n  }\r\n  getMorePropsButton = () => {\r\n    const { oneButton } = this.props\r\n    let _moreProps: any = {}\r\n    if (oneButton && oneButton._moreObj) {\r\n      if (oneButton._moreObj[KMoreOfButton.title]) {\r\n        _moreProps.title = oneButton._moreObj[KMoreOfButton.title]\r\n      }\r\n    }\r\n    return _moreProps\r\n  }\r\n  checkConfirmMsg = cb => {\r\n    const { oneButton } = this.props\r\n    //test\r\n    // oneButton._configButton.ConfirmMsg = \"Hello\"\r\n    if (oneButton && oneButton._configButton.ConfirmMsg) {\r\n      fnListUI.fnshowConfirm({\r\n        title: \"Confirm\",\r\n        msg: oneButton._configButton.ConfirmMsg,\r\n        onClickOK: () => {\r\n          if (cb) {\r\n            cb()\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb()\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    return (\r\n      <Button\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          this.onClick()\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonExt\r\n"],"sourceRoot":""}