{"version":3,"sources":["modules/adminpanel/MyTableFilterControl/Types/select2_modal.js","modules/adminpanel/MyTableFilterControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFilterControl.js","modules/adminpanel/hooks/useConfigTableFilterControl.js"],"names":["WrapCell","styled","div","MTFCSelect2Modal","props","ctfc","useConfigTableFilterControl","currentValue","more","KMore","multi","fnListMyTableFilterControl","fnGetTitleControl","fnList","className","onClick","Wrap","MTFCWrapControl","_title","oneFilterControl","title","HIs","isJsonString","_obj","HJson","getObj","children","fnListOfFilterControl","configFilterControl","_fnList","kfnGetTitleControl","refConfigFilterControl","React","useRef","current","type","refFnList","forceUpdate","useForceUpdate","custom","_fnGetFilterOutFromValue","MyTableFilterControlHelpers","ConfigByType","fn","value","setFnGetFilterOutFromValue","_loadFirst","setFromComponent","console","warn","loadLocal","clearValue","updateCurrentValue","fnListMyPage","fnGetOnePage","clear","updateData","v","getSourceData","optionKey","startsWith"],"mappings":"6PAQMA,EAAWC,IAAOC,IAAV,oSAuCC,SAASC,EAAiBC,GACvC,IAAMC,EAAOC,YAA4B,CAAEF,UAClBC,EAAjBE,aAGJF,EAAKG,MACHH,EAAKG,KAAKC,QAAMC,OAIFC,IAA2BC,kBAAkBP,EAAKQ,QACtE,OACE,cAAC,IAAD,2BAAiBT,GAAjB,aACE,cAACJ,EAAD,CACEc,UAAW,GACXC,QAAS,aAFX,4B,8GCzDAC,EAAOf,IAAOC,IAAV,sOAaK,SAASe,EAAgBb,GACtC,IAEIc,EAFyBd,EAArBe,iBAEsBC,MAC9B,GAAIC,MAAIC,aAAaJ,GAAS,CAC5B,IAAIK,EAAOC,QAAMC,OAAOP,EAAQ,IAC5BK,GAAQA,EAAKH,QACfF,EAASK,EAAKH,OAGlB,OACE,eAACJ,EAAD,CAAMF,UAAU,iBAAhB,UACE,8BAAMI,IACN,8BAAMd,EAAMsB,gB,0EC1BZC,EAAwB,YACU,IAA/BvB,EAA8B,EAA9BA,MAAOwB,EAAuB,EAAvBA,oBAGRC,EAAO,eACNzB,EAAMS,QAgBX,OAVAgB,EAAQC,KAAsB,WAC5B,IAAIZ,EAASU,EAAoBR,MACjC,GAAIC,MAAIC,aAAaJ,GAAS,CAC5B,IAAIK,EAAOC,QAAMC,OAAOP,EAAQ,IAC5BK,GAAQA,EAAKH,QACfF,EAASK,EAAKH,OAGlB,OAAOF,GAEFW,G,SCiGIvB,IAhHf,WAAsD,IAAD,yDAAJ,GAAVF,EAAc,EAAdA,MAE/B2B,EAAyBC,IAAMC,OAAO7B,EAAMe,kBAC5CS,EAAsBG,EAAuBG,QAC3CC,EAA6BP,EAA7BO,KAAM5B,EAAuBqB,EAAvBrB,aAAcC,EAASoB,EAATpB,KAGtB4B,EAAYJ,IAAMC,OACtBN,EAA2B,CAAEvB,QAAOwB,yBAEhCf,EAASuB,EAAUF,QAEnBG,EAAcC,cAkBpB,GAZIlC,EAAMmC,QACmC,MAAvCX,EAAmB,eACjBxB,EAAMmC,OAAO/B,OACfoB,EAAoBpB,KAApB,2BACKoB,EAAoBpB,MACpBJ,EAAMmC,OAAO/B,OAGpBoB,EAAmB,cAAmB,GAItCA,EAAqB,CACvB,GAAoD,MAAhDA,EAAoBY,yBACtB,GACEC,8BAA4BC,cAC5BD,8BAA4BC,aAAaP,GACzC,CACA,IAAMQ,EAAK,SAAAC,GACT,OAAOH,8BAA4BC,aAAaP,GAAzC,aACLS,EACAhB,IAGJA,EAAoBiB,2BAA2BF,QAC1C,GACLF,8BAA4BC,cAC5BD,8BAA4BC,aAA5B,SACA,CACA,IAAMC,EAAK,SAAAC,GACT,OAAOH,8BAA4BC,aAA5B,sBAELE,EAAOhB,IAEXA,EAAoBiB,2BAA2BF,IAGZ,IAAnCf,EAAoBkB,aAClBlB,EAAoBmB,kBACtBnB,EAAoBmB,iBAAiB,CACnCV,YAAa,WACXW,QAAQC,KAAK,iBACbZ,OAINT,EAAoBsB,YACpBtB,EAAoBkB,YAAa,GAKrC,MAAO,CACLT,cACAT,sBACArB,eACAC,OACAK,SACAsC,WAAY,WACV,GAAIvB,GAAuBA,EAAoBwB,mBAAoB,CACjEJ,QAAQC,KAAK,cAAe7C,EAAOwB,GACpByB,IAAaC,aAAazC,GACzCe,EAAoB2B,QACpB3B,EAAoBwB,mBAAmB,MAEzCf,KAEFmB,WAAY,SAAAC,GACN7B,GAAuBA,EAAoBwB,oBAC7CxB,EAAoBwB,mBAAmBK,GAEzCpB,KAEFqB,cAAe,WAGb,OACE9B,GACAA,EAAoB+B,WACpB/B,EAAoB+B,UAAUC,WAAW,KAElCpC,QAAMC,OAAOG,EAAoB+B,UAAW,IAEjD/B,GAAuBA,EAAoB8B,cACtC9B,EAAoB8B,gBAKtB","file":"static/js/143.2b80357e.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { MyUI, HUtils } from \"@macashipo/mlib\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigTableFilterControl from \"../../hooks/useConfigTableFilterControl\"\r\nimport styled from \"styled-components\"\r\nimport { FlowGetCustomDisplay, KMore } from \"src/helpers/Flows/TableCell\"\r\nimport { fnListMyTableFilterControl } from \"src/helpers/fnList\"\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  border-color: hsl(0, 0%, 80%);\r\n  border-radius: 4px;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  min-height: 38px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 5px;\r\n`\r\nfunction ModalSelectModal(props) {\r\n  const {\r\n    sourceData,\r\n    valueSelected,\r\n    onChange,\r\n    showSelectedOnFirstRow,\r\n    virtualized,\r\n  } = props\r\n  return (\r\n    <div style={{ maxHeight: \"calc(100vh - 5rem)\" }}>\r\n      <MyUI\r\n        type={\r\n          virtualized === true\r\n            ? \"select_box_search_virtualized\"\r\n            : \"select_box_search\"\r\n        }\r\n        sourceData={sourceData}\r\n        showSelectedOnFirstRow={showSelectedOnFirstRow}\r\n        valueSelected={valueSelected}\r\n        onChange={onChange}\r\n        inModal={true}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default function MTFCSelect2Modal(props) {\r\n  const ctfc = useConfigTableFilterControl({ props })\r\n  const { currentValue } = ctfc\r\n  let _isMulti = true\r\n  let _moreAttrs = {}\r\n  if (ctfc.more) {\r\n    if (ctfc.more[KMore.multi] == true) {\r\n      _isMulti = true\r\n    }\r\n  }\r\n  let _titleControl = fnListMyTableFilterControl.fnGetTitleControl(ctfc.fnList)\r\n  return (\r\n    <WrapControl {...props}>\r\n      <WrapCell\r\n        className={\"\"}\r\n        onClick={() => {\r\n          // MyModal.showFromComponent(\r\n          //   propsComponent => {\r\n          //     return (\r\n          //       <ModalSelectModal\r\n          //         {...propsComponent}\r\n          //         sourceData={ctfc.getSourceData()}\r\n          //         valueSelected={\"\"}\r\n          //         virtualized={false}\r\n          //         showSelectedOnFirstRow={false}\r\n          //         onChange={itemOption => {\r\n          //           console.warn(\"onChange:\", itemOption, itemOption.Value)\r\n          //           //hidemodal\r\n          //           // HUtils.runFuntion(propsComponent.fnList, \"hideModal\", [])\r\n          //         }}\r\n          //       />\r\n          //     )\r\n          //   },\r\n          //   {\r\n          //     title: `${_titleControl}`,\r\n          //     // backdrop: \"static\",\r\n          //     fnList: {\r\n          //       updateCell: (v, opts) => {\r\n          //         console.warn(\"Updatecell:\", v, opts)\r\n          //       },\r\n          //     },\r\n          //   }\r\n          // )\r\n        }}\r\n      >\r\n        Select...\r\n      </WrapCell>\r\n    </WrapControl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { HIs, HJson } from \"@macashipo/mlib\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  min-width: 300px;\r\n  & input {\r\n    padding: 0.25rem;\r\n    line-height: 1rem;\r\n    height: 1.5rem;\r\n  }\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MTFCWrapControl(props) {\r\n  const { oneFilterControl } = props\r\n  // console.warn(\"render MTFCWrapControl:\", props)\r\n  let _title = oneFilterControl.title\r\n  if (HIs.isJsonString(_title)) {\r\n    let _obj = HJson.getObj(_title, {})\r\n    if (_obj && _obj.title) {\r\n      _title = _obj.title\r\n    }\r\n  }\r\n  return (\r\n    <Wrap className=\"mtfcw-ap col-4\">\r\n      <div>{_title}</div>\r\n      <div>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { HIs, HJson } from \"@macashipo/mlib\"\r\nimport { kfnGetTitleControl } from \"src/helpers/fnList\"\r\n\r\nconst fnListOfFilterControl = {\r\n  init({ props, configFilterControl }) {\r\n    // const configFormControl = props.configFormControl || {}\r\n    // const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n    _fnList[kfnGetTitleControl] = () => {\r\n      let _title = configFilterControl.title\r\n      if (HIs.isJsonString(_title)) {\r\n        let _obj = HJson.getObj(_title, {})\r\n        if (_obj && _obj.title) {\r\n          _title = _obj.title\r\n        }\r\n      }\r\n      return _title\r\n    }\r\n    return _fnList\r\n  },\r\n}\r\n\r\nconst helpersOfFilterControl = {}\r\nexport { helpersOfFilterControl, fnListOfFilterControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HJson, MyTableFilterControlHelpers } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { fnListOfFilterControl } from \"./fnListOfFilterControl\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigTableFilterControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFilterControl = React.useRef(props.oneFilterControl)\r\n  const configFilterControl = refConfigFilterControl.current\r\n  const { type, currentValue, more } = configFilterControl //title, fieldName, optionKey, onePage\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n\r\n  const refFnList = React.useRef(\r\n    fnListOfFilterControl.init({ props, configFilterControl })\r\n  )\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  if (props.custom) {\r\n    if (configFilterControl[\"_applyCustom\"] == null) {\r\n      if (props.custom.more) {\r\n        configFilterControl.more = {\r\n          ...configFilterControl.more,\r\n          ...props.custom.more,\r\n        }\r\n      }\r\n      configFilterControl[\"_applyCustom\"] = true\r\n    }\r\n  }\r\n\r\n  if (configFilterControl) {\r\n    if (configFilterControl._fnGetFilterOutFromValue == null) {\r\n      if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[type]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[type][\"getFilterOut\"](\r\n            value,\r\n            configFilterControl\r\n          )\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      } else if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[\"_default\"]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[\"_default\"][\r\n            \"getFilterOut\"\r\n          ](value, configFilterControl)\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      }\r\n    }\r\n    if (configFilterControl._loadFirst !== false) {\r\n      if (configFilterControl.setFromComponent) {\r\n        configFilterControl.setFromComponent({\r\n          forceUpdate: () => {\r\n            console.warn(\"forceupdateee\")\r\n            forceUpdate()\r\n          },\r\n        })\r\n      }\r\n      configFilterControl.loadLocal()\r\n      configFilterControl._loadFirst = false\r\n      // console.warn(\"load first\", configFilterControl)\r\n    }\r\n  }\r\n\r\n  return {\r\n    forceUpdate,\r\n    configFilterControl,\r\n    currentValue,\r\n    more,\r\n    fnList,\r\n    clearValue: () => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        console.warn(\"clear Value\", props, configFilterControl)\r\n        let _onePage = fnListMyPage.fnGetOnePage(fnList)\r\n        configFilterControl.clear()\r\n        configFilterControl.updateCurrentValue(null)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    updateData: v => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        configFilterControl.updateCurrentValue(v)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    getSourceData: () => {\r\n      //bo sung source list tu json string Source\r\n      // console.warn(\"configFilterControl\", configFilterControl)\r\n      if (\r\n        configFilterControl &&\r\n        configFilterControl.optionKey &&\r\n        configFilterControl.optionKey.startsWith(\"[\")\r\n      ) {\r\n        return HJson.getObj(configFilterControl.optionKey, [])\r\n      }\r\n      if (configFilterControl && configFilterControl.getSourceData) {\r\n        return configFilterControl.getSourceData()\r\n      }\r\n      // if (onePage && onePage._dataOptions && onePage._dataOptions[optionKey]) {\r\n      //   return onePage._dataOptions[optionKey]\r\n      // }\r\n      return []\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigTableFilterControl\r\n"],"sourceRoot":""}