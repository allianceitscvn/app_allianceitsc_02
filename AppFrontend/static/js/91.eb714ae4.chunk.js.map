{"version":3,"sources":["modules/adminpanel/MyFormControl/Types/select_tag.js","modules/adminpanel/MyFormControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFormControl.js","modules/adminpanel/hooks/useConfigFormControl.js"],"names":["MFCText","props","cfc","useConfigFormControl","_isMulti","FlowGetMoreOfKey","configFormControl","key","KMore","multi","defaultValue","_values","valueControl","Array","isArray","_options","HUtils","runFuntion","fnList","console","log","Wrap","className","map","v","i","_isSelected","Value","classNames","onClick","updateValueControl","Text","styled","div","MFCWrapControl","noLabel","FlowGetCanShow","more","htmlWhenHide","type","html","_typeWrapControl","fnListMyFormControl","fnGetTypeWrapControl","_configWrapControl","configWrapControl","MyLayoutHelpers","Types","children","_styleWrapControl","styleWrapControl","style","styleLabel","label","styleControl","kgetSourceData","fnListOfFormControl","fieldName","_fnList","info","optionKey","sourceList","fnListMyForm","getSourceList","indexOf","_dataForm","getCurrentValues","AHOptions","kfnGetTypeWrapControl","_typeWrapControlFromMyForm","hasOwnProperty","typeWrapControl","refConfigFormControl","React","useRef","current","FlowMergeWithCustomProps","custom","defaultValues","getDefaultValues","useState","setValueControl","refFnList","forceUpdate","useForceUpdate","addFnListFromControl","kresetFormControl","warn","FlowFnListFromExtControl","keys","newValue","updateValueControlWithMoreFields","moreValues","Object","f","getDisabled","disabled","getMoreAttrs","_moreAttrs","autoComplete","String","placeholder","placeHolder","rows"],"mappings":"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","file":"static/js/91.eb714ae4.chunk.js","sourcesContent":["import React from \"react\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport { Alert } from \"reactstrap\"\r\nimport useConfigFormControl from \"../../hooks/useConfigFormControl\"\r\nimport {\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n  FlowGetPlaceHolder,\r\n} from \"src/helpers/Flows/FormControl\"\r\nimport styled from \"styled-components\"\r\nimport { Popover } from \"src/core/components\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport classNames from \"classnames\"\r\nexport default function MFCText(props) {\r\n  const cfc = useConfigFormControl({ props })\r\n  let _isMulti = FlowGetMoreOfKey({\r\n    configFormControl: cfc.configFormControl,\r\n    key: KMore.multi,\r\n    defaultValue: false,\r\n  })\r\n  let _values = cfc.valueControl\r\n  if (_isMulti) {\r\n    if (Array.isArray(_values) == false) {\r\n      _values = [_values]\r\n    }\r\n  }\r\n\r\n  let _options = HUtils.runFuntion(cfc.fnList, \"getSourceData\") || []\r\n  console.log(\"options:\", _options)\r\n  return (\r\n    <WrapControl cfc={cfc} {...props}>\r\n      <Wrap className=\"mfc-arrtext\">\r\n        {_options != null &&\r\n          _options.map((v, i) => {\r\n            let _isSelected = false\r\n            if (_values == v.Value) {\r\n              _isSelected = true\r\n            }\r\n            return (\r\n              <div\r\n                className={classNames(\"a-item\", { \"a-selected\": _isSelected })}\r\n                key={i}\r\n                onClick={() => {\r\n                  cfc.updateValueControl(v.Value)\r\n                }}\r\n              >\r\n                {v.Text}\r\n              </div>\r\n            )\r\n          })}\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  & > .a-item {\r\n    padding: 5px;\r\n    background: #ffffff;\r\n    border: 1px solid #d3d3d3;\r\n    border-radius: 4px;\r\n    margin-right: 5px;\r\n    position: relative;\r\n    cursor: pointer;\r\n    &.a-selected {\r\n      background: #c9e9ff;\r\n      border: 1px solid #7ec6f1;\r\n    }\r\n    &:hover {\r\n      background: #afdeff;\r\n      & > .a-remove {\r\n        display: block;\r\n      }\r\n    }\r\n  }\r\n  & > .a-add {\r\n    width: 28px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: #cfefcd;\r\n    height: 28px;\r\n    border-radius: 20px;\r\n    color: green;\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyLayout, MyLayoutHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport { fnListMyFormControl } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetCanShow,\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MFCWrapControl(props) {\r\n  const { cfc, noLabel } = props\r\n  //check can show\r\n  let _canShow = FlowGetCanShow({\r\n    configFormControl: cfc.configFormControl,\r\n    fnList: cfc.fnList,\r\n    more: cfc.more,\r\n  })\r\n  if (_canShow === false) {\r\n    if (cfc.more && cfc.more[KMore.htmlWhenHide]) {\r\n      return <MyUI type=\"html\" html={cfc.more[KMore.htmlWhenHide]} />\r\n    }\r\n    return null\r\n  }\r\n\r\n  let _typeWrapControl = fnListMyFormControl.fnGetTypeWrapControl(cfc.fnList)\r\n  let _configWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.configWrapControl,\r\n    }) || {}\r\n  // console.log(\"_typeWrapControl:\", _typeWrapControl)\r\n  if (MyLayoutHelpers.Types[_typeWrapControl]) {\r\n    return (\r\n      <MyLayout\r\n        type={_typeWrapControl}\r\n        cfc={cfc}\r\n        noLabel={noLabel}\r\n        children={props.children}\r\n        configWrapControl={_configWrapControl}\r\n      />\r\n    )\r\n  }\r\n  let _styleWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.styleWrapControl,\r\n      defaultValue: false,\r\n    }) || {}\r\n  // console.warn(\"render wrap:\", props, _styleWrapControl)\r\n  return (\r\n    <Wrap\r\n      className=\"mfcw-v1\"\r\n      style={{ ..._styleWrapControl, ..._configWrapControl.style }}\r\n    >\r\n      {noLabel !== true && (\r\n        <div style={_configWrapControl.styleLabel}>{cfc.label}</div>\r\n      )}\r\n      <div style={_configWrapControl.styleControl}>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { fnListMyForm, kfnGetTypeWrapControl } from \"src/helpers/fnList\"\r\nimport { HUtils, HIs } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport { KMore } from \"src/helpers/Flows/FormControl\"\r\nconst kgetSourceData = \"getSourceData\"\r\nconst fnListOfFormControl = {\r\n  init({ props }) {\r\n    const configFormControl = props.configFormControl || {}\r\n    const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n\r\n    _fnList[kgetSourceData] = () => {\r\n      console.info(kgetSourceData, fieldName)\r\n      if (more && more.optionKey) {\r\n        const sourceList = fnListMyForm.getSourceList(_fnList)\r\n        if (sourceList && sourceList[more.optionKey]) {\r\n          return sourceList[more.optionKey]\r\n        } else {\r\n          if (\r\n            more.optionKey.indexOf(\".\") > -1 &&\r\n            more.optionKey.indexOf(\"[\") > -1\r\n          ) {\r\n            //option multi\r\n            //\r\n            let _dataForm = fnListMyForm.getCurrentValues(_fnList)\r\n            return AHOptions.getOptionsByLevel(\r\n              sourceList,\r\n              more.optionKey,\r\n              _dataForm\r\n            )\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n    _fnList[kfnGetTypeWrapControl] = () => {\r\n      let _typeWrapControlFromMyForm =\r\n        fnListMyForm.fnGetTypeWrapControl(props.fnList) || \"\"\r\n      if (more && more.hasOwnProperty(KMore.typeWrapControl)) {\r\n        _typeWrapControlFromMyForm = more[KMore.typeWrapControl]\r\n      }\r\n      return _typeWrapControlFromMyForm\r\n    }\r\n    return _fnList\r\n  },\r\n  getSourceData() {},\r\n}\r\n\r\nconst helpersOfFormControl = {}\r\nexport { helpersOfFormControl, fnListOfFormControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport React, { useState } from \"react\"\r\nimport { fnListOfFormControl } from \"./fnListOfFormControl\"\r\nimport { fnListMyForm, kresetFormControl } from \"src/helpers/fnList\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowFnListFromExtControl,\r\n  FlowMergeWithCustomProps,\r\n} from \"src/helpers/Flows/FormControl\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigFormControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFormControl = React.useRef(props.configFormControl)\r\n  const configFormControl = refConfigFormControl.current || {}\r\n  const { label, fieldName } = configFormControl\r\n  FlowMergeWithCustomProps({ configFormControl, custom: props.custom })\r\n  const more = configFormControl.more || {}\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n  const defaultValues = fnListMyForm.getDefaultValues(props.fnList) || {}\r\n  // console.warn(\"defaultValues\", defaultValues)\r\n  const [valueControl, setValueControl] = useState(\r\n    defaultValues[fieldName] || \"\"\r\n  )\r\n  const refFnList = React.useRef(fnListOfFormControl.init({ props }))\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\")\r\n  //   if (countForceUpdate < countForceUpdateMax) setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      console.warn(\"reset form control\")\r\n      setValueControl(defaultValues[fieldName] || \"\")\r\n    },\r\n    fieldName,\r\n  ])\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    FlowFnListFromExtControl.keys.forceUpdate,\r\n    () => {\r\n      forceUpdate()\r\n    },\r\n    fieldName,\r\n  ])\r\n\r\n  return {\r\n    more: more,\r\n    forceUpdate,\r\n    configFormControl,\r\n    label,\r\n    defaultValues,\r\n    fieldName,\r\n    optionKey: more.optionKey,\r\n    valueControl,\r\n    fnList,\r\n    setValueControl,\r\n    updateValueControl: v => {\r\n      // console.warn(\"update value\", props)\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n      ])\r\n    },\r\n    updateValueControlWithMoreFields: (v, moreValues = {}) => {\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n        ...Object.keys(moreValues).map((f, i) => {\r\n          return {\r\n            fieldName: f,\r\n            newValue: moreValues[f],\r\n          }\r\n        }),\r\n      ])\r\n    },\r\n    getDisabled: () => {\r\n      return more.disabled === true\r\n    },\r\n    getMoreAttrs: () => {\r\n      let _moreAttrs = {}\r\n      // console.log(\"more:\", more)\r\n      if (more.autoComplete != null) {\r\n        _moreAttrs.autoComplete = String(more.autoComplete)\r\n        if (more.autoComplete === false) {\r\n          _moreAttrs.autoComplete = \"new-password\" //for chrome disabled autofill\r\n        }\r\n      }\r\n      if (more.placeholder) {\r\n        _moreAttrs.placeHolder = more.placeholder\r\n      }\r\n      if (more.disabled) {\r\n        _moreAttrs.disabled = more.disabled\r\n      }\r\n      if (more.rows) {\r\n        _moreAttrs.rows = more.rows\r\n      }\r\n      return _moreAttrs\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigFormControl\r\n"],"sourceRoot":""}