{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/quality.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","WrapList","WrapItem","MTCReadonly","props","ctc","useConfigTableCell","cell","sourceData","fnListMyTableCell","fnGetSourceData","fnList","getColor","value","_color","i","_item","Value","ColorCode","className","classNameWrap","style","styleWrap","background","onClick","canEdit","updateFieldData","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","type","onSendMsg","msg","console","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","useEffect","moreObj","v","opts","warn","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/126.6c755ee1.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { HIs } from \"@macashipo/mlib\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport styled from \"styled-components\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nconst WrapCell = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  // overflow: auto;\r\n  &.disabled .a-item {\r\n    cursor: unset;\r\n  }\r\n`\r\nconst WrapList = styled.div``\r\nconst WrapItem = styled.div`\r\n  cursor: pointer;\r\n  width: 20px;\r\n  height: 20px;\r\n  background: red;\r\n  border-radius: 50%;\r\n  margin: 2px;\r\n  opacity: 0.2;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  &.active {\r\n    opacity: 1;\r\n    border: ;\r\n  }\r\n`\r\nexport default function MTCReadonly(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const { cell } = props\r\n  const sourceData = fnListMyTableCell.fnGetSourceData(ctc.fnList)\r\n  const getColor = value => {\r\n    let _default = {\r\n      1: \"#ec5463\",\r\n      3: \"#fdcd55\",\r\n      5: \"#9ed269\",\r\n    }\r\n    let _color = _default[value] || \"#000000\"\r\n    if (sourceData != null) {\r\n      for (let i in sourceData) {\r\n        let _item = sourceData[i]\r\n        if (_item.Value == value && _item.ColorCode != null) {\r\n          _color = _item.ColorCode\r\n          break\r\n        }\r\n      }\r\n    }\r\n    return _color\r\n  }\r\n  return (\r\n    <WrapCell\r\n      className={ctc.classNameWrap(\"mct-quality\")}\r\n      style={ctc.styleWrap()}\r\n    >\r\n      <WrapList>\r\n        <WrapItem\r\n          style={{ background: getColor(\"1\") }}\r\n          className={cell == \"1\" ? \"a-item active\" : \"a-item\"}\r\n          onClick={() => {\r\n            if (ctc.canEdit) {\r\n              ctc.updateFieldData(\"1\")\r\n            }\r\n          }}\r\n        >\r\n          {cell == \"1\" && <i className=\"fa fa-times\" />}\r\n        </WrapItem>\r\n        <WrapItem\r\n          style={{ background: getColor(\"3\") }}\r\n          className={cell == \"3\" ? \"a-item active\" : \"a-item\"}\r\n          onClick={() => {\r\n            if (ctc.canEdit) {\r\n              ctc.updateFieldData(\"3\")\r\n            }\r\n          }}\r\n        >\r\n          {cell == \"3\" && <i className=\"fa fa-minus\" />}\r\n        </WrapItem>\r\n        <WrapItem\r\n          style={{ background: getColor(\"5\") }}\r\n          className={cell == \"5\" ? \"a-item active\" : \"a-item\"}\r\n          onClick={() => {\r\n            if (ctc.canEdit) {\r\n              ctc.updateFieldData(\"5\")\r\n            }\r\n          }}\r\n        >\r\n          {cell == \"5\" && <i className=\"fa fa-check\" />}\r\n        </WrapItem>\r\n      </WrapList>\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}