{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/date.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","isIsoDate","str","test","Date","toString","MTCDate","props","ctc","useConfigTableCell","_valueDate","valueCell","className","classNameWrap","type","value","onChange","v","console","warn","length","_date","updateFieldData","getTime","attrs","disabled","canEdit","getMoreAttrsFromCustomConfig","renderTopRight","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","useEffect","moreObj","opts","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","button","style","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/111.36ab3bd4.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { MyBase, HIs } from \"@macashipo/mlib\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nconst WrapCell = styled.div`\r\n  &.disabled {\r\n    cursor: normal;\r\n    background: #fafafa;\r\n  }\r\n  & input {\r\n    height: 100%;\r\n    border: 0px;\r\n    padding: 2px;\r\n    border-radius: 0px;\r\n    background: transparent !important;\r\n  }\r\n`\r\n\r\nexport const isIsoDate = str => {\r\n  if (\r\n    /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z?/.test(str) ||\r\n    /\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}/.test(str)\r\n  ) {\r\n    var d = new Date(str)\r\n    return d.toString() !== \"Invalid Date\"\r\n  }\r\n  return false\r\n}\r\n\r\nexport default function MTCDate(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCDate:\", props, ctc.valueCell)\r\n  let _valueDate =\r\n    ctc.valueCell && typeof ctc.valueCell === \"number\"\r\n      ? new Date(ctc.valueCell)\r\n      : null\r\n  if (_valueDate === null && isIsoDate(ctc.valueCell)) {\r\n    _valueDate = new Date(ctc.valueCell)\r\n  }\r\n  // console.warn(\"render MTCDate\", _valueDate)\r\n  return (\r\n    <WrapCell className={ctc.classNameWrap(\"mct-date\")}>\r\n      <MyBase\r\n        type=\"date_flatpickr\"\r\n        value={_valueDate}\r\n        onChange={v => {\r\n          console.warn(\"onChange:\", v)\r\n          if (v && v.length > 0) {\r\n            let _date = v[0]\r\n            ctc.updateFieldData(_date.getTime())\r\n          } else if (v && v.length == 0) {\r\n            //press delete when show date\r\n            ctc.updateFieldData(\"\")\r\n          }\r\n        }}\r\n        attrs={{\r\n          disabled: ctc.canEdit === true ? false : true,\r\n          ...ctc.getMoreAttrsFromCustomConfig(),\r\n        }}\r\n      />\r\n      {ctc.renderTopRight([], { ctc })}\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}