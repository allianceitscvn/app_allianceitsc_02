{"version":3,"sources":["modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","modules/adminpanel/MyUI/Types/html_editor.js","modules/adminpanel/MyTableCell/Types/html_editor.js"],"names":["kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","type","onSendMsg","msg","console","error","onReExpand","HUtils","runFuntion","ctc","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","className","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","props","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","useConfigTableCell","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","moreObj","updateFieldData","v","opts","warn","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","style","Object","keys","renderHide","classNameWrap","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist","WrapModal","styled","div","ModeType","ModalHtmlEditor","sourceData","valueSelected","onChange","moreProps","modeToolbar","setV","mode","setMode","isLoading","setIsLoading","maxHeight","renderHeader","inMyModal","Button","onClick","color","position","right","r","AHUI","htmlEditorLib","onBlur","value","attrs","WrapCell","MTCHtmlEditor","itemOption","Value","fnListMyTableCell","fnGetHeaderTitle","styleControl"],"mappings":"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","file":"static/js/119.791faed7.chunk.js","sourcesContent":["import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","import React from \"react\"\r\nimport { MyUI, HUtils, MyLib, MyBase } from \"@macashipo/mlib\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport styled from \"styled-components\"\r\nimport { Button } from \"reactstrap\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\n\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  & > div {\r\n    max-height: 100px;\r\n    overflow: auto;\r\n    & p {\r\n      // display: initial;\r\n      // vertical-align: text-top;\r\n      margin-bottom: 0px;\r\n      margin-block-start: 0px;\r\n      margin-block-end: 0;\r\n      line-height: 1rem;\r\n      text-indent: 0px;\r\n    }\r\n    & br {\r\n      display: initial;\r\n      vertical-align: text-top;\r\n    }\r\n  }\r\n`\r\nconst WrapModal = styled.div`\r\n  word-break: normal;\r\n  & .rdw-editor-main {\r\n    border: 1px solid #f1f1f1;\r\n    min-height: 100px;\r\n    max-height: 300px;\r\n    padding: 0px 5px;\r\n  }\r\n  & .a-mode-textarea textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n`\r\nconst ModeType = {\r\n  html: \"html\",\r\n  textarea: \"textarea\",\r\n}\r\n\r\nfunction ModalHtmlEditor(props) {\r\n  const {\r\n    sourceData,\r\n    valueSelected,\r\n    onChange,\r\n    valueCell,\r\n    fnList,\r\n    moreProps,\r\n    modeToolbar,\r\n  } = props\r\n  const [v, setV] = React.useState(valueCell || \"\")\r\n  const [mode, setMode] = React.useState(ModeType.html)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  // console.warn(\"props html editor:\", props)\r\n  return (\r\n    <WrapModal style={{ maxHeight: \"calc(100vh - 5rem)\" }}>\r\n      {MyModal.renderHeader({\r\n        cModal: props.inMyModal,\r\n        title: props => {\r\n          return (\r\n            <>\r\n              <div className=\"btn-group\">\r\n                <Button\r\n                  onClick={() => {\r\n                    setMode(ModeType.html)\r\n                  }}\r\n                  color={mode === ModeType.html ? \"primary\" : \"secondary\"}\r\n                >\r\n                  HTML\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    try {\r\n                      setMode(ModeType.textarea)\r\n                    } catch (error) {\r\n                      console.warn(\"parse json error!\")\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.textarea ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Code\r\n                </Button>\r\n              </div>\r\n              <div\r\n                className=\"btn-group\"\r\n                style={{ position: \"absolute\", right: \"3rem\" }}\r\n              >\r\n                <Button\r\n                  disabled={isLoading}\r\n                  onClick={() => {\r\n                    HUtils.runFuntion(fnList, \"updateCell\", [\r\n                      v,\r\n                      {\r\n                        cbSuccess: r => {\r\n                          console.warn(\"cbSuccess:\", r)\r\n                          setIsLoading(false)\r\n                          HUtils.runFuntion(fnList, \"hideModal\", [])\r\n                        },\r\n                        cbError: e => {\r\n                          console.warn(\"cbErrro:\", e)\r\n                          if (e.msg) {\r\n                            AHUI.showToastWarning(e.msg)\r\n                          }\r\n                          setIsLoading(false)\r\n                        },\r\n                      },\r\n                    ])\r\n                  }}\r\n                  color={\"success\"}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </div>\r\n            </>\r\n          )\r\n        },\r\n      })}\r\n      <div>\r\n        {mode === ModeType.html && (\r\n          <div className=\"a-mode-html\">\r\n            {props.htmlEditorLib == \"react-rte\" ? (\r\n              <MyLib\r\n                type=\"react_rte\"\r\n                html={v}\r\n                onChange={html => {\r\n                  setV(html)\r\n                }}\r\n                modeToolbar={modeToolbar}\r\n                moreProps={moreProps}\r\n              />\r\n            ) : (\r\n              <MyLib\r\n                type=\"draft_wysiwyg\"\r\n                html={v}\r\n                onBlur={({ html }) => {\r\n                  console.warn(\"AAA\", html)\r\n                  if (html != v) {\r\n                    setV(html)\r\n                  }\r\n                }}\r\n                modeToolbar={modeToolbar}\r\n                moreProps={moreProps}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n        {mode === ModeType.textarea && (\r\n          <div className=\"a-mode-textarea\">\r\n            <MyBase\r\n              type=\"textarea\"\r\n              value={v}\r\n              onChange={v => {\r\n                setV(v)\r\n              }}\r\n              attrs={{}}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </WrapModal>\r\n  )\r\n}\r\n\r\nexport default ModalHtmlEditor\r\n","import React from \"react\"\r\nimport { MyUI, HUtils, MyLib, MyBase } from \"@macashipo/mlib\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport styled from \"styled-components\"\r\nimport { Button } from \"reactstrap\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\nimport ModalHtmlEditor from \"../../MyUI/Types/html_editor\"\r\n\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  & > div {\r\n    max-height: 100px;\r\n    overflow: auto;\r\n    & p {\r\n      // display: initial;\r\n      // vertical-align: text-top;\r\n      margin-bottom: 0px;\r\n      margin-block-start: 0px;\r\n      margin-block-end: 0;\r\n      line-height: 1rem;\r\n      text-indent: 0px;\r\n    }\r\n    & br {\r\n      display: initial;\r\n      vertical-align: text-top;\r\n    }\r\n  }\r\n`\r\nconst WrapModal = styled.div`\r\n  & .rdw-editor-main {\r\n    border: 1px solid #f1f1f1;\r\n    min-height: 100px;\r\n    max-height: 300px;\r\n    padding: 0px 5px;\r\n  }\r\n  & .a-mode-textarea textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n`\r\n\r\nexport default function MTCHtmlEditor(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCText:\", props)\r\n  return (\r\n    <WrapCell\r\n      className={ctc.classNameWrap(\"mct-html_editor\")}\r\n      onClick={() => {\r\n        if (ctc.canEdit) {\r\n          MyModal.showFromComponent(\r\n            propsComponent => {\r\n              return (\r\n                <ModalHtmlEditor\r\n                  {...propsComponent}\r\n                  onChange={itemOption => {\r\n                    console.warn(\r\n                      \"onChange:\",\r\n                      itemOption,\r\n                      itemOption.Value,\r\n                      ctc.valueCell\r\n                    )\r\n                    HUtils.runFuntion(ctc, \"updateFieldData\", [\r\n                      itemOption.Value === ctc.valueCell\r\n                        ? \"\"\r\n                        : itemOption.Value,\r\n                      {},\r\n                    ])\r\n                    //hidemodal\r\n                    HUtils.runFuntion(propsComponent.fnList, \"hideModal\", [])\r\n                  }}\r\n                  ctc={ctc}\r\n                  valueCell={ctc.valueCell}\r\n                />\r\n              )\r\n            },\r\n            {\r\n              title: fnListMyTableCell.fnGetHeaderTitle(ctc.fnList),\r\n              showHeader: false,\r\n              backdrop: \"static\",\r\n              // backdrop: \"static\",\r\n              fnList: {\r\n                updateCell: (v, opts) => {\r\n                  console.warn(\"Updatecell:\", v, opts)\r\n                  ctc.updateFieldData(v, opts)\r\n                },\r\n              },\r\n            }\r\n          )\r\n        }\r\n      }}\r\n    >\r\n      <MyUI\r\n        type=\"html\"\r\n        html={ctc.valueCell}\r\n        style={{ ...ctc.more.styleControl }}\r\n      />\r\n    </WrapCell>\r\n  )\r\n}\r\n\r\nexport { ModalHtmlEditor }\r\n"],"sourceRoot":""}