{"version":3,"sources":["modules/adminpanel/MyFormControl/Types/layout_row.js","modules/adminpanel/MyFormControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFormControl.js","modules/adminpanel/hooks/useConfigFormControl.js"],"names":["Wrap","styled","div","MFCText","props","cfc","useConfigFormControl","_items","FlowGetMoreOfKey","configFormControl","key","KMore","items","defaultValue","console","warn","_ui","map","v","i","fnListMyForm","fnRenderFormControl","fnList","MFCWrapControl","noLabel","FlowGetCanShow","more","htmlWhenHide","type","html","_typeWrapControl","fnListMyFormControl","fnGetTypeWrapControl","_configWrapControl","configWrapControl","MyLayoutHelpers","Types","children","_styleWrapControl","styleWrapControl","className","style","styleLabel","label","styleControl","kgetSourceData","fnListOfFormControl","fieldName","_fnList","info","optionKey","sourceList","getSourceList","indexOf","_dataForm","getCurrentValues","AHOptions","kfnGetTypeWrapControl","_typeWrapControlFromMyForm","hasOwnProperty","typeWrapControl","refConfigFormControl","React","useRef","current","FlowMergeWithCustomProps","custom","defaultValues","getDefaultValues","useState","valueControl","setValueControl","refFnList","forceUpdate","useForceUpdate","addFnListFromControl","kresetFormControl","FlowFnListFromExtControl","keys","updateValueControl","HUtils","runFuntion","newValue","updateValueControlWithMoreFields","moreValues","Object","f","getDisabled","disabled","getMoreAttrs","_moreAttrs","autoComplete","String","placeholder","placeHolder","rows"],"mappings":"wOAMMA,EAAOC,IAAOC,IAAV,0IASK,SAASC,EAAQC,GAC9B,IAAMC,EAAMC,YAAqB,CAAEF,UAC/BG,EAASC,YAAiB,CAC5BC,kBAAmBJ,EAAII,kBACvBC,IAAKC,IAAMC,MACXC,aAAc,KAEhBC,QAAQC,KAAK,iBAAkBR,GAC/B,IAAIS,EAAM,GAMV,OALIT,IACFS,EAAMT,EAAOU,KAAI,SAACC,EAAGC,GACnB,OAAOC,IAAaC,oBAAoBhB,EAAIiB,OAAQ,CAACJ,EAAGC,QAGrD,cAACnB,EAAD,UAAOgB,M,oICpBVhB,EAAOC,IAAOC,IAAV,2HAOK,SAASqB,EAAenB,GACrC,IAAQC,EAAiBD,EAAjBC,IAAKmB,EAAYpB,EAAZoB,QAOb,IAAiB,IALFC,YAAe,CAC5BhB,kBAAmBJ,EAAII,kBACvBa,OAAQjB,EAAIiB,OACZI,KAAMrB,EAAIqB,OAGV,OAAIrB,EAAIqB,MAAQrB,EAAIqB,KAAKf,IAAMgB,cACtB,cAAC,OAAD,CAAMC,KAAK,OAAOC,KAAMxB,EAAIqB,KAAKf,IAAMgB,gBAEzC,KAGT,IAAIG,EAAmBC,IAAoBC,qBAAqB3B,EAAIiB,QAChEW,EACFzB,YAAiB,CACfC,kBAAmBJ,EAAII,kBACvBC,IAAKC,IAAMuB,qBACP,GAER,GAAIC,kBAAgBC,MAAMN,GACxB,OACE,cAAC,WAAD,CACEF,KAAME,EACNzB,IAAKA,EACLmB,QAASA,EACTa,SAAUjC,EAAMiC,SAChBH,kBAAmBD,IAIzB,IAAIK,EACF9B,YAAiB,CACfC,kBAAmBJ,EAAII,kBACvBC,IAAKC,IAAM4B,iBACX1B,cAAc,KACV,GAER,OACE,eAACb,EAAD,CACEwC,UAAU,UACVC,MAAK,2BAAOH,GAAsBL,EAAmBQ,OAFvD,WAIe,IAAZjB,GACC,qBAAKiB,MAAOR,EAAmBS,WAA/B,SAA4CrC,EAAIsC,QAElD,qBAAKF,MAAOR,EAAmBW,aAA/B,SAA8CxC,EAAMiC,gB,2GC5DpDQ,EAAiB,gBACjBC,EAAsB,YACT,IAAV1C,EAAS,EAATA,MACCK,EAAoBL,EAAMK,mBAAqB,GAC7CsC,EAAoBtC,EAApBsC,UAAWrB,EAASjB,EAATiB,KACfsB,EAAO,eACN5C,EAAMkB,QAuCX,OAhCA0B,EAAO,cAAmB,WAExB,GADAlC,QAAQmC,KAAKJ,EAAgBE,GACzBrB,GAAQA,EAAKwB,UAAW,CAC1B,IAAMC,EAAa/B,IAAagC,cAAcJ,GAC9C,GAAIG,GAAcA,EAAWzB,EAAKwB,WAChC,OAAOC,EAAWzB,EAAKwB,WAEvB,GACExB,EAAKwB,UAAUG,QAAQ,MAAQ,GAC/B3B,EAAKwB,UAAUG,QAAQ,MAAQ,EAC/B,CAGA,IAAIC,EAAYlC,IAAamC,iBAAiBP,GAC9C,OAAOQ,IACLL,EACAzB,EAAKwB,UACLI,IAKR,MAAO,IAETN,EAAQS,KAAyB,WAC/B,IAAIC,EACFtC,IAAaY,qBAAqB5B,EAAMkB,SAAW,GAIrD,OAHII,GAAQA,EAAKiC,eAAehD,IAAMiD,mBACpCF,EAA6BhC,EAAKf,IAAMiD,kBAEnCF,GAEFV,G,SCgEI1C,IApGf,WAA+C,IAAD,yDAAJ,GAAVF,EAAc,EAAdA,MAExByD,EAAuBC,IAAMC,OAAO3D,EAAMK,mBAC1CA,EAAoBoD,EAAqBG,SAAW,GAClDrB,EAAqBlC,EAArBkC,MAAOI,EAActC,EAAdsC,UACfkB,YAAyB,CAAExD,oBAAmByD,OAAQ9D,EAAM8D,SAC5D,IAAMxC,EAAOjB,EAAkBiB,MAAQ,GAEjCyC,EAAgB/C,IAAagD,iBAAiBhE,EAAMkB,SAAW,GAErE,EAAwC+C,mBACtCF,EAAcpB,IAAc,IAD9B,mBAAOuB,EAAP,KAAqBC,EAArB,KAGMC,EAAYV,IAAMC,OAAOjB,EAAyB,CAAE1C,WACpDkB,EAASkD,EAAUR,QAEnBS,EAAcC,cAsBpB,OAhBAtD,IAAauD,qBAAqBrD,EAAQ,CACxCsD,KACA,WACE9D,QAAQC,KAAK,sBACbwD,EAAgBJ,EAAcpB,IAAc,KAE9CA,IAEF3B,IAAauD,qBAAqBrD,EAAQ,CACxCuD,IAAyBC,KAAKL,YAC9B,WACEA,KAEF1B,IAGK,CACLrB,KAAMA,EACN+C,cACAhE,oBACAkC,QACAwB,gBACApB,YACAG,UAAWxB,EAAKwB,UAChBoB,eACAhD,SACAiD,kBACAQ,mBAAoB,SAAA7D,GAElBqD,EAAgBrD,GAChB8D,SAAOC,WAAW3D,EAAQ,gBAAiB,CACzC,CACEyB,UAAWA,EACXmC,SAAUhE,MAIhBiE,iCAAkC,SAACjE,GAAwB,IAArBkE,EAAoB,uDAAP,GACjDb,EAAgBrD,GAChB8D,SAAOC,WAAW3D,EAAQ,gBAA1B,CACE,CACEyB,UAAWA,EACXmC,SAAUhE,IAHd,mBAKKmE,OAAOP,KAAKM,GAAYnE,KAAI,SAACqE,EAAGnE,GACjC,MAAO,CACL4B,UAAWuC,EACXJ,SAAUE,EAAWE,WAK7BC,YAAa,WACX,OAAyB,IAAlB7D,EAAK8D,UAEdC,aAAc,WACZ,IAAIC,EAAa,GAiBjB,OAfyB,MAArBhE,EAAKiE,eACPD,EAAWC,aAAeC,OAAOlE,EAAKiE,eACZ,IAAtBjE,EAAKiE,eACPD,EAAWC,aAAe,iBAG1BjE,EAAKmE,cACPH,EAAWI,YAAcpE,EAAKmE,aAE5BnE,EAAK8D,WACPE,EAAWF,SAAW9D,EAAK8D,UAEzB9D,EAAKqE,OACPL,EAAWK,KAAOrE,EAAKqE,MAElBL","file":"static/js/86.61f47fd7.chunk.js","sourcesContent":["import React from \"react\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigFormControl from \"../../hooks/useConfigFormControl\"\r\nimport { FlowGetMoreOfKey, KMore } from \"src/helpers/Flows/FormControl\"\r\nimport styled from \"styled-components\"\r\nimport { fnListMyForm } from \"src/helpers/fnList\"\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n  & > div:not(:last-child) {\r\n    margin-right: 1rem;\r\n  }\r\n`\r\nexport default function MFCText(props) {\r\n  const cfc = useConfigFormControl({ props })\r\n  let _items = FlowGetMoreOfKey({\r\n    configFormControl: cfc.configFormControl,\r\n    key: KMore.items,\r\n    defaultValue: [],\r\n  })\r\n  console.warn(\"render layout:\", _items)\r\n  let _ui = []\r\n  if (_items) {\r\n    _ui = _items.map((v, i) => {\r\n      return fnListMyForm.fnRenderFormControl(cfc.fnList, [v, i])\r\n    })\r\n  }\r\n  return <Wrap>{_ui}</Wrap>\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyLayout, MyLayoutHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport { fnListMyFormControl } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetCanShow,\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MFCWrapControl(props) {\r\n  const { cfc, noLabel } = props\r\n  //check can show\r\n  let _canShow = FlowGetCanShow({\r\n    configFormControl: cfc.configFormControl,\r\n    fnList: cfc.fnList,\r\n    more: cfc.more,\r\n  })\r\n  if (_canShow === false) {\r\n    if (cfc.more && cfc.more[KMore.htmlWhenHide]) {\r\n      return <MyUI type=\"html\" html={cfc.more[KMore.htmlWhenHide]} />\r\n    }\r\n    return null\r\n  }\r\n\r\n  let _typeWrapControl = fnListMyFormControl.fnGetTypeWrapControl(cfc.fnList)\r\n  let _configWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.configWrapControl,\r\n    }) || {}\r\n  // console.log(\"_typeWrapControl:\", _typeWrapControl)\r\n  if (MyLayoutHelpers.Types[_typeWrapControl]) {\r\n    return (\r\n      <MyLayout\r\n        type={_typeWrapControl}\r\n        cfc={cfc}\r\n        noLabel={noLabel}\r\n        children={props.children}\r\n        configWrapControl={_configWrapControl}\r\n      />\r\n    )\r\n  }\r\n  let _styleWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.styleWrapControl,\r\n      defaultValue: false,\r\n    }) || {}\r\n  // console.warn(\"render wrap:\", props, _styleWrapControl)\r\n  return (\r\n    <Wrap\r\n      className=\"mfcw-v1\"\r\n      style={{ ..._styleWrapControl, ..._configWrapControl.style }}\r\n    >\r\n      {noLabel !== true && (\r\n        <div style={_configWrapControl.styleLabel}>{cfc.label}</div>\r\n      )}\r\n      <div style={_configWrapControl.styleControl}>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { fnListMyForm, kfnGetTypeWrapControl } from \"src/helpers/fnList\"\r\nimport { HUtils, HIs } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport { KMore } from \"src/helpers/Flows/FormControl\"\r\nconst kgetSourceData = \"getSourceData\"\r\nconst fnListOfFormControl = {\r\n  init({ props }) {\r\n    const configFormControl = props.configFormControl || {}\r\n    const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n\r\n    _fnList[kgetSourceData] = () => {\r\n      console.info(kgetSourceData, fieldName)\r\n      if (more && more.optionKey) {\r\n        const sourceList = fnListMyForm.getSourceList(_fnList)\r\n        if (sourceList && sourceList[more.optionKey]) {\r\n          return sourceList[more.optionKey]\r\n        } else {\r\n          if (\r\n            more.optionKey.indexOf(\".\") > -1 &&\r\n            more.optionKey.indexOf(\"[\") > -1\r\n          ) {\r\n            //option multi\r\n            //\r\n            let _dataForm = fnListMyForm.getCurrentValues(_fnList)\r\n            return AHOptions.getOptionsByLevel(\r\n              sourceList,\r\n              more.optionKey,\r\n              _dataForm\r\n            )\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n    _fnList[kfnGetTypeWrapControl] = () => {\r\n      let _typeWrapControlFromMyForm =\r\n        fnListMyForm.fnGetTypeWrapControl(props.fnList) || \"\"\r\n      if (more && more.hasOwnProperty(KMore.typeWrapControl)) {\r\n        _typeWrapControlFromMyForm = more[KMore.typeWrapControl]\r\n      }\r\n      return _typeWrapControlFromMyForm\r\n    }\r\n    return _fnList\r\n  },\r\n  getSourceData() {},\r\n}\r\n\r\nconst helpersOfFormControl = {}\r\nexport { helpersOfFormControl, fnListOfFormControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport React, { useState } from \"react\"\r\nimport { fnListOfFormControl } from \"./fnListOfFormControl\"\r\nimport { fnListMyForm, kresetFormControl } from \"src/helpers/fnList\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowFnListFromExtControl,\r\n  FlowMergeWithCustomProps,\r\n} from \"src/helpers/Flows/FormControl\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigFormControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFormControl = React.useRef(props.configFormControl)\r\n  const configFormControl = refConfigFormControl.current || {}\r\n  const { label, fieldName } = configFormControl\r\n  FlowMergeWithCustomProps({ configFormControl, custom: props.custom })\r\n  const more = configFormControl.more || {}\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n  const defaultValues = fnListMyForm.getDefaultValues(props.fnList) || {}\r\n  // console.warn(\"defaultValues\", defaultValues)\r\n  const [valueControl, setValueControl] = useState(\r\n    defaultValues[fieldName] || \"\"\r\n  )\r\n  const refFnList = React.useRef(fnListOfFormControl.init({ props }))\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\")\r\n  //   if (countForceUpdate < countForceUpdateMax) setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      console.warn(\"reset form control\")\r\n      setValueControl(defaultValues[fieldName] || \"\")\r\n    },\r\n    fieldName,\r\n  ])\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    FlowFnListFromExtControl.keys.forceUpdate,\r\n    () => {\r\n      forceUpdate()\r\n    },\r\n    fieldName,\r\n  ])\r\n\r\n  return {\r\n    more: more,\r\n    forceUpdate,\r\n    configFormControl,\r\n    label,\r\n    defaultValues,\r\n    fieldName,\r\n    optionKey: more.optionKey,\r\n    valueControl,\r\n    fnList,\r\n    setValueControl,\r\n    updateValueControl: v => {\r\n      // console.warn(\"update value\", props)\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n      ])\r\n    },\r\n    updateValueControlWithMoreFields: (v, moreValues = {}) => {\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n        ...Object.keys(moreValues).map((f, i) => {\r\n          return {\r\n            fieldName: f,\r\n            newValue: moreValues[f],\r\n          }\r\n        }),\r\n      ])\r\n    },\r\n    getDisabled: () => {\r\n      return more.disabled === true\r\n    },\r\n    getMoreAttrs: () => {\r\n      let _moreAttrs = {}\r\n      // console.log(\"more:\", more)\r\n      if (more.autoComplete != null) {\r\n        _moreAttrs.autoComplete = String(more.autoComplete)\r\n        if (more.autoComplete === false) {\r\n          _moreAttrs.autoComplete = \"new-password\" //for chrome disabled autofill\r\n        }\r\n      }\r\n      if (more.placeholder) {\r\n        _moreAttrs.placeHolder = more.placeholder\r\n      }\r\n      if (more.disabled) {\r\n        _moreAttrs.disabled = more.disabled\r\n      }\r\n      if (more.rows) {\r\n        _moreAttrs.rows = more.rows\r\n      }\r\n      return _moreAttrs\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigFormControl\r\n"],"sourceRoot":""}