{"version":3,"sources":["modules/adminpanel/MyButton/Types/form.tsx","helpers/Flows/Button.js","modules/adminpanel/MyButton/Types/ext.tsx"],"names":["MyButtonLink","_requestApi","customQuery","props","oneButton","fnList","changeIsLoading","Promise","resolve","reject","HApi","apiGeneric","getApiRequest","data","getApiQuery","fnListMyPage","fnGetSharedRequestData","then","res","console","warn","HQuery","parseResponseButtonApi","_moreObj","parseResponseWhenSuccess","catch","err","_showForm","defaultValues","configForm","FlowGetConfigFormFromConfigServer","_configButton","Form","moreDefaultValues","onSubmitForm","currentValues","MyModal","showFromMyForm","title","backdrop","modalScrollInside","size","_checkShowForm","FlowCheckShowModal","cb","result","this","getMorePropsButton","onClick","getTitleDisplay","MyButtonExt","KMoreOfButton","apiCheckShowModal","acceptType","apiUrlAfter","tooltip","_configCheckShow","_request","method","url","path","name","ApiGeneric","request","successCallBack","response","_config","HUtils","get","IsShow","FormData","errorCallBack","error","NeedReload","fnReloadPage","NeedReloadList","fnReloadList","_moreProps","checkConfirmMsg","ConfirmMsg","fnListUI","fnshowConfirm","msg","onClickOK","state","setFromComponent","React","Component"],"mappings":"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","file":"static/js/66.2e763ee3.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { HApi, HQuery } from \"src/core/helpers\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport MyFormControlHelpers from \"src/core/components/MyForm/MyFormControlHelpers\"\r\nimport MyButtonExt from \"./ext\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { FlowCheckShowModal, KMoreOfButton } from \"src/helpers/Flows/Button\"\r\nimport { FlowGetConfigFormFromConfigServer } from \"src/helpers/Flows/Form\"\r\nclass MyButtonLink extends MyButtonExt {\r\n  componentDidMount() {}\r\n  _requestApi = customQuery => {\r\n    const { oneButton, fnList } = this.props\r\n    oneButton.changeIsLoading(true)\r\n    return new Promise((resolve, reject) => {\r\n      HApi.apiGeneric({\r\n        ...oneButton.getApiRequest(),\r\n        data: oneButton.getApiQuery({\r\n          ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n          ...customQuery,\r\n        }),\r\n      })\r\n        .then(res => {\r\n          console.warn(\"res\", res)\r\n          HQuery.parseResponseButtonApi(res, oneButton._moreObj)\r\n          this.parseResponseWhenSuccess(res)\r\n          oneButton.changeIsLoading(false)\r\n          resolve(res)\r\n        })\r\n        .catch(err => {\r\n          oneButton.changeIsLoading(false)\r\n          reject(err)\r\n        })\r\n    })\r\n  }\r\n  _showForm = ({ defaultValues }: any = {}) => {\r\n    const { oneButton, fnList } = this.props\r\n    console.warn(\"show form\", this, defaultValues)\r\n    const configForm = FlowGetConfigFormFromConfigServer(\r\n      oneButton._configButton.Form,\r\n      {\r\n        defaultValues: null,\r\n        fnList,\r\n        moreDefaultValues: defaultValues,\r\n      }\r\n    )\r\n    if (configForm) {\r\n      configForm.fnList = {\r\n        ...fnList,\r\n        onSubmitForm: (currentValues, { defaultValues }) => {\r\n          console.warn(\"submit:\", currentValues)\r\n          return this._requestApi(currentValues)\r\n        },\r\n      }\r\n      MyModal.showFromMyForm(configForm, {\r\n        title: configForm.title || \"Form\",\r\n        backdrop: \"static\",\r\n        modalScrollInside: true,\r\n        size: \"md\",\r\n      })\r\n    }\r\n  }\r\n  _checkShowForm = () => {\r\n    const { oneButton, fnList } = this.props\r\n    FlowCheckShowModal({\r\n      oneButton,\r\n      fnList,\r\n      customQuery: null,\r\n      cb: ({ result, data }) => {\r\n        if (result) {\r\n          this._showForm({\r\n            defaultValues: data,\r\n          })\r\n        }\r\n      },\r\n    })\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    // console.warn(\"render Button form\", this.props)\r\n    return (\r\n      <Button\r\n        {...this.getMorePropsButton()}\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          this._checkShowForm()\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonLink\r\n","import { ApiGeneric } from \"src/services/apiServices\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nexport const KMoreOfButton = {\r\n  apiCheckShowModal: \"apiCheckShowModal\",\r\n  acceptType: \"acceptType\", //upload\r\n  apiUrlAfter: \"apiUrlAfter\", //upload\r\n  title: \"title\", //show title cua button\r\n  tooltip: \"tooltip\", //show tooltip cua button, chua su dung\r\n}\r\n\r\nexport const FlowCheckShowModal = ({\r\n  oneButton,\r\n  fnList,\r\n  customQuery,\r\n  cb,\r\n} = {}) => {\r\n  if (oneButton) {\r\n    let _configCheckShow = oneButton._moreObj[KMoreOfButton.apiCheckShowModal]\r\n    if (_configCheckShow) {\r\n      oneButton.changeIsLoading(true)\r\n      let _request = {\r\n        method: \"POST\",\r\n        url: _configCheckShow.url,\r\n        path: _configCheckShow.path,\r\n        name: _configCheckShow.name,\r\n      }\r\n      ApiGeneric({\r\n        request: _request,\r\n        data: oneButton.getApiQuery({\r\n          ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n          ...customQuery,\r\n        }),\r\n        successCallBack: response => {\r\n          console.warn(\"response\", response)\r\n          let _config = HUtils.get(response, \"Data.Config\")\r\n          if (_config && _config.IsShow) {\r\n            if (cb) {\r\n              cb({\r\n                result: true,\r\n                data: _config.FormData || {},\r\n              })\r\n            }\r\n          } else {\r\n            if (cb) {\r\n              cb({\r\n                result: false,\r\n              })\r\n            }\r\n          }\r\n          oneButton.changeIsLoading(false)\r\n        },\r\n        errorCallBack: (error, response) => {\r\n          oneButton.changeIsLoading(false)\r\n          if (cb) {\r\n            cb({\r\n              result: false,\r\n            })\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb({\r\n          result: true,\r\n        })\r\n      }\r\n    }\r\n  } else {\r\n    if (cb) {\r\n      cb({\r\n        result: true,\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { OneButton } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { KMoreOfButton } from \"src/helpers/Flows/Button\"\r\nimport { fnListMyPage, fnListUI } from \"src/helpers/fnList\"\r\ninterface IProps {\r\n  oneButton: OneButton\r\n  fnList?: any\r\n}\r\nclass MyButtonExt extends React.Component<IProps> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    const { oneButton } = this.props\r\n    oneButton.setFromComponent(this)\r\n  }\r\n  componentDidMount() {}\r\n  onClick = () => {}\r\n  parseResponseWhenSuccess = (res: any) => {\r\n    const { oneButton, fnList } = this.props\r\n    if (oneButton._configButton.NeedReload) {\r\n      fnListMyPage.fnReloadPage(fnList)\r\n    } else if (oneButton._configButton.NeedReloadList) {\r\n      fnListMyPage.fnReloadList(fnList)\r\n    }\r\n  }\r\n  getMorePropsButton = () => {\r\n    const { oneButton } = this.props\r\n    let _moreProps: any = {}\r\n    if (oneButton && oneButton._moreObj) {\r\n      if (oneButton._moreObj[KMoreOfButton.title]) {\r\n        _moreProps.title = oneButton._moreObj[KMoreOfButton.title]\r\n      }\r\n    }\r\n    return _moreProps\r\n  }\r\n  checkConfirmMsg = cb => {\r\n    const { oneButton } = this.props\r\n    //test\r\n    // oneButton._configButton.ConfirmMsg = \"Hello\"\r\n    if (oneButton && oneButton._configButton.ConfirmMsg) {\r\n      fnListUI.fnshowConfirm({\r\n        title: \"Confirm\",\r\n        msg: oneButton._configButton.ConfirmMsg,\r\n        onClickOK: () => {\r\n          if (cb) {\r\n            cb()\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb()\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    return (\r\n      <Button\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          this.onClick()\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonExt\r\n"],"sourceRoot":""}