{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/delete.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","WrapContentUI","MTCDeletePopover","props","ctc","row","title","msg","msgHtml","deleteWithNote","refNote","updateNote","useRef","_contentMsg","type","html","data","_contentUI","onChange","value","current","attrs","rows","autoFocus","placeholder","style","width","maxHeight","maxWidth","styleBody","whiteSpace","colorOK","onOK","console","warn","_moreQuery","Note","HUtils","runFuntion","oneTableCell","fnList","moreQuery","cbSuccess","hide","onCancel","MTCDelete","useConfigTableCell","moreObj","_defaultObj","canDelete","fnListMyPage","fnGetConfigPageTable","KConfigPageTable","deleteTitle","i18next","t","deleteContent","deleteContentHtml","fCanDeleteFromTableConfig","fDelete","fCanDeleteFromMore","IsLocked","indexOf","getTextWithData","className","overlay","propsOverlay","overlayClassName","placement","destroyTooltipOnHide","color","outline","onClick","kfnGetScreenCode","fnListOfTableCell","_fnList","kfnGetSourceData","extra","_optionKey","Type","source","_sourceList","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","error","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","OneTableCell","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","canEdit","useEffect","updateFieldData","v","opts","cbError","apiController","fnGetApiPath","newValue","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","Object","keys","renderHide","classNameWrap","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","cModal","finally","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","mergeObjIfExist"],"mappings":"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","file":"static/js/113.ca063c50.chunk.js","sourcesContent":["import { HUtils, MyBase, MyUI } from \"@macashipo/mlib\"\r\nimport React, { useRef } from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { Popover } from \"src/core/components\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { KConfigPageTable } from \"src/helpers/K\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport i18next from \"i18next\"\r\n\r\nconst WrapCell = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  & button {\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    word-break: break-all;\r\n    width: 100%;\r\n    border: 0px;\r\n    padding: 5px 2px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 1.5rem;\r\n    height: 36px;\r\n  }\r\n`\r\nconst WrapContentUI = styled.div`\r\n  & textarea {\r\n    width: 100%;\r\n    border: 1px solid #e8e9ea;\r\n    border-radius: 4px;\r\n    outline: none;\r\n    &:focus {\r\n      outline: none !important;\r\n      border-color: #719ece;\r\n      box-shadow: 0 0 2px #0072ff;\r\n    }\r\n  }\r\n`\r\n\r\nfunction MTCDeletePopover(props) {\r\n  const { ctc, row, title, msg, msgHtml, deleteWithNote, updateNote } = props\r\n  const refNote = useRef(\"\")\r\n  let _contentMsg = msg\r\n  if (msgHtml) {\r\n    _contentMsg = <MyUI type=\"html\" html={msgHtml} data={row} />\r\n  }\r\n  let _contentUI = _contentMsg\r\n  if (deleteWithNote) {\r\n    _contentUI = (\r\n      <WrapContentUI>\r\n        {_contentMsg}\r\n        <MyBase\r\n          type=\"textarea\"\r\n          onChange={value => {\r\n            // console.log(\"onChange:\", value)\r\n            refNote.current = value\r\n          }}\r\n          attrs={{\r\n            rows: 3,\r\n            autoFocus: true,\r\n            placeholder: \"Note\",\r\n          }}\r\n        />\r\n      </WrapContentUI>\r\n    )\r\n  }\r\n  return (\r\n    <div style={{ width: \"250px\", maxHeight: \"300px\", maxWidth: \"300px\" }}>\r\n      <MyUI\r\n        type={\"msgbox_confirm\"}\r\n        styleBody={{ whiteSpace: \"pre-wrap\" }}\r\n        title={title}\r\n        msg={_contentUI}\r\n        colorOK=\"danger\"\r\n        onOK={() => {\r\n          console.warn(\"onOK\", props)\r\n          let _moreQuery = {}\r\n          if (refNote.current) {\r\n            _moreQuery.Note = refNote.current\r\n          }\r\n          HUtils.runFuntion(ctc.oneTableCell.fnList, \"fnRequestDelete\", [\r\n            {\r\n              row,\r\n              moreQuery: _moreQuery,\r\n              cbSuccess: () => {\r\n                HUtils.runFuntion(ctc.oneTableCell.fnList, \"fnDeleteItem\", [\r\n                  row,\r\n                ])\r\n              },\r\n            },\r\n          ])\r\n          if (props.hide) {\r\n            props.hide()\r\n          }\r\n        }}\r\n        onCancel={() => {\r\n          console.warn(\"onCancel\")\r\n          if (props.hide) {\r\n            props.hide()\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function MTCDelete(props) {\r\n  const { row } = props\r\n  const ctc = useConfigTableCell({ props })\r\n  const { moreObj } = ctc\r\n  // console.warn(\"render MTCDelete:\", props, ctc)\r\n  if (ctc.oneTableCell[\"_cellDelete\"] == null) {\r\n    let _defaultObj = {\r\n      canDelete: true,\r\n      title: fnListMyPage.fnGetConfigPageTable(ctc.fnList, [\r\n        KConfigPageTable.deleteTitle,\r\n        i18next.t(\"Delete\"),\r\n      ]),\r\n      msg: fnListMyPage.fnGetConfigPageTable(ctc.fnList, [\r\n        KConfigPageTable.deleteContent,\r\n        i18next.t(\"Are you sure you want to delete\"),\r\n      ]),\r\n      msgHtml: fnListMyPage.fnGetConfigPageTable(ctc.fnList, [\r\n        KConfigPageTable.deleteContentHtml,\r\n        null,\r\n      ]),\r\n      deleteWithNote: fnListMyPage.fnGetConfigPageTable(ctc.fnList, [\r\n        KConfigPageTable.deleteWithNote,\r\n        null,\r\n      ]),\r\n      fCanDeleteFromTableConfig: fnListMyPage.fnGetConfigPageTable(ctc.fnList, [\r\n        KConfigPageTable.fDelete,\r\n        null,\r\n      ]),\r\n      fCanDeleteFromMore: moreObj.fDelete,\r\n    }\r\n\r\n    //canDelete\r\n\r\n    //title\r\n    //\r\n    ctc.oneTableCell[\"_cellDelete\"] = _defaultObj\r\n  }\r\n\r\n  let {\r\n    title,\r\n    msg,\r\n    msgHtml,\r\n    deleteWithNote,\r\n    canDelete,\r\n    fCanDeleteFromMore,\r\n    fCanDeleteFromTableConfig,\r\n  } = ctc.oneTableCell[\"_cellDelete\"] || {}\r\n  //chay theo row\r\n  //check candelete\r\n  if (row.IsLocked) {\r\n    canDelete = false\r\n  }\r\n  if (\r\n    canDelete &&\r\n    fCanDeleteFromTableConfig &&\r\n    row[fCanDeleteFromTableConfig] === false\r\n  ) {\r\n    canDelete = false\r\n  }\r\n  if (canDelete && fCanDeleteFromMore && row[fCanDeleteFromMore] === false) {\r\n    canDelete = false\r\n  }\r\n  //check title\r\n  if (title.indexOf(\"[\") > -1) {\r\n    title = HUtils.getTextWithData(title, row)\r\n  }\r\n  if (msg.indexOf(\"[\") > -1) {\r\n    msg = HUtils.getTextWithData(msg, row)\r\n  }\r\n  return (\r\n    <WrapCell className=\"mtc-api\">\r\n      {canDelete === true && (\r\n        <Popover\r\n          overlay={propsOverlay => {\r\n            return (\r\n              <MTCDeletePopover\r\n                ctc={ctc}\r\n                {...props}\r\n                {...propsOverlay}\r\n                title={title}\r\n                msg={msg}\r\n                msgHtml={msgHtml}\r\n                deleteWithNote={deleteWithNote}\r\n              />\r\n            )\r\n          }}\r\n          overlayClassName=\"m-popover\"\r\n          placement=\"topRight\"\r\n          destroyTooltipOnHide={true}\r\n        >\r\n          <Button\r\n            title={title}\r\n            color=\"danger\"\r\n            outline\r\n            onClick={() => {\r\n              console.warn(\"onDelete\")\r\n            }}\r\n          >\r\n            <i className=\"fa fa-trash\"></i>\r\n          </Button>\r\n        </Popover>\r\n      )}\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}