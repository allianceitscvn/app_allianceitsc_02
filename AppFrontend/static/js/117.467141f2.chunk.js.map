{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/form.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","MTCForm","props","ctc","useConfigTableCell","fnListMyTableCell","fnGetIsHide","fnList","renderHide","className","classNameWrap","style","styleWrap","title","cell","color","outline","onClick","onClickForm","getMorePropsButton","isFetching","type","FlowGetTextDisplay","isButton","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","console","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","moreObj","updateFieldData","v","opts","warn","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","defaultStyle","_moreProps","_style","disabled","button","Object","keys","customConfig","cls","scrwhhover","styledMini","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/117.467141f2.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { FlowGetTextDisplay } from \"src/helpers/Flows/TableCell\"\r\nimport { MyLoading } from \"src/core/components\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nconst WrapCell = styled.div`\r\n  padding: 2px;\r\n  & button {\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    word-break: break-all;\r\n    width: 100%;\r\n    // border: 0px;\r\n    height: 100%;\r\n  }\r\n`\r\nexport default function MTCForm(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCForm:\", props, ctc)\r\n  if (fnListMyTableCell.fnGetIsHide(ctc.fnList)) {\r\n    return ctc.renderHide()\r\n  }\r\n  return (\r\n    <WrapCell className={ctc.classNameWrap(\"mtc-form\")} style={ctc.styleWrap()}>\r\n      <Button\r\n        title={props.cell}\r\n        color=\"primary\"\r\n        outline\r\n        onClick={() => {\r\n          ctc.onClickForm()\r\n        }}\r\n        {...ctc.getMorePropsButton()}\r\n      >\r\n        {ctc.isFetching ? (\r\n          <MyLoading type=\"circle\" />\r\n        ) : (\r\n          FlowGetTextDisplay({ ...ctc, isButton: true })\r\n        )}\r\n      </Button>\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}