{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/array_editable_modal.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","modules/adminpanel/MyUI/Types/arr_tags.js"],"names":["WrapCell","styled","div","WrapNoItem","MTCSelectModernPopover","props","ctc","valueSelected","optionsSelected","configFormAddNew","handleForceUpdate","useForceUpdate","currentRequestItemOption","useRef","current","sourceData","fnListMyTableCell","fnGetSourceData","fnList","_idOptions","moreObj","fIDOption","style","minWidth","maxWidth","undefined","length","className","type","multi","hasRightPanel","currentListLoadingByValue","onSubmitAddNew","formData","cbSuccess","configApiAddNew","oneTableCell","getConfigApi","customMore","query","Object","assign","console","warn","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","configApi","Data","Id","row","onUpdateRow","updateValueCellFromRow","onChange","itemOption","log","Value","_arrValue","_isAdd","_isRemoveAll","HIs","isArray","indexOf","k","HUtils","runFuntion","requestCustom","requestData","fID","fList","apiPath","apiName","apiNameAdd","apiNameRemove","cbWhenEqual","forceUpdate","_data","fieldName","_indexI","i","splice","cbError","e","MTCArrayEditableModal","useConfigTableCell","_arrValueCell","valueCell","_fName","fName","map","v","optionSelected","_value","Text","kClientKeyUI","_UI_Missing","isExistValueInSourceList","configForm","getConfigForm","configFormToShow","MyFormControlHelpers","defaultValues","configPopover","placement","autoScrollIntoViewWhenOutOfScreen","FlowGetConfigOfMore","key","KMore","defaultValue","classNameWrap","disabled","canEdit","overlay","overlayClassName","destroyTooltipOnHide","options","kfnGetScreenCode","fnListOfTableCell","_fnList","kfnGetSourceData","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","Array","kfnRenderBadge","count","tooltip","more","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","_screenCode","_configFileFromMore","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","ScreenCode","ProjectId","FieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","OneTableCell","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","IsLocked","useEffect","updateFieldData","opts","apiController","fnGetApiPath","newValue","fnForceUpdateTable","cbSuccessUpdate","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","button","keys","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","_defaultValuesForm","fDefaultValues","onSubmitForm","valuesForm","myForm","Promise","resolve","reject","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist","WrapUI","MUIArrTags","values"],"mappings":"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","file":"static/js/52.7d0a5a3c.chunk.js","sourcesContent":["import { HIs, HUtils, MyFormControlHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport React, { useRef } from \"react\"\r\nimport { Popover } from \"src/core/components\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport useForceUpdate from \"../../hooks/useForceUpdate\"\r\nimport MUIArrTags from \"../../MyUI/Types/arr_tags\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetConfigOfMore,\r\n  FlowParseResponseAndNeedReload,\r\n  KMore,\r\n} from \"src/helpers/Flows/TableCell\"\r\nimport { kClientKeyUI } from \"src/helpers/K\"\r\nimport { isExistValueInSourceList } from \"src/core/helpers/options\"\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  & > div {\r\n    height: 100%;\r\n  }\r\n  & .no-items {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-height: 36px;\r\n  }\r\n`\r\nconst WrapNoItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 36px;\r\n  font-style: italic;\r\n  color: #adadad;\r\n`\r\n\r\nfunction MTCSelectModernPopover(props) {\r\n  const { ctc, valueSelected, optionsSelected, configFormAddNew } = props\r\n  const handleForceUpdate = useForceUpdate()\r\n  const currentRequestItemOption = useRef({}).current\r\n  const sourceData = fnListMyTableCell.fnGetSourceData(ctc.fnList)\r\n  // console.warn(\"sourceData:\", sourceData, ctc.valueCell)\r\n  let _idOptions = ctc.moreObj.fIDOption || \"Id\"\r\n  return (\r\n    <div style={{ minWidth: \"200px\", maxWidth: \"500px\" }}>\r\n      {(sourceData == null ||\r\n        sourceData == undefined ||\r\n        (sourceData && sourceData.length === 0)) && (\r\n        <WrapNoItem className=\"no-items\">No item option</WrapNoItem>\r\n      )}\r\n      {sourceData && sourceData.length > 0 && (\r\n        <MyUI\r\n          type=\"selectcheck_box_search\"\r\n          multi={true}\r\n          hasRightPanel={true}\r\n          configFormAddNew={configFormAddNew}\r\n          currentListLoadingByValue={currentRequestItemOption}\r\n          onSubmitAddNew={(formData, { cbSuccess } = {}) => {\r\n            if (ctc.moreObj.configApiAddNew) {\r\n              const configApiAddNew = ctc.oneTableCell.getConfigApi({\r\n                customMore: ctc.moreObj.configApiAddNew,\r\n              })\r\n              if (configApiAddNew.query == null) {\r\n                configApiAddNew.query = {}\r\n              }\r\n              if (configApiAddNew.query) {\r\n                configApiAddNew.query = Object.assign(\r\n                  configApiAddNew.query,\r\n                  formData\r\n                )\r\n              }\r\n              console.warn(\"onSubmitAddNew:\", formData, configApiAddNew)\r\n              apiWithConfigApi(configApiAddNew).then(res => {\r\n                console.warn(\"configApiAddNew rs\", res)\r\n                FlowParseResponseAndNeedReload({\r\n                  ...ctc,\r\n                  oneTableCell: ctc.oneTableCell,\r\n                  response: res,\r\n                  configApi: configApiAddNew,\r\n                })\r\n                if (res.Data && res.Data.Id === ctc.row.Id) {\r\n                  ctc.onUpdateRow(res.Data)\r\n                  ctc.updateValueCellFromRow()\r\n                  handleForceUpdate()\r\n                }\r\n                if (cbSuccess) {\r\n                  cbSuccess(res)\r\n                }\r\n              })\r\n            } else {\r\n              console.warn(\"Missing configApiAddNew\")\r\n            }\r\n          }}\r\n          sourceData={sourceData}\r\n          optionsSelected={optionsSelected}\r\n          valueSelected={valueSelected}\r\n          onChange={(itemOption, { fnList } = {}) => {\r\n            console.log(\r\n              \"onChange:\",\r\n              itemOption,\r\n              itemOption.Value,\r\n              valueSelected\r\n            )\r\n            let _arrValue = []\r\n            let _isAdd = true\r\n            let _isRemoveAll = false\r\n            if (HIs.isArray(itemOption)) {\r\n              //neu la mang -> mang value selected\r\n              _arrValue = itemOption\r\n              if (_arrValue.length > 0) {\r\n                _isAdd = true\r\n              } else {\r\n                //remove all\r\n                _isRemoveAll = true\r\n                currentRequestItemOption[\"_all\"] = true\r\n                _isAdd = false\r\n                _arrValue = valueSelected\r\n              }\r\n            } else {\r\n              //ko phai la mang -> la itemOption\r\n              _arrValue = [itemOption.Value]\r\n              _isAdd =\r\n                valueSelected.indexOf(itemOption.Value) > -1 ? false : true\r\n            }\r\n            if (_arrValue) {\r\n              for (let k of _arrValue) {\r\n                currentRequestItemOption[k] = true\r\n              }\r\n            }\r\n\r\n            HUtils.runFuntion(fnList, \"fnForceUpdate\")\r\n            ctc.requestCustom({\r\n              requestData: {\r\n                [ctc.moreObj.fID]: ctc.row.Id,\r\n                [ctc.moreObj.fList]: _arrValue,\r\n              },\r\n              apiPath: ctc.moreObj.apiPath,\r\n              apiName: _isAdd\r\n                ? ctc.moreObj.apiNameAdd\r\n                : ctc.moreObj.apiNameRemove,\r\n              cbSuccess: response => {\r\n                console.warn(\"cbSuccess:\", response)\r\n                //check current request\r\n                if (_arrValue) {\r\n                  for (let k of _arrValue) {\r\n                    delete currentRequestItemOption[k]\r\n                  }\r\n                }\r\n                delete currentRequestItemOption[\"_all\"]\r\n\r\n                if (response.Data) {\r\n                  ctc.onUpdateRow(response.Data)\r\n                  ctc.updateValueCellFromRow({\r\n                    cbWhenEqual: () => {\r\n                      ctc.forceUpdate()\r\n                    },\r\n                  })\r\n                } else if (_isAdd === false) {\r\n                  //truong hop remove ma Data tra ve rong\r\n                  console.log(\"update row when remove\")\r\n                  var _data = ctc.row[ctc.fieldName]\r\n                  if (_data && _data.length > 0) {\r\n                    let _indexI = -1\r\n                    if (_isRemoveAll) {\r\n                      ctc.row[ctc.fieldName] = []\r\n                    } else {\r\n                      for (let i = 0; i < _data.length; i++) {\r\n                        if (_data[i][_idOptions] == itemOption.Value) {\r\n                          _indexI = i\r\n                          break\r\n                        }\r\n                      }\r\n                      if (_indexI > -1) {\r\n                        _data.splice(_indexI, 1)\r\n                      }\r\n                    }\r\n                    ctc.updateValueCellFromRow({\r\n                      cbWhenEqual: () => {\r\n                        ctc.forceUpdate()\r\n                      },\r\n                    })\r\n                  }\r\n                }\r\n                HUtils.runFuntion(fnList, \"fnForceUpdate\")\r\n              },\r\n              cbError: e => {\r\n                if (_arrValue) {\r\n                  for (let k of _arrValue) {\r\n                    delete currentRequestItemOption[k]\r\n                  }\r\n                }\r\n                delete currentRequestItemOption[\"_all\"]\r\n                HUtils.runFuntion(fnList, \"fnForceUpdate\")\r\n              },\r\n            })\r\n            // HUtils.runFuntion(ctc, \"updateFieldData\", [\r\n            //   itemOption.Value === ctc.valueCell ? \"\" : itemOption.Value,\r\n            //   {},\r\n            // ])\r\n            //hide popover\r\n            // if (props.hide) {\r\n            //   props.hide()\r\n            // }\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default function MTCArrayEditableModal(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCArrayEditableModal:\", props)\r\n  const sourceData = fnListMyTableCell.fnGetSourceData(ctc.fnList)\r\n  let _arrValueCell = []\r\n  if (ctc.valueCell && HIs.isArray(ctc.valueCell)) {\r\n    _arrValueCell = ctc.valueCell\r\n  }\r\n  let _idOptions = ctc.moreObj.fIDOption || \"Id\"\r\n  let _fName = ctc.moreObj.fName\r\n\r\n  const valueSelected = _arrValueCell.map((v, i) => {\r\n    if (_idOptions) {\r\n      return v[_idOptions]\r\n    }\r\n    return v.Id || \"\"\r\n  })\r\n  const optionSelected = _arrValueCell.map((v, i) => {\r\n    let _value = v[_idOptions] || v.Id\r\n    if (_fName) {\r\n      return {\r\n        Value: _value,\r\n        Text: v[_fName] || _value || \"\",\r\n        [kClientKeyUI._UI_Missing]: !isExistValueInSourceList(\r\n          sourceData,\r\n          _value\r\n        ),\r\n      }\r\n    }\r\n    return {\r\n      Value: _value,\r\n      Text: _value,\r\n    }\r\n  })\r\n  const configForm = ctc.oneTableCell.getConfigForm()\r\n  const configFormToShow = MyFormControlHelpers[\"getConfigFormFromConfigV1\"](\r\n    configForm,\r\n    {\r\n      defaultValues: ctc.row,\r\n    }\r\n  )\r\n  // console.log(\"render array edit modal\", ctc.row, ctc.fieldName, ctc.valueCell)\r\n  const configPopover = {\r\n    placement: \"bottom\",\r\n    autoScrollIntoViewWhenOutOfScreen: true,\r\n    ...FlowGetConfigOfMore({\r\n      ...ctc,\r\n      key: KMore.configPopover,\r\n      defaultValue: {},\r\n    }),\r\n  }\r\n  return (\r\n    <WrapCell className={ctc.classNameWrap(\"mct-array_editable_modal\")}>\r\n      <Popover\r\n        disabled={!ctc.canEdit}\r\n        autoScrollIntoViewWhenOutOfScreen={\r\n          configPopover.autoScrollIntoViewWhenOutOfScreen\r\n        }\r\n        overlay={props => {\r\n          return (\r\n            <MTCSelectModernPopover\r\n              ctc={ctc}\r\n              optionsSelected={optionSelected}\r\n              valueSelected={valueSelected}\r\n              configFormAddNew={configFormToShow}\r\n              {...props}\r\n            />\r\n          )\r\n        }}\r\n        overlayClassName=\"m-popover m-popover-full\"\r\n        placement={configPopover.placement}\r\n        destroyTooltipOnHide={true}\r\n      >\r\n        {/* <div>A</div> */}\r\n        <div>\r\n          <MUIArrTags options={optionSelected} />\r\n        </div>\r\n      </Popover>\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","import React from \"react\"\r\nimport { kClientKeyUI } from \"src/helpers/K\"\r\nimport styled from \"styled-components\"\r\n\r\nconst WrapUI = styled.div`\r\n  display: inline-block;\r\n  & > span {\r\n    padding: 0px 2px;\r\n    margin-bottom: 2px;\r\n    background: red;\r\n    display: inline-block;\r\n    margin-right: 2px;\r\n    border: 1px solid rgba(0, 126, 255, 0.08);\r\n    border-radius: 3px;\r\n    background-color: rgba(0, 126, 255, 0.08);\r\n    color: #007eff;\r\n    &.a-missing {\r\n      color: #c7c7c7;\r\n      background-color: #c7c7c722;\r\n      border-color: #c7c7c755;\r\n    }\r\n  }\r\n`\r\nexport default function MUIArrTags(props) {\r\n  const { values, options } = props\r\n  return (\r\n    <WrapUI className=\"mui-arr_tags\">\r\n      {options &&\r\n        options.length > 0 &&\r\n        options.map((v, i) => {\r\n          return (\r\n            <span\r\n              key={i}\r\n              title={v.Text}\r\n              className={`${\r\n                v[kClientKeyUI._UI_Missing] === true ? \"a-missing\" : \"\"\r\n              }`}\r\n            >\r\n              {v.Text}\r\n            </span>\r\n          )\r\n        })}\r\n      {values &&\r\n        values.length > 0 &&\r\n        values.map((v, i) => {\r\n          return (\r\n            <span key={i} title={v}>\r\n              {v}\r\n            </span>\r\n          )\r\n        })}\r\n    </WrapUI>\r\n  )\r\n}\r\n"],"sourceRoot":""}