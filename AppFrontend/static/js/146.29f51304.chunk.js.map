{"version":3,"sources":["modules/adminpanel/MyTableFilterControl/Types/text.js","modules/adminpanel/MyTableFilterControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFilterControl.js","modules/adminpanel/hooks/useConfigTableFilterControl.js"],"names":["Wrap","styled","div","MTFCText","props","oneFilterControl","ctfc","useConfigTableFilterControl","configFilterControl","currentValue","console","log","_fnGetFilterOutFromValue","setFnGetFilterOutFromValue","v","warn","className","type","value","onChange","clearValue","updateData","attrs","placeholder","FlowGetPlaceHolder","defaultValue","onKeyPress","ev","key","fnList","onSubmitFilter","MTFCWrapControl","_title","title","HIs","isJsonString","_obj","HJson","getObj","children","fnListOfFilterControl","_fnList","kfnGetTitleControl","refConfigFilterControl","React","useRef","current","more","refFnList","forceUpdate","useForceUpdate","custom","MyTableFilterControlHelpers","ConfigByType","fn","_loadFirst","setFromComponent","loadLocal","updateCurrentValue","fnListMyPage","fnGetOnePage","clear","getSourceData","optionKey","startsWith"],"mappings":"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","file":"static/js/146.29f51304.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { MyBase } from \"@macashipo/mlib\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigTableFilterControl from \"../../hooks/useConfigTableFilterControl\"\r\nimport styled from \"styled-components\"\r\nimport { FlowGetPlaceHolder } from \"src/helpers/Flows/TableFilter\"\r\nconst Wrap = styled.div`\r\n  & .form-control {\r\n    border: 1px solid #cccccc;\r\n    padding: 0.5rem;\r\n    border-radius: 4px;\r\n    height: auto;\r\n  }\r\n`\r\nexport default function MTFCText(props) {\r\n  const oneFilterControl = props.oneFilterControl\r\n  const ctfc = useConfigTableFilterControl({ props })\r\n  const { configFilterControl, currentValue } = ctfc\r\n  console.log(\"render MTFCText:\", currentValue)\r\n  if (configFilterControl) {\r\n    if (configFilterControl._fnGetFilterOutFromValue == null) {\r\n      configFilterControl.setFnGetFilterOutFromValue(v => {\r\n        console.warn(\"setFnGetFilterOutFromValue:\", v)\r\n        return v\r\n      })\r\n    }\r\n  }\r\n  return (\r\n    <WrapControl {...props}>\r\n      <Wrap className=\"mtfc-text\">\r\n        <MyBase\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          value={currentValue}\r\n          onChange={v => {\r\n            // console.warn(\"text:\", v)\r\n            if (v === \"\") {\r\n              ctfc.clearValue()\r\n            } else {\r\n              ctfc.updateData(v)\r\n            }\r\n          }}\r\n          attrs={{\r\n            placeholder: FlowGetPlaceHolder({\r\n              oneFilterControl: oneFilterControl,\r\n              defaultValue: \"Enter keyword\",\r\n            }),\r\n            onKeyPress: ev => {\r\n              // console.warn(\"key press:\", ev.key)\r\n              if (ev && ev.key == \"Enter\") {\r\n                if (ctfc.fnList && ctfc.fnList.onSubmitFilter) {\r\n                  ctfc.fnList.onSubmitFilter()\r\n                }\r\n              }\r\n            },\r\n          }}\r\n          fnList={{}}\r\n        />\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { HIs, HJson } from \"@macashipo/mlib\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  min-width: 300px;\r\n  & input {\r\n    padding: 0.25rem;\r\n    line-height: 1rem;\r\n    height: 1.5rem;\r\n  }\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MTFCWrapControl(props) {\r\n  const { oneFilterControl } = props\r\n  // console.warn(\"render MTFCWrapControl:\", props)\r\n  let _title = oneFilterControl.title\r\n  if (HIs.isJsonString(_title)) {\r\n    let _obj = HJson.getObj(_title, {})\r\n    if (_obj && _obj.title) {\r\n      _title = _obj.title\r\n    }\r\n  }\r\n  return (\r\n    <Wrap className=\"mtfcw-ap col-4\">\r\n      <div>{_title}</div>\r\n      <div>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { HIs, HJson } from \"@macashipo/mlib\"\r\nimport { kfnGetTitleControl } from \"src/helpers/fnList\"\r\n\r\nconst fnListOfFilterControl = {\r\n  init({ props, configFilterControl }) {\r\n    // const configFormControl = props.configFormControl || {}\r\n    // const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n    _fnList[kfnGetTitleControl] = () => {\r\n      let _title = configFilterControl.title\r\n      if (HIs.isJsonString(_title)) {\r\n        let _obj = HJson.getObj(_title, {})\r\n        if (_obj && _obj.title) {\r\n          _title = _obj.title\r\n        }\r\n      }\r\n      return _title\r\n    }\r\n    return _fnList\r\n  },\r\n}\r\n\r\nconst helpersOfFilterControl = {}\r\nexport { helpersOfFilterControl, fnListOfFilterControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HJson, MyTableFilterControlHelpers } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { fnListOfFilterControl } from \"./fnListOfFilterControl\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigTableFilterControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFilterControl = React.useRef(props.oneFilterControl)\r\n  const configFilterControl = refConfigFilterControl.current\r\n  const { type, currentValue, more } = configFilterControl //title, fieldName, optionKey, onePage\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n\r\n  const refFnList = React.useRef(\r\n    fnListOfFilterControl.init({ props, configFilterControl })\r\n  )\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  if (props.custom) {\r\n    if (configFilterControl[\"_applyCustom\"] == null) {\r\n      if (props.custom.more) {\r\n        configFilterControl.more = {\r\n          ...configFilterControl.more,\r\n          ...props.custom.more,\r\n        }\r\n      }\r\n      configFilterControl[\"_applyCustom\"] = true\r\n    }\r\n  }\r\n\r\n  if (configFilterControl) {\r\n    if (configFilterControl._fnGetFilterOutFromValue == null) {\r\n      if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[type]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[type][\"getFilterOut\"](\r\n            value,\r\n            configFilterControl\r\n          )\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      } else if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[\"_default\"]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[\"_default\"][\r\n            \"getFilterOut\"\r\n          ](value, configFilterControl)\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      }\r\n    }\r\n    if (configFilterControl._loadFirst !== false) {\r\n      if (configFilterControl.setFromComponent) {\r\n        configFilterControl.setFromComponent({\r\n          forceUpdate: () => {\r\n            console.warn(\"forceupdateee\")\r\n            forceUpdate()\r\n          },\r\n        })\r\n      }\r\n      configFilterControl.loadLocal()\r\n      configFilterControl._loadFirst = false\r\n      // console.warn(\"load first\", configFilterControl)\r\n    }\r\n  }\r\n\r\n  return {\r\n    forceUpdate,\r\n    configFilterControl,\r\n    currentValue,\r\n    more,\r\n    fnList,\r\n    clearValue: () => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        console.warn(\"clear Value\", props, configFilterControl)\r\n        let _onePage = fnListMyPage.fnGetOnePage(fnList)\r\n        configFilterControl.clear()\r\n        configFilterControl.updateCurrentValue(null)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    updateData: v => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        configFilterControl.updateCurrentValue(v)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    getSourceData: () => {\r\n      //bo sung source list tu json string Source\r\n      // console.warn(\"configFilterControl\", configFilterControl)\r\n      if (\r\n        configFilterControl &&\r\n        configFilterControl.optionKey &&\r\n        configFilterControl.optionKey.startsWith(\"[\")\r\n      ) {\r\n        return HJson.getObj(configFilterControl.optionKey, [])\r\n      }\r\n      if (configFilterControl && configFilterControl.getSourceData) {\r\n        return configFilterControl.getSourceData()\r\n      }\r\n      // if (onePage && onePage._dataOptions && onePage._dataOptions[optionKey]) {\r\n      //   return onePage._dataOptions[optionKey]\r\n      // }\r\n      return []\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigTableFilterControl\r\n"],"sourceRoot":""}