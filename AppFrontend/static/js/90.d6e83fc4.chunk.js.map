{"version":3,"sources":["modules/adminpanel/MyFormControl/Types/select2.js","modules/adminpanel/MyFormControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFormControl.js","modules/adminpanel/hooks/useConfigFormControl.js"],"names":["Wrap","styled","div","getDefaultValueControl","cfc","isReset","_valueControl","valueControl","defaultValues","fieldName","_option","AHOptions","fnListMyFormControl","getSourceData","fnList","Value","Text","MFCSelect2","props","useConfigFormControl","React","useState","setValueControl","fnListMyForm","addFnListFromControl","kresetFormControl","_resetValue","console","warn","_isMulti","FlowGetMoreOfKey","configFormControl","key","KMore","multi","defaultValue","_options","HUtils","runFuntion","_valueSelect2","HOptionsGetArrayOptionFromArrayValue","className","type","options","value","onChange","v","Array","isArray","_valueUpdate","map","item","i","join","updateValueControl","attrs","onFocus","optionKey","indexOf","forceUpdate","isDisabled","getDisabled","isMulti","placeholder","FlowGetPlaceHolder","i18next","t","select2","MFCWrapControl","noLabel","FlowGetCanShow","more","htmlWhenHide","html","_typeWrapControl","fnGetTypeWrapControl","_configWrapControl","configWrapControl","MyLayoutHelpers","Types","children","_styleWrapControl","styleWrapControl","style","styleLabel","label","styleControl","kgetSourceData","fnListOfFormControl","_fnList","info","sourceList","getSourceList","_dataForm","getCurrentValues","kfnGetTypeWrapControl","_typeWrapControlFromMyForm","hasOwnProperty","typeWrapControl","refConfigFormControl","useRef","current","FlowMergeWithCustomProps","custom","getDefaultValues","refFnList","useForceUpdate","FlowFnListFromExtControl","keys","newValue","updateValueControlWithMoreFields","moreValues","Object","f","disabled","getMoreAttrs","_moreAttrs","autoComplete","String","placeHolder","rows"],"mappings":"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","file":"static/js/90.d6e83fc4.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { HUtils, MyBase } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport {\r\n  fnListMyFormControl,\r\n  fnListMyForm,\r\n  kresetFormControl,\r\n} from \"src/helpers/fnList\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport {\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n  FlowGetPlaceHolder,\r\n} from \"src/helpers/Flows/FormControl\"\r\nimport useConfigFormControl from \"../../hooks/useConfigFormControl\"\r\nimport styled from \"styled-components\"\r\nimport i18next from \"i18next\"\r\nimport { HOptionsGetArrayOptionFromArrayValue } from \"src/helpers/Flows/MNeedUpdateMLib\"\r\nconst Wrap = styled.div`\r\n  & .form-control {\r\n    padding: 0px;\r\n    height: auto;\r\n    border: 0px;\r\n  }\r\n`\r\n\r\nconst getDefaultValueControl = (cfc, isReset) => {\r\n  let _valueControl = cfc.valueControl\r\n  if (isReset) {\r\n    _valueControl = cfc.defaultValues[cfc.fieldName] || \"\"\r\n  }\r\n  if (_valueControl) {\r\n    let _option = AHOptions.getOptionByValue(\r\n      fnListMyFormControl.getSourceData(cfc.fnList),\r\n      _valueControl\r\n    )\r\n    if (_option) {\r\n      return _option\r\n    }\r\n    return {\r\n      Value: _valueControl,\r\n      Text: _valueControl,\r\n    }\r\n  }\r\n  return null\r\n}\r\nexport default function MFCSelect2(props) {\r\n  const cfc = useConfigFormControl({ props })\r\n  const [valueControl, setValueControl] = React.useState(\r\n    getDefaultValueControl(cfc)\r\n  )\r\n  fnListMyForm.addFnListFromControl(cfc.fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      let _resetValue = getDefaultValueControl(cfc, true)\r\n      console.warn(\"reset form control select2\", _resetValue)\r\n      setValueControl(_resetValue)\r\n    },\r\n    cfc.fieldName,\r\n  ])\r\n\r\n  // console.warn(\"render MFCSelect2:\", cfc, valueControl)\r\n  let _isMulti = FlowGetMoreOfKey({\r\n    configFormControl: cfc.configFormControl,\r\n    key: KMore.multi,\r\n    defaultValue: false,\r\n  })\r\n  let _options = HUtils.runFuntion(cfc.fnList, \"getSourceData\") || []\r\n  let _valueSelect2 = valueControl\r\n  if (_isMulti && typeof _valueSelect2 == \"string\") {\r\n    _valueSelect2 = HOptionsGetArrayOptionFromArrayValue(\r\n      _valueSelect2,\r\n      _options\r\n    )\r\n  }\r\n  // console.warn(\"render:\", _options, _valueSelect2)\r\n  return (\r\n    <WrapControl cfc={cfc} {...props}>\r\n      <Wrap className=\"mfc-select2\">\r\n        <MyBase\r\n          type=\"select2\"\r\n          className=\"form-control\"\r\n          options={_options}\r\n          value={_valueSelect2}\r\n          onChange={v => {\r\n            console.warn(\"onChange:\", v)\r\n            if (v) {\r\n              if (Array.isArray(v)) {\r\n                //multi\r\n                setValueControl(v)\r\n                let _valueUpdate = v\r\n                  .map((item, i) => {\r\n                    return item.Value\r\n                  })\r\n                  .join(\",\")\r\n                cfc.updateValueControl(_valueUpdate)\r\n              } else {\r\n                setValueControl({\r\n                  Value: v.Value,\r\n                  Text: v.Text,\r\n                })\r\n                cfc.updateValueControl(v.Value)\r\n              }\r\n            }\r\n          }}\r\n          attrs={{\r\n            onFocus: () => {\r\n              console.warn(\"on focus\", cfc.optionKey)\r\n              if (cfc.optionKey && cfc.optionKey.indexOf(\"[\") > -1) {\r\n                cfc.forceUpdate()\r\n              }\r\n            },\r\n            isDisabled: cfc.getDisabled(),\r\n            isMulti: _isMulti,\r\n            placeholder: FlowGetPlaceHolder({\r\n              configFormControl: cfc.configFormControl,\r\n              defaultValue: i18next.t(\"Select...\"),\r\n            }),\r\n            ...FlowGetMoreOfKey({\r\n              configFormControl: cfc.configFormControl,\r\n              key: KMore.select2,\r\n              defaultValue: {},\r\n            }),\r\n          }}\r\n          fnList={cfc.fnList}\r\n        />\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MyLayout, MyLayoutHelpers, MyUI } from \"@macashipo/mlib\"\r\nimport { fnListMyFormControl } from \"src/helpers/fnList\"\r\nimport {\r\n  FlowGetCanShow,\r\n  FlowGetMoreOfKey,\r\n  KMore,\r\n} from \"src/helpers/Flows/FormControl\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MFCWrapControl(props) {\r\n  const { cfc, noLabel } = props\r\n  //check can show\r\n  let _canShow = FlowGetCanShow({\r\n    configFormControl: cfc.configFormControl,\r\n    fnList: cfc.fnList,\r\n    more: cfc.more,\r\n  })\r\n  if (_canShow === false) {\r\n    if (cfc.more && cfc.more[KMore.htmlWhenHide]) {\r\n      return <MyUI type=\"html\" html={cfc.more[KMore.htmlWhenHide]} />\r\n    }\r\n    return null\r\n  }\r\n\r\n  let _typeWrapControl = fnListMyFormControl.fnGetTypeWrapControl(cfc.fnList)\r\n  let _configWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.configWrapControl,\r\n    }) || {}\r\n  // console.log(\"_typeWrapControl:\", _typeWrapControl)\r\n  if (MyLayoutHelpers.Types[_typeWrapControl]) {\r\n    return (\r\n      <MyLayout\r\n        type={_typeWrapControl}\r\n        cfc={cfc}\r\n        noLabel={noLabel}\r\n        children={props.children}\r\n        configWrapControl={_configWrapControl}\r\n      />\r\n    )\r\n  }\r\n  let _styleWrapControl =\r\n    FlowGetMoreOfKey({\r\n      configFormControl: cfc.configFormControl,\r\n      key: KMore.styleWrapControl,\r\n      defaultValue: false,\r\n    }) || {}\r\n  // console.warn(\"render wrap:\", props, _styleWrapControl)\r\n  return (\r\n    <Wrap\r\n      className=\"mfcw-v1\"\r\n      style={{ ..._styleWrapControl, ..._configWrapControl.style }}\r\n    >\r\n      {noLabel !== true && (\r\n        <div style={_configWrapControl.styleLabel}>{cfc.label}</div>\r\n      )}\r\n      <div style={_configWrapControl.styleControl}>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { fnListMyForm, kfnGetTypeWrapControl } from \"src/helpers/fnList\"\r\nimport { HUtils, HIs } from \"@macashipo/mlib\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport { KMore } from \"src/helpers/Flows/FormControl\"\r\nconst kgetSourceData = \"getSourceData\"\r\nconst fnListOfFormControl = {\r\n  init({ props }) {\r\n    const configFormControl = props.configFormControl || {}\r\n    const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n\r\n    _fnList[kgetSourceData] = () => {\r\n      console.info(kgetSourceData, fieldName)\r\n      if (more && more.optionKey) {\r\n        const sourceList = fnListMyForm.getSourceList(_fnList)\r\n        if (sourceList && sourceList[more.optionKey]) {\r\n          return sourceList[more.optionKey]\r\n        } else {\r\n          if (\r\n            more.optionKey.indexOf(\".\") > -1 &&\r\n            more.optionKey.indexOf(\"[\") > -1\r\n          ) {\r\n            //option multi\r\n            //\r\n            let _dataForm = fnListMyForm.getCurrentValues(_fnList)\r\n            return AHOptions.getOptionsByLevel(\r\n              sourceList,\r\n              more.optionKey,\r\n              _dataForm\r\n            )\r\n          }\r\n        }\r\n      }\r\n      return []\r\n    }\r\n    _fnList[kfnGetTypeWrapControl] = () => {\r\n      let _typeWrapControlFromMyForm =\r\n        fnListMyForm.fnGetTypeWrapControl(props.fnList) || \"\"\r\n      if (more && more.hasOwnProperty(KMore.typeWrapControl)) {\r\n        _typeWrapControlFromMyForm = more[KMore.typeWrapControl]\r\n      }\r\n      return _typeWrapControlFromMyForm\r\n    }\r\n    return _fnList\r\n  },\r\n  getSourceData() {},\r\n}\r\n\r\nconst helpersOfFormControl = {}\r\nexport { helpersOfFormControl, fnListOfFormControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nimport React, { useState } from \"react\"\r\nimport { fnListOfFormControl } from \"./fnListOfFormControl\"\r\nimport { fnListMyForm, kresetFormControl } from \"src/helpers/fnList\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowFnListFromExtControl,\r\n  FlowMergeWithCustomProps,\r\n} from \"src/helpers/Flows/FormControl\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigFormControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFormControl = React.useRef(props.configFormControl)\r\n  const configFormControl = refConfigFormControl.current || {}\r\n  const { label, fieldName } = configFormControl\r\n  FlowMergeWithCustomProps({ configFormControl, custom: props.custom })\r\n  const more = configFormControl.more || {}\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n  const defaultValues = fnListMyForm.getDefaultValues(props.fnList) || {}\r\n  // console.warn(\"defaultValues\", defaultValues)\r\n  const [valueControl, setValueControl] = useState(\r\n    defaultValues[fieldName] || \"\"\r\n  )\r\n  const refFnList = React.useRef(fnListOfFormControl.init({ props }))\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\")\r\n  //   if (countForceUpdate < countForceUpdateMax) setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    kresetFormControl,\r\n    () => {\r\n      console.warn(\"reset form control\")\r\n      setValueControl(defaultValues[fieldName] || \"\")\r\n    },\r\n    fieldName,\r\n  ])\r\n  fnListMyForm.addFnListFromControl(fnList, [\r\n    FlowFnListFromExtControl.keys.forceUpdate,\r\n    () => {\r\n      forceUpdate()\r\n    },\r\n    fieldName,\r\n  ])\r\n\r\n  return {\r\n    more: more,\r\n    forceUpdate,\r\n    configFormControl,\r\n    label,\r\n    defaultValues,\r\n    fieldName,\r\n    optionKey: more.optionKey,\r\n    valueControl,\r\n    fnList,\r\n    setValueControl,\r\n    updateValueControl: v => {\r\n      // console.warn(\"update value\", props)\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n      ])\r\n    },\r\n    updateValueControlWithMoreFields: (v, moreValues = {}) => {\r\n      setValueControl(v)\r\n      HUtils.runFuntion(fnList, \"onUpdateValue\", [\r\n        {\r\n          fieldName: fieldName,\r\n          newValue: v,\r\n        },\r\n        ...Object.keys(moreValues).map((f, i) => {\r\n          return {\r\n            fieldName: f,\r\n            newValue: moreValues[f],\r\n          }\r\n        }),\r\n      ])\r\n    },\r\n    getDisabled: () => {\r\n      return more.disabled === true\r\n    },\r\n    getMoreAttrs: () => {\r\n      let _moreAttrs = {}\r\n      // console.log(\"more:\", more)\r\n      if (more.autoComplete != null) {\r\n        _moreAttrs.autoComplete = String(more.autoComplete)\r\n        if (more.autoComplete === false) {\r\n          _moreAttrs.autoComplete = \"new-password\" //for chrome disabled autofill\r\n        }\r\n      }\r\n      if (more.placeholder) {\r\n        _moreAttrs.placeHolder = more.placeholder\r\n      }\r\n      if (more.disabled) {\r\n        _moreAttrs.disabled = more.disabled\r\n      }\r\n      if (more.rows) {\r\n        _moreAttrs.rows = more.rows\r\n      }\r\n      return _moreAttrs\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigFormControl\r\n"],"sourceRoot":""}