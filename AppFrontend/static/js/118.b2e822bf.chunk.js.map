{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/form_modal_table.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","WrapModalBody","MTCSelect2ModalTable","props","ctc","useConfigTableCell","_fieldSelect","fnListMyTableCell","fnGetConfigInMore","fnList","KMore","fSelectValue","_configPage","configPage","_configModal","fnGetConfigModal","className","classNameWrap","title","cell","color","outline","onClick","canEdit","MyModal","showFromMyPage","fnGetHeaderTitle","usingModalBody","wrapComponentBody","children","updateCell","v","opts","console","warn","updateFieldData","onSelectRow","row","configApi","oneTableCell","getConfigApi","_queryForSelect","FlowGetQueryFromConfigQuery","configQuery","more","querySelectValue","query","log","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","hideModal","Helpers","types","mypage","isSelectedRow","valueCell","kfnGetIsInModal","kfnGetColumnSelect","Type","type","Index","CanShow","CanEdit","CanSort","Header","Width","HUI","showToastError","FlowGetTextDisplay","kfnGetScreenCode","fnListOfTableCell","_fnList","kfnGetSourceData","extra","_optionKey","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","customMore","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","getValue","FlowGetCanShow","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","IsLocked","useEffect","moreObj","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","style","Object","keys","renderHide","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","onClickForm","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","Promise","resolve","reject","assign","closeMyModal","catch","configModal","getConfigModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/118.b2e822bf.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { HUI } from \"src/core/helpers\"\r\nimport {\r\n  FlowGetQueryFromConfigQuery,\r\n  KMore,\r\n  FlowGetTextDisplay,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nimport {\r\n  fnListMyTableCell,\r\n  kfnGetColumnSelect,\r\n  kfnGetIsInModal,\r\n} from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\n\r\nconst WrapCell = styled.div`\r\n  padding: 2px;\r\n  > button {\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    word-break: break-all;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst WrapModalBody = styled.div`\r\n  & .mpat-header {\r\n    padding: 0.5rem;\r\n    margin: 0px;\r\n  }\r\n  & .mpat-table {\r\n    & > .card-body {\r\n      padding: 0.5rem;\r\n    }\r\n  }\r\n`\r\n\r\nexport default function MTCSelect2ModalTable(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCText:\", props)\r\n  let _fieldSelect = fnListMyTableCell.fnGetConfigInMore(ctc.fnList, [\r\n    KMore.fSelectValue,\r\n    \"Id\",\r\n  ])\r\n  let _configPage = fnListMyTableCell.fnGetConfigInMore(ctc.fnList, [\r\n    KMore.configPage,\r\n    null,\r\n  ])\r\n  let _configModal = fnListMyTableCell.fnGetConfigModal(ctc.fnList)\r\n  // console.log(\"_configModal\", _configModal)\r\n  return (\r\n    <WrapCell className={ctc.classNameWrap(\"mct-select2_modal_table\")}>\r\n      <Button\r\n        title={props.cell}\r\n        color=\"primary\"\r\n        outline\r\n        onClick={() => {\r\n          if (ctc.canEdit) {\r\n            if (_configPage) {\r\n              MyModal.showFromMyPage(\r\n                {\r\n                  // UIUrl: \"\",\r\n                  // ScreenCode: \"DM_EMAIL_TEMPLATE\",\r\n                  // Title: \"test title\",\r\n                  // APIName: \"EmailTemplate\",\r\n                  // UIType: \"Table\",\r\n                  // Config: null,\r\n                  // RequestData: \"\",\r\n                  // Id: \"\",\r\n                  ..._configPage,\r\n                },\r\n                {\r\n                  ..._configModal,\r\n                  title: fnListMyTableCell.fnGetHeaderTitle(ctc.fnList),\r\n                  // backdrop: \"static\",\r\n                  usingModalBody: false,\r\n                  wrapComponentBody: props => {\r\n                    return (\r\n                      <WrapModalBody className=\"a-mypage-in-modal\">\r\n                        {props.children}\r\n                      </WrapModalBody>\r\n                    )\r\n                  },\r\n                  fnList: {\r\n                    updateCell: (v, opts) => {\r\n                      console.warn(\"Updatecell:\", v, opts)\r\n                      ctc.updateFieldData(v, opts)\r\n                    },\r\n                    onSelectRow: (row, { fnList } = {}) => {\r\n                      console.warn(\"onSelectRow:\", row)\r\n                      const configApi = ctc.oneTableCell.getConfigApi({})\r\n                      if (configApi) {\r\n                        let _queryForSelect = FlowGetQueryFromConfigQuery({\r\n                          row: row,\r\n                          configQuery: ctc.more[KMore.querySelectValue],\r\n                        })\r\n                        configApi.query = {\r\n                          ...configApi.query,\r\n                          ..._queryForSelect,\r\n                        }\r\n                        console.log(\"configApi:\", configApi)\r\n                        apiWithConfigApi(configApi).then(res => {\r\n                          FlowParseResponseAndNeedReload({\r\n                            ...ctc,\r\n                            oneTableCell: ctc.oneTableCell,\r\n                            response: res,\r\n                          })\r\n                          MyModal.hideModal(MyModal.Helpers.types.mypage)\r\n                        })\r\n                      } else {\r\n                        console.warn(\"configApi null\")\r\n                      }\r\n                    },\r\n                    isSelectedRow: row => {\r\n                      // console.warn(\"isSelectedRow:\", row)\r\n                      if (\r\n                        row[_fieldSelect] != null &&\r\n                        row[_fieldSelect] == ctc.valueCell\r\n                      ) {\r\n                        return true\r\n                      }\r\n                      return false\r\n                    },\r\n                    [kfnGetIsInModal]: () => {\r\n                      return true\r\n                    },\r\n                    [kfnGetColumnSelect]: () => {\r\n                      let _more = \"\"\r\n                      return {\r\n                        Type: { type: \"_select_on_modal\", more: _more },\r\n                        Index: 0,\r\n                        CanShow: true,\r\n                        CanEdit: false,\r\n                        CanSort: false,\r\n                        Header: \" \",\r\n                        Width: \"50px\",\r\n                      }\r\n                    },\r\n                  },\r\n                }\r\n              )\r\n            } else {\r\n              HUI.showToastError(\"Missing config\")\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {FlowGetTextDisplay({ ...ctc })}\r\n      </Button>\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}