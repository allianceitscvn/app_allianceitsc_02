{"version":3,"sources":["modules/adminpanel/MyTableFilterControl/Types/select2_multi.js","modules/adminpanel/MyTableFilterControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFilterControl.js","modules/adminpanel/hooks/useConfigTableFilterControl.js","modules/adminpanel/MyTableFilterControl/Types/select2.js"],"names":["MTFCSelect2","props","custom","more","multi","Wrap","styled","div","MTFCWrapControl","_title","oneFilterControl","title","HIs","isJsonString","_obj","HJson","getObj","className","children","fnListOfFilterControl","configFilterControl","_fnList","fnList","kfnGetTitleControl","useConfigTableFilterControl","refConfigFilterControl","React","useRef","current","type","currentValue","refFnList","forceUpdate","useForceUpdate","_fnGetFilterOutFromValue","MyTableFilterControlHelpers","ConfigByType","fn","value","setFnGetFilterOutFromValue","_loadFirst","setFromComponent","console","warn","loadLocal","clearValue","updateCurrentValue","fnListMyPage","fnGetOnePage","clear","updateData","v","getSourceData","optionKey","startsWith","ctfc","_isMulti","_moreAttrs","KMore","select2","isMulti","moreProps","onChange","Array","isArray","length","map","vv","ii","Value","Text","attrs","isClearable","closeMenuOnSelect","placeholder","FlowGetPlaceHolder","defaultValue","i18next","t"],"mappings":"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","file":"static/js/58.957e0e4c.chunk.js","sourcesContent":["import MTFCSelect from \"./select2\"\r\n\r\nexport default function MTFCSelect2(props) {\r\n  return (\r\n    <MTFCSelect\r\n      {...props}\r\n      custom={{\r\n        more: {\r\n          multi: true,\r\n        },\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { HIs, HJson } from \"@macashipo/mlib\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  min-width: 300px;\r\n  & input {\r\n    padding: 0.25rem;\r\n    line-height: 1rem;\r\n    height: 1.5rem;\r\n  }\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MTFCWrapControl(props) {\r\n  const { oneFilterControl } = props\r\n  // console.warn(\"render MTFCWrapControl:\", props)\r\n  let _title = oneFilterControl.title\r\n  if (HIs.isJsonString(_title)) {\r\n    let _obj = HJson.getObj(_title, {})\r\n    if (_obj && _obj.title) {\r\n      _title = _obj.title\r\n    }\r\n  }\r\n  return (\r\n    <Wrap className=\"mtfcw-ap col-4\">\r\n      <div>{_title}</div>\r\n      <div>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { HIs, HJson } from \"@macashipo/mlib\"\r\nimport { kfnGetTitleControl } from \"src/helpers/fnList\"\r\n\r\nconst fnListOfFilterControl = {\r\n  init({ props, configFilterControl }) {\r\n    // const configFormControl = props.configFormControl || {}\r\n    // const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n    _fnList[kfnGetTitleControl] = () => {\r\n      let _title = configFilterControl.title\r\n      if (HIs.isJsonString(_title)) {\r\n        let _obj = HJson.getObj(_title, {})\r\n        if (_obj && _obj.title) {\r\n          _title = _obj.title\r\n        }\r\n      }\r\n      return _title\r\n    }\r\n    return _fnList\r\n  },\r\n}\r\n\r\nconst helpersOfFilterControl = {}\r\nexport { helpersOfFilterControl, fnListOfFilterControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HJson, MyTableFilterControlHelpers } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { fnListOfFilterControl } from \"./fnListOfFilterControl\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigTableFilterControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFilterControl = React.useRef(props.oneFilterControl)\r\n  const configFilterControl = refConfigFilterControl.current\r\n  const { type, currentValue, more } = configFilterControl //title, fieldName, optionKey, onePage\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n\r\n  const refFnList = React.useRef(\r\n    fnListOfFilterControl.init({ props, configFilterControl })\r\n  )\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  if (props.custom) {\r\n    if (configFilterControl[\"_applyCustom\"] == null) {\r\n      if (props.custom.more) {\r\n        configFilterControl.more = {\r\n          ...configFilterControl.more,\r\n          ...props.custom.more,\r\n        }\r\n      }\r\n      configFilterControl[\"_applyCustom\"] = true\r\n    }\r\n  }\r\n\r\n  if (configFilterControl) {\r\n    if (configFilterControl._fnGetFilterOutFromValue == null) {\r\n      if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[type]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[type][\"getFilterOut\"](\r\n            value,\r\n            configFilterControl\r\n          )\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      } else if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[\"_default\"]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[\"_default\"][\r\n            \"getFilterOut\"\r\n          ](value, configFilterControl)\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      }\r\n    }\r\n    if (configFilterControl._loadFirst !== false) {\r\n      if (configFilterControl.setFromComponent) {\r\n        configFilterControl.setFromComponent({\r\n          forceUpdate: () => {\r\n            console.warn(\"forceupdateee\")\r\n            forceUpdate()\r\n          },\r\n        })\r\n      }\r\n      configFilterControl.loadLocal()\r\n      configFilterControl._loadFirst = false\r\n      // console.warn(\"load first\", configFilterControl)\r\n    }\r\n  }\r\n\r\n  return {\r\n    forceUpdate,\r\n    configFilterControl,\r\n    currentValue,\r\n    more,\r\n    fnList,\r\n    clearValue: () => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        console.warn(\"clear Value\", props, configFilterControl)\r\n        let _onePage = fnListMyPage.fnGetOnePage(fnList)\r\n        configFilterControl.clear()\r\n        configFilterControl.updateCurrentValue(null)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    updateData: v => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        configFilterControl.updateCurrentValue(v)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    getSourceData: () => {\r\n      //bo sung source list tu json string Source\r\n      // console.warn(\"configFilterControl\", configFilterControl)\r\n      if (\r\n        configFilterControl &&\r\n        configFilterControl.optionKey &&\r\n        configFilterControl.optionKey.startsWith(\"[\")\r\n      ) {\r\n        return HJson.getObj(configFilterControl.optionKey, [])\r\n      }\r\n      if (configFilterControl && configFilterControl.getSourceData) {\r\n        return configFilterControl.getSourceData()\r\n      }\r\n      // if (onePage && onePage._dataOptions && onePage._dataOptions[optionKey]) {\r\n      //   return onePage._dataOptions[optionKey]\r\n      // }\r\n      return []\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigTableFilterControl\r\n","import React from \"react\"\r\nimport { MyBase } from \"@macashipo/mlib\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigTableFilterControl from \"../../hooks/useConfigTableFilterControl\"\r\nimport styled from \"styled-components\"\r\nimport i18next from \"i18next\"\r\nimport { FlowGetPlaceHolder, KMore } from \"src/helpers/Flows/TableFilter\"\r\nconst Wrap = styled.div`\r\n  & .form-control {\r\n    padding: 0px;\r\n    height: auto;\r\n    border: 0px;\r\n  }\r\n`\r\nexport default function MTFCSelect2(props) {\r\n  const oneFilterControl = props.oneFilterControl\r\n  const ctfc = useConfigTableFilterControl({ props })\r\n  const { currentValue } = ctfc\r\n  // console.warn(\"render MTFCSelect2:\", currentValue)\r\n  //khi thay doi multi, ko bi anh huong qua nhieu toi viec load ban dau\r\n  let _isMulti = false\r\n  let _moreAttrs = {}\r\n  if (ctfc.more) {\r\n    if (ctfc.more[KMore.multi] == true) {\r\n      _isMulti = true\r\n    }\r\n    if (ctfc.more[KMore.select2]) {\r\n      if (ctfc.more[KMore.select2].isMulti == true) {\r\n        _isMulti = true\r\n      }\r\n      if (ctfc.more[KMore.select2].moreProps) {\r\n        _moreAttrs = ctfc.more[KMore.select2].moreProps\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <WrapControl {...props}>\r\n      <Wrap className=\"mtfc-select2\">\r\n        <MyBase\r\n          type=\"select2\"\r\n          className=\"form-control\"\r\n          value={currentValue}\r\n          onChange={v => {\r\n            console.warn(\"onChange:\", v)\r\n            if (v) {\r\n              if (Array.isArray(v)) {\r\n                if (v.length > 0) {\r\n                  ctfc.updateData(\r\n                    v.map((vv, ii) => {\r\n                      return {\r\n                        Value: vv.Value,\r\n                        Text: vv.Text,\r\n                      }\r\n                    })\r\n                  )\r\n                } else {\r\n                  ctfc.clearValue()\r\n                }\r\n              } else {\r\n                ctfc.updateData({\r\n                  Value: v.Value,\r\n                  Text: v.Text,\r\n                })\r\n              }\r\n            } else {\r\n              ctfc.clearValue()\r\n            }\r\n          }}\r\n          attrs={{\r\n            isClearable: true,\r\n            isMulti: _isMulti,\r\n            closeMenuOnSelect: _isMulti === true ? false : true,\r\n            placeholder: FlowGetPlaceHolder({\r\n              oneFilterControl: oneFilterControl,\r\n              defaultValue: i18next.t(\"Select...\"),\r\n            }),\r\n            ..._moreAttrs,\r\n          }}\r\n          fnList={{\r\n            getSourceData: () => {\r\n              return ctfc.getSourceData()\r\n            },\r\n          }}\r\n        />\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n"],"sourceRoot":""}