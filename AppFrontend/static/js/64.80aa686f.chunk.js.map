{"version":3,"sources":["modules/adminpanel/MyButton/Types/api.tsx","helpers/Flows/Button.js","modules/adminpanel/MyButton/Types/ext.tsx"],"names":["MyButtonLink","_requestApi","props","oneButton","fnList","changeIsLoading","HApi","apiGeneric","getApiRequest","data","getApiQuery","fnListMyPage","fnGetSharedRequestData","then","res","console","warn","HQuery","parseResponseButtonApi","_moreObj","parseResponseWhenSuccess","catch","err","this","getMorePropsButton","onClick","checkConfirmMsg","getTitleDisplay","MyButtonExt","KMoreOfButton","apiCheckShowModal","acceptType","apiUrlAfter","title","tooltip","FlowCheckShowModal","customQuery","cb","_configCheckShow","_request","method","url","path","name","ApiGeneric","request","successCallBack","response","_config","HUtils","get","IsShow","result","FormData","errorCallBack","error","_configButton","NeedReload","fnReloadPage","NeedReloadList","fnReloadList","_moreProps","ConfirmMsg","fnListUI","fnshowConfirm","msg","onClickOK","state","setFromComponent","React","Component"],"mappings":"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","file":"static/js/64.80aa686f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { HApi, HQuery } from \"src/core/helpers\"\r\nimport MyButtonExt from \"./ext\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nclass MyButtonLink extends MyButtonExt {\r\n  componentDidMount() {}\r\n  _requestApi = () => {\r\n    const { oneButton, fnList } = this.props\r\n    oneButton.changeIsLoading(true)\r\n    HApi.apiGeneric({\r\n      ...oneButton.getApiRequest(),\r\n      data: oneButton.getApiQuery({\r\n        ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n      }),\r\n    })\r\n      .then(res => {\r\n        console.warn(\"res\", res)\r\n        HQuery.parseResponseButtonApi(res, oneButton._moreObj)\r\n        this.parseResponseWhenSuccess(res)\r\n        oneButton.changeIsLoading(false)\r\n      })\r\n      .catch(err => {\r\n        oneButton.changeIsLoading(false)\r\n      })\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    // console.warn(\"render Button api\", this.props)\r\n    return (\r\n      <Button\r\n        {...this.getMorePropsButton()}\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          this.checkConfirmMsg(() => {\r\n            this._requestApi()\r\n          })\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonLink\r\n","import { ApiGeneric } from \"src/services/apiServices\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { HUtils } from \"@macashipo/mlib\"\r\nexport const KMoreOfButton = {\r\n  apiCheckShowModal: \"apiCheckShowModal\",\r\n  acceptType: \"acceptType\", //upload\r\n  apiUrlAfter: \"apiUrlAfter\", //upload\r\n  title: \"title\", //show title cua button\r\n  tooltip: \"tooltip\", //show tooltip cua button, chua su dung\r\n}\r\n\r\nexport const FlowCheckShowModal = ({\r\n  oneButton,\r\n  fnList,\r\n  customQuery,\r\n  cb,\r\n} = {}) => {\r\n  if (oneButton) {\r\n    let _configCheckShow = oneButton._moreObj[KMoreOfButton.apiCheckShowModal]\r\n    if (_configCheckShow) {\r\n      oneButton.changeIsLoading(true)\r\n      let _request = {\r\n        method: \"POST\",\r\n        url: _configCheckShow.url,\r\n        path: _configCheckShow.path,\r\n        name: _configCheckShow.name,\r\n      }\r\n      ApiGeneric({\r\n        request: _request,\r\n        data: oneButton.getApiQuery({\r\n          ...fnListMyPage.fnGetSharedRequestData(fnList),\r\n          ...customQuery,\r\n        }),\r\n        successCallBack: response => {\r\n          console.warn(\"response\", response)\r\n          let _config = HUtils.get(response, \"Data.Config\")\r\n          if (_config && _config.IsShow) {\r\n            if (cb) {\r\n              cb({\r\n                result: true,\r\n                data: _config.FormData || {},\r\n              })\r\n            }\r\n          } else {\r\n            if (cb) {\r\n              cb({\r\n                result: false,\r\n              })\r\n            }\r\n          }\r\n          oneButton.changeIsLoading(false)\r\n        },\r\n        errorCallBack: (error, response) => {\r\n          oneButton.changeIsLoading(false)\r\n          if (cb) {\r\n            cb({\r\n              result: false,\r\n            })\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb({\r\n          result: true,\r\n        })\r\n      }\r\n    }\r\n  } else {\r\n    if (cb) {\r\n      cb({\r\n        result: true,\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { OneButton } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { KMoreOfButton } from \"src/helpers/Flows/Button\"\r\nimport { fnListMyPage, fnListUI } from \"src/helpers/fnList\"\r\ninterface IProps {\r\n  oneButton: OneButton\r\n  fnList?: any\r\n}\r\nclass MyButtonExt extends React.Component<IProps> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    const { oneButton } = this.props\r\n    oneButton.setFromComponent(this)\r\n  }\r\n  componentDidMount() {}\r\n  onClick = () => {}\r\n  parseResponseWhenSuccess = (res: any) => {\r\n    const { oneButton, fnList } = this.props\r\n    if (oneButton._configButton.NeedReload) {\r\n      fnListMyPage.fnReloadPage(fnList)\r\n    } else if (oneButton._configButton.NeedReloadList) {\r\n      fnListMyPage.fnReloadList(fnList)\r\n    }\r\n  }\r\n  getMorePropsButton = () => {\r\n    const { oneButton } = this.props\r\n    let _moreProps: any = {}\r\n    if (oneButton && oneButton._moreObj) {\r\n      if (oneButton._moreObj[KMoreOfButton.title]) {\r\n        _moreProps.title = oneButton._moreObj[KMoreOfButton.title]\r\n      }\r\n    }\r\n    return _moreProps\r\n  }\r\n  checkConfirmMsg = cb => {\r\n    const { oneButton } = this.props\r\n    //test\r\n    // oneButton._configButton.ConfirmMsg = \"Hello\"\r\n    if (oneButton && oneButton._configButton.ConfirmMsg) {\r\n      fnListUI.fnshowConfirm({\r\n        title: \"Confirm\",\r\n        msg: oneButton._configButton.ConfirmMsg,\r\n        onClickOK: () => {\r\n          if (cb) {\r\n            cb()\r\n          }\r\n        },\r\n      })\r\n    } else {\r\n      if (cb) {\r\n        cb()\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { oneButton } = this.props\r\n    return (\r\n      <Button\r\n        {...oneButton.getMorePropsButton()}\r\n        onClick={() => {\r\n          this.onClick()\r\n        }}\r\n      >\r\n        {oneButton.getTitleDisplay()}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyButtonExt\r\n"],"sourceRoot":""}