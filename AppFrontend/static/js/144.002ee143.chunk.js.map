{"version":3,"sources":["modules/adminpanel/MyTableFilterControl/Types/select2content.js","modules/adminpanel/MyTableFilterControl/Types/_wrapControl.js","modules/adminpanel/hooks/fnListOfFilterControl.js","modules/adminpanel/hooks/useConfigTableFilterControl.js"],"names":["Wrap","styled","div","MTFCSelect2Content","props","ctfc","useConfigTableFilterControl","currentValue","className","type","value","onChange","v","console","warn","Value","_obj","replace","updateData","Text","Filter","attrs","fnList","getSourceData","MTFCWrapControl","_title","oneFilterControl","title","HIs","isJsonString","HJson","getObj","children","fnListOfFilterControl","configFilterControl","_fnList","kfnGetTitleControl","refConfigFilterControl","React","useRef","current","more","refFnList","forceUpdate","useForceUpdate","custom","_fnGetFilterOutFromValue","MyTableFilterControlHelpers","ConfigByType","fn","setFnGetFilterOutFromValue","_loadFirst","setFromComponent","loadLocal","clearValue","updateCurrentValue","fnListMyPage","fnGetOnePage","clear","optionKey","startsWith"],"mappings":"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","file":"static/js/144.002ee143.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { MyBase } from \"@macashipo/mlib\"\r\nimport WrapControl from \"./_wrapControl\"\r\nimport useConfigTableFilterControl from \"../../hooks/useConfigTableFilterControl\"\r\nimport styled from \"styled-components\"\r\nconst Wrap = styled.div`\r\n  & .form-control {\r\n    padding: 0px;\r\n    height: auto;\r\n    border: 0px;\r\n  }\r\n`\r\nexport default function MTFCSelect2Content(props) {\r\n  const ctfc = useConfigTableFilterControl({ props })\r\n  const { currentValue } = ctfc\r\n  return (\r\n    <WrapControl {...props}>\r\n      <Wrap className=\"mtfc-select2\">\r\n        <MyBase\r\n          type=\"select2\"\r\n          className=\"form-control\"\r\n          value={currentValue}\r\n          onChange={v => {\r\n            console.warn(\"onChange:\", v, v.Value)\r\n            let _value = \"\"\r\n            if (v) {\r\n              _value = v.Value.replace(/(\\d+)/g, \";$1;\")\r\n              _value = _value.replace(/,/g, \"|\")\r\n              let _obj = { type: \"RegexFilter\", value: _value }\r\n              ctfc.updateData({\r\n                Value: v.Value,\r\n                Text: v.Text,\r\n                Filter: _obj,\r\n              })\r\n            }\r\n          }}\r\n          attrs={{}}\r\n          fnList={{\r\n            getSourceData: () => {\r\n              return ctfc.getSourceData()\r\n            },\r\n          }}\r\n        />\r\n      </Wrap>\r\n    </WrapControl>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { HIs, HJson } from \"@macashipo/mlib\"\r\nconst Wrap = styled.div`\r\n  margin-bottom: 0.5rem;\r\n  min-width: 300px;\r\n  & input {\r\n    padding: 0.25rem;\r\n    line-height: 1rem;\r\n    height: 1.5rem;\r\n  }\r\n  & .alert {\r\n    padding: 0.5rem;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`\r\nexport default function MTFCWrapControl(props) {\r\n  const { oneFilterControl } = props\r\n  // console.warn(\"render MTFCWrapControl:\", props)\r\n  let _title = oneFilterControl.title\r\n  if (HIs.isJsonString(_title)) {\r\n    let _obj = HJson.getObj(_title, {})\r\n    if (_obj && _obj.title) {\r\n      _title = _obj.title\r\n    }\r\n  }\r\n  return (\r\n    <Wrap className=\"mtfcw-ap col-4\">\r\n      <div>{_title}</div>\r\n      <div>{props.children}</div>\r\n    </Wrap>\r\n  )\r\n}\r\n","import { HIs, HJson } from \"@macashipo/mlib\"\r\nimport { kfnGetTitleControl } from \"src/helpers/fnList\"\r\n\r\nconst fnListOfFilterControl = {\r\n  init({ props, configFilterControl }) {\r\n    // const configFormControl = props.configFormControl || {}\r\n    // const { fieldName, more } = configFormControl\r\n    let _fnList = {\r\n      ...props.fnList,\r\n    }\r\n    // const more = oneTableCell.more\r\n    // _fnList[kfnGetApiPath] = () => {\r\n    //   return HUtils.runFuntion(oneTableCell.fnList, kfnGetApiPath, [])\r\n    // }\r\n    _fnList[kfnGetTitleControl] = () => {\r\n      let _title = configFilterControl.title\r\n      if (HIs.isJsonString(_title)) {\r\n        let _obj = HJson.getObj(_title, {})\r\n        if (_obj && _obj.title) {\r\n          _title = _obj.title\r\n        }\r\n      }\r\n      return _title\r\n    }\r\n    return _fnList\r\n  },\r\n}\r\n\r\nconst helpersOfFilterControl = {}\r\nexport { helpersOfFilterControl, fnListOfFilterControl }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { HJson, MyTableFilterControlHelpers } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport { fnListOfFilterControl } from \"./fnListOfFilterControl\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\n\r\n// var countForceUpdate = 0\r\n// const countForceUpdateMax = 200\r\nfunction useConfigTableFilterControl({ props } = {}) {\r\n  // countForceUpdate++\r\n  const refConfigFilterControl = React.useRef(props.oneFilterControl)\r\n  const configFilterControl = refConfigFilterControl.current\r\n  const { type, currentValue, more } = configFilterControl //title, fieldName, optionKey, onePage\r\n  // const [valueFU, setValueFU] = useState(0) // integer state\r\n\r\n  const refFnList = React.useRef(\r\n    fnListOfFilterControl.init({ props, configFilterControl })\r\n  )\r\n  const fnList = refFnList.current\r\n\r\n  const forceUpdate = useForceUpdate()\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n\r\n  if (props.custom) {\r\n    if (configFilterControl[\"_applyCustom\"] == null) {\r\n      if (props.custom.more) {\r\n        configFilterControl.more = {\r\n          ...configFilterControl.more,\r\n          ...props.custom.more,\r\n        }\r\n      }\r\n      configFilterControl[\"_applyCustom\"] = true\r\n    }\r\n  }\r\n\r\n  if (configFilterControl) {\r\n    if (configFilterControl._fnGetFilterOutFromValue == null) {\r\n      if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[type]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[type][\"getFilterOut\"](\r\n            value,\r\n            configFilterControl\r\n          )\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      } else if (\r\n        MyTableFilterControlHelpers.ConfigByType &&\r\n        MyTableFilterControlHelpers.ConfigByType[\"_default\"]\r\n      ) {\r\n        const fn = value => {\r\n          return MyTableFilterControlHelpers.ConfigByType[\"_default\"][\r\n            \"getFilterOut\"\r\n          ](value, configFilterControl)\r\n        }\r\n        configFilterControl.setFnGetFilterOutFromValue(fn)\r\n      }\r\n    }\r\n    if (configFilterControl._loadFirst !== false) {\r\n      if (configFilterControl.setFromComponent) {\r\n        configFilterControl.setFromComponent({\r\n          forceUpdate: () => {\r\n            console.warn(\"forceupdateee\")\r\n            forceUpdate()\r\n          },\r\n        })\r\n      }\r\n      configFilterControl.loadLocal()\r\n      configFilterControl._loadFirst = false\r\n      // console.warn(\"load first\", configFilterControl)\r\n    }\r\n  }\r\n\r\n  return {\r\n    forceUpdate,\r\n    configFilterControl,\r\n    currentValue,\r\n    more,\r\n    fnList,\r\n    clearValue: () => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        console.warn(\"clear Value\", props, configFilterControl)\r\n        let _onePage = fnListMyPage.fnGetOnePage(fnList)\r\n        configFilterControl.clear()\r\n        configFilterControl.updateCurrentValue(null)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    updateData: v => {\r\n      if (configFilterControl && configFilterControl.updateCurrentValue) {\r\n        configFilterControl.updateCurrentValue(v)\r\n      }\r\n      forceUpdate()\r\n    },\r\n    getSourceData: () => {\r\n      //bo sung source list tu json string Source\r\n      // console.warn(\"configFilterControl\", configFilterControl)\r\n      if (\r\n        configFilterControl &&\r\n        configFilterControl.optionKey &&\r\n        configFilterControl.optionKey.startsWith(\"[\")\r\n      ) {\r\n        return HJson.getObj(configFilterControl.optionKey, [])\r\n      }\r\n      if (configFilterControl && configFilterControl.getSourceData) {\r\n        return configFilterControl.getSourceData()\r\n      }\r\n      // if (onePage && onePage._dataOptions && onePage._dataOptions[optionKey]) {\r\n      //   return onePage._dataOptions[optionKey]\r\n      // }\r\n      return []\r\n    },\r\n  }\r\n}\r\n\r\nexport default useConfigTableFilterControl\r\n"],"sourceRoot":""}