{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/actions.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","MTCActions","props","ctc","useConfigTableCell","moreObj","listActions","listAction","filter","v","i","map","_title","FlowGetTextDisplay","more","isButton","Value","Text","className","color","outline","onClick","console","warn","type","onClickApi","customMore","V","TableCell_ClickLink","onClickForm","isFetching","kfnGetScreenCode","fnListOfTableCell","oneTableCell","_fnList","fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","overlay","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","setIsFetching","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","updateFieldData","opts","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","style","Object","keys","renderHide","classNameWrap","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","title","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/103.20537957.chunk.js","sourcesContent":["import { MyLoading, MyUI } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { Popover } from \"src/core/components\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListPopover } from \"src/helpers/fnList\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetTextDisplay } from \"src/helpers/Flows/TableCell\"\r\nconst WrapCell = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  padding: 2px;\r\n  & .a-item {\r\n    width: 100%;\r\n  }\r\n  & button {\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    word-break: break-all;\r\n    width: 100%;\r\n    // border: 0px;\r\n    padding: 5px 2px;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 2px;\r\n    justify-content: center;\r\n  }\r\n`\r\n\r\nexport default function MTCActions(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const { moreObj } = ctc\r\n  let listActions = []\r\n  // console.warn(\"render MTCActions:\", props, ctc)\r\n  if (moreObj.listAction) {\r\n    listActions = moreObj.listAction\r\n      .filter((v, i) => {\r\n        return true\r\n      })\r\n      .map((v, i) => {\r\n        let _title = FlowGetTextDisplay({ ...ctc, more: v, isButton: true })\r\n        // let _title = ctc.oneTableCell.getTextDisplay({\r\n        //   title: v.title,\r\n        //   customMore: v,\r\n        // })\r\n        return {\r\n          ...v,\r\n          Value: i,\r\n          Text: _title,\r\n        }\r\n      })\r\n  }\r\n  // console.warn(\"render MTCActions:\", moreObj, listActions)\r\n  return (\r\n    <WrapCell className=\"mtc-actions\">\r\n      {listActions &&\r\n        listActions\r\n          .filter((v, i) => {\r\n            return v.Text !== null && v.Text !== \"\"\r\n          })\r\n          .map((v, i) => {\r\n            return (\r\n              <div key={i} className=\"a-item\">\r\n                <Button\r\n                  color=\"primary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    console.warn(\"onClick\", v)\r\n                    switch (v.type) {\r\n                      case \"api\":\r\n                        ctc.onClickApi({ customMore: v })\r\n                        break\r\n                      case \"link\":\r\n                        V.TableCell_ClickLink({ ...ctc, more: v })\r\n                        break\r\n                      case \"form\":\r\n                        ctc.onClickForm({ customMore: v })\r\n                        break\r\n                    }\r\n                  }}\r\n                >\r\n                  {ctc.isFetching ? <MyLoading type=\"circle\" /> : v.Text}\r\n                </Button>\r\n              </div>\r\n            )\r\n          })}\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}