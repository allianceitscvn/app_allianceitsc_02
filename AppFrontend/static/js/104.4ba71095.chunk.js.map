{"version":3,"sources":["modules/adminpanel/MyTableCell/Types/actions_menu.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js"],"names":["WrapCell","styled","div","MTCActionsPopover","props","ctc","listActions","style","minWidth","maxHeight","maxWidth","sourceData","type","onClick","item","console","warn","onClickApi","customMore","cbBeforeRequest","setIsFetching","cbAfterRequest","V","TableCell_ClickLink","more","onClickForm","fnListPopover","hidePopover","MCTActionMenu","useConfigTableCell","moreObj","listAction","filter","v","i","map","_title","oneTableCell","getTextDisplay","title","Value","Text","className","overlay","propsOverlay","overlayClassName","placement","destroyTooltipOnHide","isFetching","FlowGetTitleTooltipOfColumn","color","outline","kfnGetScreenCode","fnListOfTableCell","_fnList","fnList","kfnGetSourceData","row","extra","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","length","Array","isArray","kfnRenderBadge","count","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","Cell_GetHeaderTitle","kfnGetConfigInMore","key","df","_result","hasOwnProperty","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","cell","getValue","FlowGetCanShow","KMore","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","msg","error","onReExpand","HUtils","runFuntion","args","configBadge","badge","show","_count","_tooltip","fCount","fTooltip","html","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","Id","_screenCode","_configFileFromMore","fID","configFile","file","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","fieldName","canUpload","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","useState","undefined","valueCell","setValueCell","isUpdating","setIsUpdating","refOneTableCell","React","useRef","OneTableCell","current","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","log","IsLocked","canEdit","useEffect","updateFieldData","opts","cbError","apiController","fnGetApiPath","newValue","cbSuccess","fnForceUpdateTable","cbSuccessUpdate","e","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","disabled","button","Object","keys","renderHide","classNameWrap","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","moreBtns","moreConfig","renderLoadingOverlay","size","customShowForm","FlowCheckApiShowModal","cb","canShow","config","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","MyModal","showFromMyForm","confirmMsg","showConfirm","titleConfirm","onClickOK","cModal","finally","hide","onClickFiles","showFromComponent","propsComponent","backdrop","showHeader","updateCell","onChangeData","data","mergeObjIfExist"],"mappings":"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","file":"static/js/104.4ba71095.chunk.js","sourcesContent":["import { MyUI } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { Popover, MyLoading } from \"src/core/components\"\r\nimport styled from \"styled-components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListPopover } from \"src/helpers/fnList\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetTitleTooltipOfColumn } from \"src/helpers/Flows/TableCell\"\r\nconst WrapCell = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  & button {\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    word-break: break-all;\r\n    width: 100%;\r\n    border: 0px;\r\n    padding: 5px 2px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 1.5rem;\r\n    height: 36px;\r\n  }\r\n`\r\n\r\nfunction MTCActionsPopover(props) {\r\n  const { ctc, listActions } = props\r\n  return (\r\n    <div style={{ minWidth: \"200px\", maxHeight: \"300px\", maxWidth: \"300px\" }}>\r\n      <MyUI\r\n        sourceData={listActions}\r\n        type=\"actions_menu\"\r\n        onClick={item => {\r\n          console.warn(\"onClick:\", item)\r\n          switch (item.type) {\r\n            case \"api\":\r\n              ctc.onClickApi({\r\n                customMore: item,\r\n                cbBeforeRequest: () => {\r\n                  ctc.setIsFetching(true)\r\n                },\r\n                cbAfterRequest: () => {\r\n                  ctc.setIsFetching(false)\r\n                },\r\n              })\r\n              break\r\n            case \"link\":\r\n              V.TableCell_ClickLink({ ...ctc, more: item })\r\n              break\r\n            case \"form\":\r\n              ctc.onClickForm({ customMore: item })\r\n              break\r\n          }\r\n          fnListPopover.hidePopover(props)\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function MCTActionMenu(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  const { moreObj } = ctc\r\n  let listActions = []\r\n  // console.warn(\"render MCTActionMenu:\", props, ctc)\r\n  if (moreObj.listAction) {\r\n    listActions = moreObj.listAction\r\n      .filter((v, i) => {\r\n        return true\r\n      })\r\n      .map((v, i) => {\r\n        let _title = ctc.oneTableCell.getTextDisplay({\r\n          title: v.title,\r\n          customMore: v,\r\n        })\r\n        return {\r\n          ...v,\r\n          Value: i,\r\n          Text: _title || \"No title\",\r\n        }\r\n      })\r\n  }\r\n  return (\r\n    <WrapCell className=\"mtc-actions_menu\">\r\n      {listActions && (\r\n        <Popover\r\n          overlay={propsOverlay => {\r\n            return (\r\n              <MTCActionsPopover\r\n                ctc={ctc}\r\n                {...props}\r\n                listActions={listActions}\r\n                {...propsOverlay}\r\n              />\r\n            )\r\n          }}\r\n          overlayClassName=\"m-popover m-popover-full\"\r\n          placement=\"bottomRight\"\r\n          destroyTooltipOnHide={true}\r\n        >\r\n          {ctc.isFetching ? (\r\n            <MyLoading type=\"circle\" />\r\n          ) : (\r\n            <Button\r\n              title={FlowGetTitleTooltipOfColumn({ ...ctc })}\r\n              color=\"primary\"\r\n              outline\r\n              onClick={() => {\r\n                console.warn(\"show\")\r\n              }}\r\n            >\r\n              <i className=\"fa fa-ellipsis-h\"></i>\r\n            </Button>\r\n          )}\r\n        </Popover>\r\n      )}\r\n    </WrapCell>\r\n  )\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n"],"sourceRoot":""}