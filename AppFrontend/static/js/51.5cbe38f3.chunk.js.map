{"version":3,"sources":["modules/adminpanel/MyTableCell/ExtentTypes/textarea.js","modules/adminpanel/MyTableCell/ExtentTypes/_types.js","modules/adminpanel/MyTableCell/Types/_btn_editinmodal.js","modules/adminpanel/MyUI/Types/html_editor_rte.js","modules/adminpanel/MyTableCell/Types/_barTopRight.js","modules/adminpanel/hooks/fnListOfTableCell.js","modules/adminpanel/hooks/useConfigTableCell.js","services/apiConfigApi.js","modules/adminpanel/MyUI/Types/html_editor.js","modules/adminpanel/MyTableCell/Types/html_editor.js"],"names":["WrapModal","styled","div","ModeType","ModalHtmlEditor","props","valueCell","fnList","onSave","canEdit","title","React","useState","v","setV","mode","isLoading","setIsLoading","style","maxHeight","MyModal","renderHeader","cModal","inMyModal","hideClose","className","position","right","Button","disabled","onClick","changeLoading","HUtils","runFuntion","cbSuccess","r","console","warn","fnListModal","hideModal","cbError","e","msg","AHUI","color","type","value","onChange","attrs","MyTableCellExtentTypes","textarea","MTCE_textarea","textarea_full","WrapButton","button","BtnEditInModal","row","cell","moreConfig","more","_configEditInModal","configEditInModal","ctc","ModalExtentByType","ModalExtentTypes","_fieldName","fieldName","customFieldName","titleTooltip","showFromComponent","propsComponent","fnListMyTableCell","fnGetHeaderTitle","updateFieldData","showHeader","backdrop","showChangeSize","showMiniClose","canShow","show","ModalHtmlEditorRTE","WrapIcon","WrapButtonUpload","WrapButtonClear","WrapDiff","WrapDiffTopBar","WrapButtonPreview","ModalDiffViewer","selectorDiff","setSelectorDiff","currentDiff","setCurrentDiff","_data","fnGetData","useEffect","_selector","document","querySelectorAll","length","countDiff","oldValue","newValue","_current","scrollIntoView","BtnDiffView","configDiffView","size","modalScrollInside","fields","_old","_new","JSON","parse","stringify","error","showDiffOnly","PopoverEdit","refInput","useRef","marginBottom","ref","defaultValue","display","flexDirection","alignItems","justifyContent","current","log","hide","BtnEdit","config","htmlEditorLib","itemOption","Value","modeToolbar","moreProps","morePropsHtmlEditor","updateCell","opts","overlay","propsOverlay","overlayClassName","placement","destroyTooltipOnHide","BtnCheckBox","configCheckbox","extra","fnGetExtraDataTable","Columns","_cellFieldName","useConfigTableCell","_newValue","defaultChecked","checked","BtnFileUpload","_countFiles","configFileIcon","file","_extraFieldName","showBadge","Photos","onClickFiles","canUpload","fnRenderBadge","count","BtnClear","_valueEmpty","KMore","configClear","hasOwnProperty","BtnDeleteRow","oneTableCell","width","maxWidth","styleBody","whiteSpace","colorOK","onOK","moreQuery","onCancel","BtnShowPreviewHTML","html","BtnShowBlockMobile","data","BtnShowWarning","configWarning","_msg","_color","_icon","icon","MTC_BarTopRight","moreBtns","_moreBtns","_configDiffView","_canShowDiffView","showCondition","Object","keys","k","unshift","_showCanEdit","_typeEdit","configEditIcon","using","showWhen","key","_showFileUpload","_showCheckBox","_showPreviewHTML","showPreviewHTML","_showClear","showClear","push","_showDeleteRow","showDeleteRow","showBlockMobile","showTestCanEdit","Id","kfnGetScreenCode","fnListOfTableCell","_fnList","kfnGetSourceData","_optionKey","Type","source","_sourceList","fnListMyPage","getSourceList","AHOptions","sourceField","startsWith","HJson","getObj","_optionField","slice","Array","isArray","kfnRenderBadge","customMore","tooltip","helpersOfTableCell","renderBadge","kfnGetHeaderTitle","customTitle","V","Cell_GetHeaderTitle","kfnGetConfigInMore","df","_result","kfnGetConfigModal","Cell_GetConfigModal","kfnGetIsHide","getValue","FlowGetCanShow","hideWhenEmpty","hideWhenNull","MyTableCellHelpers","onSendMsg","onReExpand","args","configBadge","badge","_count","_tooltip","fCount","fTooltip","kfnRequestUpdate","kfnRequestCustom","ModalContentFiles","_id","_screenCode","_configFileFromMore","fID","configFile","needRequestPhotos","pasteAsFile","showUploadFromGGDrive","requestData","ScreenCode","ProjectId","FieldName","ATCHelper","_extra","_more","_canEdit","CanEdit","fCanEdit","canEditF","indexOf","_arrcanEditF","split","lockF","fLock","_fLock","_arrLock","countForceUpdate","undefined","setValueCell","isUpdating","setIsUpdating","isFetching","setIsFetching","refOneTableCell","OneTableCell","custom","refFnList","_onePage","updateOnePage","fnGetOnePage","forceUpdate","useForceUpdate","updateValueCellFromRow","cbWhenEqual","_value","IsLocked","moreObj","apiController","fnGetApiPath","fnForceUpdateTable","cbSuccessUpdate","requestCustom","getSharedConfig","getMoreAttrsFromCustomConfig","moreAttrs","getMorePropsButton","defaultStyle","_moreProps","_style","renderHide","classNameWrap","customConfig","cls","scrwhhover","styledMini","styleWrap","overideStyle","Cell_GetStyleCell","onUpdateRow","newRow","getTextDisplaySelect","_display","fDisplay","fShow","_sourceData","fnGetSourceData","_textFromOption","HOptions","getTextDisplayOfValueFromOptions","renderTopRight","renderLoadingOverlay","onClickForm","customShowForm","FlowCheckApiShowModal","cb","configForm","getConfigForm","_defaultValuesForm","fDefaultValues","configFormToShow","MyFormControlHelpers","defaultValues","onSubmitForm","valuesForm","myForm","configApi","getConfigApi","Promise","resolve","reject","query","assign","apiWithConfigApi","then","res","FlowParseResponseAndNeedReload","response","closeMyModal","catch","configModal","getConfigModal","showFromMyForm","onClickApi","cbBeforeRequest","cbAfterRequest","confirmMsg","showConfirm","titleConfirm","onClickOK","finally","onChangeData","mergeObjIfExist","sourceData","valueSelected","setMode","onBlur","WrapCell","MTCHtmlEditor","styleControl"],"mappings":"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","file":"static/js/51.5cbe38f3.chunk.js","sourcesContent":["import { HUtils, MyBase, MyLib, MyUI } from \"@macashipo/mlib\"\r\nimport React from \"react\"\r\nimport { Button } from \"reactstrap\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\nimport styled from \"styled-components\"\r\nimport { fnListModal } from \"src/helpers/fnList\"\r\n\r\nconst WrapModal = styled.div`\r\n  & .rdw-editor-main {\r\n    border: 1px solid #f1f1f1;\r\n    min-height: 100px;\r\n    max-height: 300px;\r\n    padding: 0px 5px;\r\n  }\r\n  & .a-mode-textarea textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n  & .a-mode-preview {\r\n    max-height: calc(100vh - 10rem);\r\n    overflow: auto;\r\n  }\r\n`\r\n\r\nconst ModeType = {\r\n  textarea: \"textarea\",\r\n}\r\n\r\nfunction ModalHtmlEditor(props) {\r\n  const { valueCell, fnList, onSave, canEdit, title } = props\r\n  const [v, setV] = React.useState(valueCell || \"\")\r\n  const [mode, setMode] = React.useState(ModeType.textarea)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  return (\r\n    <WrapModal style={{ maxHeight: \"calc(100vh - 5rem)\" }}>\r\n      {MyModal.renderHeader({\r\n        cModal: props.inMyModal,\r\n        hideClose: true,\r\n        title: props => {\r\n          return (\r\n            <>\r\n              <div className=\"btn-group\">{title}</div>\r\n              <div\r\n                className=\"btn-group\"\r\n                style={{ position: \"absolute\", right: \"1rem\" }}\r\n              >\r\n                {canEdit === true && (\r\n                  <Button\r\n                    disabled={isLoading}\r\n                    onClick={() => {\r\n                      if (onSave) {\r\n                        onSave(v, {\r\n                          fnList: {\r\n                            ...fnList,\r\n                            changeLoading: isLoading => {\r\n                              setIsLoading(isLoading)\r\n                            },\r\n                          },\r\n                        })\r\n                      } else {\r\n                        HUtils.runFuntion(fnList, \"updateCell\", [\r\n                          v,\r\n                          {\r\n                            cbSuccess: r => {\r\n                              console.warn(\"cbSuccess:\", r)\r\n                              setIsLoading(false)\r\n                              fnListModal.hideModal(fnList)\r\n                            },\r\n                            cbError: e => {\r\n                              console.warn(\"cbErrro:\", e)\r\n                              if (e.msg) {\r\n                                AHUI.showToastWarning(e.msg)\r\n                              }\r\n                              setIsLoading(false)\r\n                            },\r\n                          },\r\n                        ])\r\n                      }\r\n                    }}\r\n                    color={\"success\"}\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </>\r\n          )\r\n        },\r\n      })}\r\n      <div>\r\n        {mode === ModeType.textarea && (\r\n          <div className=\"a-mode-textarea\">\r\n            <MyBase\r\n              type=\"textarea\"\r\n              value={v}\r\n              onChange={v => {\r\n                setV(v)\r\n              }}\r\n              attrs={{\r\n                disabled: canEdit !== true,\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </WrapModal>\r\n  )\r\n}\r\n\r\nexport default ModalHtmlEditor\r\n","import MTCE_textarea from \"./textarea\"\r\nconst MyTableCellExtentTypes = {\r\n  textarea: MTCE_textarea,\r\n  textarea_full: MTCE_textarea,\r\n}\r\n\r\nexport default MyTableCellExtentTypes\r\n","import { MyModal } from \"src/core/components\"\r\nimport { fnListModal, fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport styled from \"styled-components\"\r\nimport ModalExtentTypes from \"../ExtentTypes/_types\"\r\nconst WrapButton = styled.button`\r\n  background: #fdcd55;\r\n  border: 0px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: black;\r\n`\r\n\r\nconst BtnEditInModal = props => {\r\n  const row = props.row || {}\r\n  const cell = props.cell\r\n  const moreConfig = props.moreConfig || {}\r\n  const more = props.more || {}\r\n  let _configEditInModal =\r\n    moreConfig.configEditInModal || more.configEditInModal || {}\r\n\r\n  const ctc = moreConfig.ctc || {}\r\n  const ModalExtentByType = ModalExtentTypes[\"textarea\"]\r\n  let _fieldName =\r\n    _configEditInModal.fieldName || ctc.fieldName || moreConfig.customFieldName\r\n  return (\r\n    <WrapButton\r\n      className=\"a-shwhhover\"\r\n      title={_configEditInModal.titleTooltip || \"Extent in window\"}\r\n      onClick={() => {\r\n        console.warn(\"show:\", _fieldName)\r\n        if (ModalExtentByType) {\r\n          MyModal.showFromComponent(\r\n            propsComponent => {\r\n              return (\r\n                <ModalExtentByType\r\n                  {...propsComponent}\r\n                  canEdit={ctc.canEdit}\r\n                  title={fnListMyTableCell.fnGetHeaderTitle(ctc.fnList)}\r\n                  onSave={(v, { fnList }) => {\r\n                    console.warn(\"onsave:\", v, fnList)\r\n                    ctc.updateFieldData(v, { fieldName: _fieldName })\r\n                    fnListModal.hideModal(fnList)\r\n                  }}\r\n                  valueCell={cell}\r\n                />\r\n              )\r\n            },\r\n            {\r\n              showHeader: false,\r\n              backdrop: \"static\",\r\n              showChangeSize: true,\r\n              showMiniClose: true,\r\n              // backdrop: \"static\",\r\n              fnList: {},\r\n            }\r\n          )\r\n        }\r\n      }}\r\n    >\r\n      <i className=\"fa fa-window-restore\" />\r\n    </WrapButton>\r\n  )\r\n}\r\n\r\nBtnEditInModal.canShow = function (props) {\r\n  const moreConfig = props.moreConfig || {}\r\n  const more = props.more || {}\r\n  let _configEditInModal =\r\n    moreConfig.configEditInModal || more.configEditInModal || {}\r\n  if (_configEditInModal.show === true) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport default BtnEditInModal\r\n","import React from \"react\"\r\nimport { MyUI, HUtils, MyLib, MyBase } from \"@macashipo/mlib\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport styled from \"styled-components\"\r\nimport { Button } from \"reactstrap\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\n\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  & > div {\r\n    max-height: 100px;\r\n    overflow: auto;\r\n    & p {\r\n      // display: initial;\r\n      // vertical-align: text-top;\r\n      margin-bottom: 0px;\r\n      margin-block-start: 0px;\r\n      margin-block-end: 0;\r\n      line-height: 1rem;\r\n      text-indent: 0px;\r\n    }\r\n    & br {\r\n      display: initial;\r\n      vertical-align: text-top;\r\n    }\r\n  }\r\n`\r\nconst WrapModal = styled.div`\r\n  & .rdw-editor-main {\r\n    border: 1px solid #f1f1f1;\r\n    min-height: 100px;\r\n    max-height: 300px;\r\n    padding: 0px 5px;\r\n  }\r\n  & .a-mode-textarea textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n`\r\nconst ModeType = {\r\n  html: \"html\",\r\n  textarea: \"textarea\",\r\n}\r\n\r\nfunction ModalHtmlEditorRTE(props) {\r\n  const {\r\n    sourceData,\r\n    valueSelected,\r\n    onChange,\r\n    valueCell,\r\n    fnList,\r\n    moreProps,\r\n    modeToolbar,\r\n  } = props\r\n  const [v, setV] = React.useState(valueCell || \"\")\r\n  const [mode, setMode] = React.useState(ModeType.html)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  return (\r\n    <WrapModal style={{ maxHeight: \"calc(100vh - 5rem)\" }}>\r\n      {MyModal.renderHeader({\r\n        cModal: props.inMyModal,\r\n        title: props => {\r\n          return (\r\n            <>\r\n              <div className=\"btn-group\">\r\n                <Button\r\n                  onClick={() => {\r\n                    setMode(ModeType.html)\r\n                  }}\r\n                  color={mode === ModeType.html ? \"primary\" : \"secondary\"}\r\n                >\r\n                  HTML\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    try {\r\n                      setMode(ModeType.textarea)\r\n                    } catch (error) {\r\n                      console.warn(\"parse json error!\")\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.textarea ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Code\r\n                </Button>\r\n              </div>\r\n              <div\r\n                className=\"btn-group\"\r\n                style={{ position: \"absolute\", right: \"3rem\" }}\r\n              >\r\n                <Button\r\n                  disabled={isLoading}\r\n                  onClick={() => {\r\n                    HUtils.runFuntion(fnList, \"updateCell\", [\r\n                      v,\r\n                      {\r\n                        cbSuccess: r => {\r\n                          console.warn(\"cbSuccess:\", r)\r\n                          setIsLoading(false)\r\n                          HUtils.runFuntion(fnList, \"hideModal\", [])\r\n                        },\r\n                        cbError: e => {\r\n                          console.warn(\"cbErrro:\", e)\r\n                          if (e.msg) {\r\n                            AHUI.showToastWarning(e.msg)\r\n                          }\r\n                          setIsLoading(false)\r\n                        },\r\n                      },\r\n                    ])\r\n                  }}\r\n                  color={\"success\"}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </div>\r\n            </>\r\n          )\r\n        },\r\n      })}\r\n      <div>\r\n        {mode === ModeType.html && (\r\n          <div className=\"a-mode-html\">\r\n            <MyLib\r\n              type=\"react_rte\"\r\n              html={v}\r\n              onChange={html => {\r\n                setV(html)\r\n              }}\r\n              modeToolbar={modeToolbar}\r\n              moreProps={moreProps}\r\n            />\r\n          </div>\r\n        )}\r\n        {mode === ModeType.textarea && (\r\n          <div className=\"a-mode-textarea\">\r\n            <MyBase\r\n              type=\"textarea\"\r\n              value={v}\r\n              onChange={v => {\r\n                setV(v)\r\n              }}\r\n              attrs={{}}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </WrapModal>\r\n  )\r\n}\r\n\r\nexport default ModalHtmlEditorRTE\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { HIs, HJson, HUtils, MyLib, MyPage, MyUI } from \"@macashipo/mlib\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport styled from \"styled-components\"\r\nimport { MyModal, Popover, Tooltip } from \"src/core/components\"\r\nimport { KMore } from \"src/helpers/Flows/TableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport { AiOutlineFile } from \"react-icons/ai\"\r\nimport BtnEditInModal from \"./_btn_editinmodal\"\r\nimport { ModalHtmlEditor } from \"./html_editor\"\r\nimport ModalHtmlEditorRTE from \"../../MyUI/Types/html_editor_rte\"\r\nconst WrapIcon = styled.div`\r\n  position: absolute;\r\n  top: 8px;\r\n  right: 4px;\r\n  font-size: 18px;\r\n  border-radius: 4px;\r\n  line-height: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  & button {\r\n    border-radius: 4px;\r\n  }\r\n  padding: 0px;\r\n  &:hover .a-shwhhover {\r\n    display: block;\r\n  }\r\n  & .a-shwhhover {\r\n    display: none;\r\n  }\r\n`\r\nconst WrapButton = styled.button`\r\n  background: #fdcd55;\r\n  border: 0px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: black;\r\n`\r\n\r\nconst WrapButtonUpload = styled.button`\r\n  padding: 0;\r\n  background: inherit;\r\n  border: 0px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: black;\r\n  & .mct-ui-badge {\r\n    transform: translate(25%, -25%);\r\n  }\r\n`\r\n\r\nconst WrapButtonClear = styled.button`\r\n  background: transparent;\r\n  border: 0px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: var(--danger);\r\n  padding: 0px 2px;\r\n`\r\n\r\nconst WrapDiff = styled.div`\r\n  border: 1px solid #e9ecef;\r\n  & pre {\r\n    word-break: break-word;\r\n  }\r\n`\r\nconst WrapDiffTopBar = styled.div`\r\n  position: sticky;\r\n  display: flex;\r\n  top: 0;\r\n  height: 0px;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  > div {\r\n    background: white;\r\n    padding: 2px 2px;\r\n    border: 1px solid #ddd;\r\n  }\r\n`\r\n\r\nconst WrapButtonPreview = styled.button`\r\n  background: transparent;\r\n  border: 0px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #000;\r\n  padding: 0px 2px;\r\n`\r\n\r\nconst ModalDiffViewer = props => {\r\n  // console.warn(\"render ModalDiffViewer\", props)\r\n  const [selectorDiff, setSelectorDiff] = useState([])\r\n  const [currentDiff, setCurrentDiff] = useState(0)\r\n  let _data = null\r\n  if (props.fnList && props.fnList.fnGetData) {\r\n    _data = props.fnList.fnGetData()\r\n  }\r\n  console.warn(\"render ModalDiffViewer\", _data)\r\n  useEffect(() => {\r\n    var _selector = document.querySelectorAll(\r\n      'tr>td[class*=\"diff-removed\"]:first-child,tr>td[class*=\"diff-add\"]:first-child'\r\n    )\r\n    console.warn(\"count selector:\", _selector)\r\n    if (_selector && _selector.length > 0) {\r\n      setSelectorDiff(_selector)\r\n    }\r\n    // _selector[5].scrollIntoView();\r\n  }, [])\r\n  let countDiff = selectorDiff.length\r\n  if (_data && _data.oldValue && _data.newValue) {\r\n    return (\r\n      <>\r\n        <WrapDiffTopBar>\r\n          <div>\r\n            {countDiff > 0 && (\r\n              <div>\r\n                <button\r\n                  disabled={currentDiff <= 1}\r\n                  onClick={() => {\r\n                    let _current = currentDiff\r\n                    setCurrentDiff(_current - 1)\r\n                    if (selectorDiff && selectorDiff.length > _current - 2) {\r\n                      selectorDiff[_current - 2].scrollIntoView()\r\n                    }\r\n                  }}\r\n                >{`<`}</button>\r\n                {currentDiff > 0 ? (\r\n                  <span>{`${currentDiff} of ${countDiff}`}</span>\r\n                ) : (\r\n                  <span>{`Total: ${countDiff}`}</span>\r\n                )}\r\n                <button\r\n                  disabled={currentDiff >= countDiff}\r\n                  onClick={() => {\r\n                    let _current = currentDiff\r\n                    setCurrentDiff(_current + 1)\r\n                    if (selectorDiff && selectorDiff.length > _current) {\r\n                      selectorDiff[_current].scrollIntoView()\r\n                    }\r\n                  }}\r\n                >{`>`}</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </WrapDiffTopBar>\r\n        <WrapDiff>\r\n          <MyLib type=\"diff_viewer\" {..._data} />\r\n        </WrapDiff>\r\n      </>\r\n    )\r\n  } else {\r\n    return <div>No data!</div>\r\n  }\r\n}\r\nconst BtnDiffView = props => {\r\n  const row = props.row || {}\r\n  const configDiffView = props.configDiffView || {}\r\n  return (\r\n    <WrapButton\r\n      onClick={() => {\r\n        MyModal.showFromComponent(\r\n          props => {\r\n            return <ModalDiffViewer {...props} />\r\n          },\r\n          {\r\n            title: \"Diff Viewer\",\r\n            size: \"xl\",\r\n            modalScrollInside: true,\r\n            fnList: {\r\n              fnGetData: () => {\r\n                if (\r\n                  configDiffView &&\r\n                  configDiffView.fields &&\r\n                  configDiffView.fields.length > 0\r\n                ) {\r\n                  let _old = row[configDiffView.fields[0]]\r\n                  let _new = row[configDiffView.fields[1]]\r\n                  if (_old && _old[0] == \"{\" && _new && _new[0] == \"{\") {\r\n                    try {\r\n                      _old = JSON.parse(_old)\r\n                      _old = JSON.stringify(_old, null, 2)\r\n                      _new = JSON.parse(_new)\r\n                      _new = JSON.stringify(_new, null, 2)\r\n                    } catch (error) {\r\n                      console.warn(\"Parse json error!\")\r\n                    }\r\n                  }\r\n                  return {\r\n                    oldValue: _old, //_old,\r\n                    newValue: _new, //_new,\r\n                    showDiffOnly: false,\r\n                    ...configDiffView.props,\r\n                  }\r\n                }\r\n              },\r\n            },\r\n          }\r\n        )\r\n      }}\r\n    >\r\n      <i className=\"fa fa-window-restore\" />\r\n    </WrapButton>\r\n  )\r\n}\r\n\r\nconst PopoverEdit = props => {\r\n  const refInput = React.useRef(null)\r\n  return (\r\n    <div>\r\n      <div style={{ marginBottom: \"4px\" }}>\r\n        <input\r\n          ref={refInput}\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          defaultValue={props.cell || \"\"}\r\n        />\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"flex-end\",\r\n        }}\r\n      >\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => {\r\n            if (refInput.current) {\r\n              console.log(\"value:\", refInput.current.value)\r\n              if (props.ctc && props.ctc.updateFieldData) {\r\n                props.ctc.updateFieldData(refInput.current.value)\r\n              }\r\n            }\r\n            if (props.hide) {\r\n              props.hide()\r\n            }\r\n          }}\r\n        >\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nconst BtnEdit = props => {\r\n  const row = props.row || {}\r\n  const cell = props.cell || \"\"\r\n  const ctc = props.ctc || null\r\n  const config = props.config || {}\r\n  if (props.type == \"html\") {\r\n    return (\r\n      <WrapButton\r\n        onClick={() => {\r\n          console.log(\"hi\")\r\n          MyModal.showFromComponent(\r\n            propsComponent => {\r\n              return (\r\n                <ModalHtmlEditor\r\n                  {...propsComponent}\r\n                  htmlEditorLib={config.htmlEditorLib}\r\n                  onChange={itemOption => {\r\n                    console.warn(\r\n                      \"onChange:\",\r\n                      itemOption,\r\n                      itemOption.Value,\r\n                      ctc.valueCell\r\n                    )\r\n                    HUtils.runFuntion(ctc, \"updateFieldData\", [\r\n                      itemOption.Value === ctc.valueCell\r\n                        ? \"\"\r\n                        : itemOption.Value,\r\n                      {},\r\n                    ])\r\n                    //hidemodal\r\n                    HUtils.runFuntion(propsComponent.fnList, \"hideModal\", [])\r\n                  }}\r\n                  ctc={ctc}\r\n                  valueCell={ctc.valueCell}\r\n                  modeToolbar={config.modeToolbar}\r\n                  moreProps={config.morePropsHtmlEditor}\r\n                />\r\n              )\r\n            },\r\n            {\r\n              title: fnListMyTableCell.fnGetHeaderTitle(ctc.fnList),\r\n              showHeader: false,\r\n              backdrop: \"static\",\r\n              // backdrop: \"static\",\r\n              fnList: {\r\n                updateCell: (v, opts) => {\r\n                  console.warn(\"Updatecell:\", v, opts)\r\n                  ctc.updateFieldData(v, opts)\r\n                },\r\n              },\r\n            }\r\n          )\r\n        }}\r\n      >\r\n        <i className=\"fa fa-edit\" />\r\n      </WrapButton>\r\n    )\r\n  }\r\n  return (\r\n    <Popover\r\n      overlay={propsOverlay => {\r\n        return <PopoverEdit row={row} cell={cell} ctc={ctc} {...propsOverlay} />\r\n      }}\r\n      overlayClassName=\"m-popover\"\r\n      placement=\"topRight\"\r\n      destroyTooltipOnHide={true}\r\n    >\r\n      <WrapButton>\r\n        <i className=\"fa fa-edit\" />\r\n      </WrapButton>\r\n    </Popover>\r\n  )\r\n}\r\n\r\nconst BtnCheckBox = props => {\r\n  const { row, fnList } = props\r\n  const { configCheckbox } = props.more\r\n  let _fieldName = configCheckbox?.fieldName\r\n\r\n  let extra = {\r\n    ...props.extra,\r\n    ...fnList.fnGetExtraDataTable().Columns[_fieldName],\r\n    fieldName: _fieldName,\r\n  }\r\n  let _cellFieldName = props.row[_fieldName]\r\n  const ctc = useConfigTableCell({\r\n    props: {\r\n      ...props,\r\n      cell: _cellFieldName,\r\n      extra: extra,\r\n      fieldName: _fieldName,\r\n    },\r\n  })\r\n  let _newValue = !row[_fieldName]\r\n  if (_fieldName && row) {\r\n    return (\r\n      <div>\r\n        <input\r\n          defaultChecked={row[_fieldName]}\r\n          checked={row[_fieldName]}\r\n          type={\"checkbox\"}\r\n          onClick={e => {\r\n            ctc.updateFieldData(_newValue)\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div></div>\r\n  }\r\n}\r\n\r\nconst BtnFileUpload = props => {\r\n  let _showBadge = false\r\n  let _countFiles = 0\r\n  const { row, fnList } = props\r\n  const { configFileIcon } = props.more\r\n  let _configFile = configFileIcon.file || {}\r\n  let _fieldName = configFileIcon?.fieldName\r\n  let _extraFieldName = {\r\n    ...props.extra,\r\n    ...fnList.fnGetExtraDataTable().Columns[_fieldName],\r\n    fieldName: _fieldName,\r\n  }\r\n  let _cellFieldName = row[_fieldName]\r\n  const ctc = useConfigTableCell({\r\n    props: {\r\n      ...props,\r\n      cell: _cellFieldName,\r\n      extra: _extraFieldName,\r\n      fieldName: _fieldName,\r\n    },\r\n  })\r\n  if (configFileIcon?.showBadge) {\r\n    _showBadge = true\r\n    if (row[_fieldName] && row[_fieldName].Photos) {\r\n      _countFiles = row[_fieldName].Photos.length\r\n    }\r\n  }\r\n  if (_fieldName && row) {\r\n    return (\r\n      <WrapButtonUpload\r\n        onClick={() => {\r\n          ctc.onClickFiles({ ctc, canUpload: ctc.canEdit })\r\n        }}\r\n      >\r\n        <AiOutlineFile size={20} color={\"#6088b3\"} />\r\n        {fnListMyTableCell.fnRenderBadge(ctc.fnList, [{ count: _countFiles }])}\r\n      </WrapButtonUpload>\r\n    )\r\n  } else {\r\n    return <div></div>\r\n  }\r\n}\r\nconst BtnClear = props => {\r\n  const more = props.more || {}\r\n  const moreConfig = props.moreConfig || {}\r\n  let _valueEmpty = \"\"\r\n  if (more[KMore.configClear]) {\r\n    if (more[KMore.configClear].hasOwnProperty(\"value\")) {\r\n      _valueEmpty = more[KMore.configClear][\"value\"]\r\n    }\r\n  }\r\n  return (\r\n    <WrapButtonClear\r\n      className=\"a-shwhhover\"\r\n      title=\"Clear\"\r\n      onClick={() => {\r\n        console.warn(\"clear\", props)\r\n        HUtils.runFuntion(moreConfig.ctc, \"updateFieldData\", [_valueEmpty])\r\n      }}\r\n    >\r\n      <i className=\"fa fa-times\" />\r\n    </WrapButtonClear>\r\n  )\r\n}\r\nconst BtnDeleteRow = props => {\r\n  const more = props.more || {}\r\n  const row = props.row || {}\r\n  const oneTableCell = props.oneTableCell || {}\r\n  return (\r\n    <Popover\r\n      overlay={propsOverlay => {\r\n        return (\r\n          <div\r\n            style={{ width: \"250px\", maxHeight: \"300px\", maxWidth: \"300px\" }}\r\n          >\r\n            <MyUI\r\n              type={\"msgbox_confirm\"}\r\n              styleBody={{ whiteSpace: \"pre-wrap\" }}\r\n              title={\"Delete row\"}\r\n              msg={\"Are you sure?\"}\r\n              colorOK=\"danger\"\r\n              onOK={() => {\r\n                console.warn(\"onOK\", props, propsOverlay)\r\n                let _moreQuery = {}\r\n                HUtils.runFuntion(oneTableCell.fnList, \"fnRequestDelete\", [\r\n                  {\r\n                    row,\r\n                    moreQuery: _moreQuery,\r\n                    cbSuccess: () => {\r\n                      HUtils.runFuntion(oneTableCell.fnList, \"fnDeleteItem\", [\r\n                        row,\r\n                      ])\r\n                    },\r\n                  },\r\n                ])\r\n                if (propsOverlay.hide) {\r\n                  propsOverlay.hide()\r\n                }\r\n              }}\r\n              onCancel={() => {\r\n                console.warn(\"onCancel\")\r\n                if (propsOverlay.hide) {\r\n                  propsOverlay.hide()\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        )\r\n      }}\r\n      overlayClassName=\"m-popover\"\r\n      placement=\"topRight\"\r\n      destroyTooltipOnHide={true}\r\n    >\r\n      <WrapButtonClear\r\n        className=\"a-shwhhover\"\r\n        title=\"Delete row\"\r\n        onClick={() => {}}\r\n      >\r\n        <i className=\"fa fa-trash\" />\r\n      </WrapButtonClear>\r\n    </Popover>\r\n  )\r\n}\r\nconst BtnShowPreviewHTML = props => {\r\n  const cell = props.cell\r\n  return (\r\n    <WrapButtonPreview\r\n      className=\"a-shwhhover\"\r\n      title=\"Show HTML\"\r\n      onClick={() => {\r\n        console.warn(\"showPreviewHtml\", props)\r\n        MyModal.showFromComponent(<MyUI type=\"html\" html={cell} />, {\r\n          title: \"Show Preview HTML\",\r\n        })\r\n      }}\r\n    >\r\n      <i className=\"fa fa-eye\"></i>\r\n    </WrapButtonPreview>\r\n  )\r\n}\r\n\r\nconst BtnShowBlockMobile = props => {\r\n  const cell = props.cell\r\n  return (\r\n    <WrapButtonPreview\r\n      className=\"a-shwhhover\"\r\n      title=\"Show Preview Mobile\"\r\n      onClick={() => {\r\n        console.warn(\"showPreviewMobile\", props)\r\n        MyModal.showFromComponent(<MyUI type=\"block_mobile\" data={cell} />, {\r\n          title: \"Show Preview Mobile\",\r\n          size: \"md\",\r\n        })\r\n      }}\r\n    >\r\n      <i className=\"fa fa-eye\"></i>\r\n    </WrapButtonPreview>\r\n  )\r\n}\r\n\r\nconst BtnShowWarning = props => {\r\n  const cell = props.cell\r\n  const row = props.row\r\n  const configWarning = props.configWarning\r\n  let _msg = \"\"\r\n  let _color = \"#fd7e14\"\r\n  let _icon = \"fa-exclamation-triangle\"\r\n  if (configWarning && typeof configWarning == \"string\") {\r\n    _msg = configWarning\r\n  } else if (configWarning) {\r\n    if (configWarning.fieldName && row[configWarning.fieldName]) {\r\n      _msg = row[configWarning.fieldName]\r\n    } else if (configWarning.msg) {\r\n      _msg = configWarning.msg\r\n    }\r\n    if (configWarning.color) {\r\n      _color = configWarning.color\r\n    }\r\n    if (configWarning.icon) {\r\n      _icon = configWarning.icon\r\n    }\r\n  }\r\n  if (_msg) {\r\n    return (\r\n      <Tooltip overlay={_msg} placement=\"top\">\r\n        <WrapButtonPreview className=\"\" title={_msg} onClick={() => {}}>\r\n          <i style={{ color: _color }} className={`fa ${_icon}`}></i>\r\n        </WrapButtonPreview>\r\n      </Tooltip>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport default function MTC_BarTopRight(props) {\r\n  const oneTableCell = props.oneTableCell || {}\r\n  const moreBtns = props.moreBtns\r\n  const moreConfig = props.moreConfig || {}\r\n  const ctc = moreConfig.ctc || {}\r\n  const more = props.more || {}\r\n  const row = props.row || {}\r\n  const cell = props.cell\r\n  let _moreBtns = [...moreBtns]\r\n  let _configDiffView = moreConfig.configDiffView || more.configDiffView\r\n  if (_configDiffView && _configDiffView.show) {\r\n    let _canShowDiffView = true\r\n    if (_configDiffView.showCondition) {\r\n      for (let k of Object.keys(_configDiffView.showCondition)) {\r\n        if (row[k] !== _configDiffView.showCondition[k]) {\r\n          _canShowDiffView = false\r\n          break\r\n        }\r\n      }\r\n    }\r\n    if (_canShowDiffView) {\r\n      _moreBtns.unshift(\r\n        <BtnDiffView {...props} configDiffView={_configDiffView} />\r\n      )\r\n    }\r\n  }\r\n\r\n  // btn edit\r\n  let _showCanEdit = false\r\n  let _typeEdit = \"text\"\r\n  if (more[KMore.configEditIcon] && more[KMore.configEditIcon].using) {\r\n    if (oneTableCell.canEdit) {\r\n      _showCanEdit = true\r\n    }\r\n    if (_showCanEdit == true && more[KMore.configEditIcon].showWhen) {\r\n      for (let k of Object.keys(more[KMore.configEditIcon].showWhen)) {\r\n        if (row[k] != more[KMore.configEditIcon].showWhen[k]) {\r\n          _showCanEdit = false\r\n        }\r\n      }\r\n    }\r\n    if (more[KMore.configEditIcon].type) {\r\n      _typeEdit = more[KMore.configEditIcon].type\r\n    }\r\n  }\r\n  if (_showCanEdit) {\r\n    _moreBtns.unshift(\r\n      <BtnEdit\r\n        {...props}\r\n        key=\"btedit\"\r\n        ctc={ctc}\r\n        type={_typeEdit}\r\n        config={more[KMore.configEditIcon]}\r\n      />\r\n    )\r\n  }\r\n\r\n  // btn show file upload\r\n  let _showFileUpload = false\r\n  if (more[KMore.configFileIcon] && more[KMore.configFileIcon].show) {\r\n    _showFileUpload = true\r\n  }\r\n  if (_showFileUpload) {\r\n    _moreBtns.unshift(<BtnFileUpload key=\"fileupload\" {...props} />)\r\n  }\r\n\r\n  // btn check box\r\n  let _showCheckBox = false\r\n  if (more[KMore.configCheckbox] && more[KMore.configCheckbox].show) {\r\n    _showCheckBox = true\r\n  }\r\n  if (_showCheckBox) {\r\n    _moreBtns.unshift(<BtnCheckBox key=\"cb\" {...props} />)\r\n  }\r\n\r\n  //btn show preview html\r\n  let _showPreviewHTML = null\r\n  if (more[KMore.showPreviewHTML]) {\r\n    if (cell != null && cell != \"\") {\r\n      _showPreviewHTML = true\r\n    }\r\n  }\r\n  if (_showPreviewHTML) {\r\n    _moreBtns.unshift(<BtnShowPreviewHTML key=\"previewhtml\" {...props} />)\r\n  }\r\n\r\n  if (BtnEditInModal.canShow && BtnEditInModal.canShow(props)) {\r\n    _moreBtns.unshift(<BtnEditInModal key=\"editinmodal\" {...props} />)\r\n  }\r\n\r\n  // btn clear\r\n  let _showClear = null\r\n  if (more[KMore.showClear]) {\r\n    if (cell != null && cell != \"\") {\r\n      _showClear = true\r\n    }\r\n  }\r\n  if (_showClear) {\r\n    _moreBtns.push(<BtnClear key=\"clr\" {...props} />)\r\n  }\r\n\r\n  // btn delete row\r\n  let _showDeleteRow = null\r\n  if (more[KMore.showDeleteRow]) {\r\n    _showDeleteRow = true\r\n  }\r\n  if (_showDeleteRow) {\r\n    _moreBtns.push(<BtnDeleteRow key=\"dlrow\" {...props} />)\r\n  }\r\n\r\n  if (more[KMore.showBlockMobile]) {\r\n    _moreBtns.push(<BtnShowBlockMobile key=\"blockMobile\" {...props} />)\r\n  }\r\n\r\n  if (more[KMore.configWarning]) {\r\n    _moreBtns.push(\r\n      <BtnShowWarning\r\n        key=\"warning\"\r\n        {...props}\r\n        configWarning={more[KMore.configWarning]}\r\n      />\r\n    )\r\n  }\r\n\r\n  if (more[KMore.showTestCanEdit]) {\r\n    if (row.Id == \"41940\") {\r\n      console.warn(\"Test can edit:\", ctc)\r\n    }\r\n\r\n    _moreBtns.push(\r\n      <div>\r\n        <i\r\n          className=\"fa fa-pencil-square\"\r\n          style={\r\n            ctc.canEdit === true ? { color: \"#4dbd74\" } : { color: \"#f64e60\" }\r\n          }\r\n        ></i>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (_moreBtns && _moreBtns.length > 0) {\r\n    return <WrapIcon className=\"a-topRight\">{_moreBtns}</WrapIcon>\r\n  }\r\n  return <></>\r\n}\r\n","import { HUtils, MyUI, MyTableCellHelpers, HJson } from \"@macashipo/mlib\"\r\nimport { Tooltip } from \"src/core/components\"\r\nimport {\r\n  kfnGetSourceData,\r\n  kfnRenderBadge,\r\n  kfnGetHeaderTitle,\r\n  fnListMyPage,\r\n  kfnGetConfigInMore,\r\n  kfnGetConfigModal,\r\n  kfnGetIsHide,\r\n} from \"src/helpers/fnList\"\r\nimport * as AHOptions from \"src/core/helpers/options\"\r\nimport V from \"src/helpers/V\"\r\nimport { FlowGetCanShow, KMore } from \"src/helpers/Flows/TableCell\"\r\nconst kfnGetScreenCode = \"fnGetScreenCode\"\r\n\r\nconst fnListOfTableCell = {\r\n  init({ oneTableCell }) {\r\n    let _fnList = {\r\n      ...oneTableCell.fnList,\r\n    }\r\n    _fnList[kfnGetSourceData] = () => {\r\n      const { row, extra } = oneTableCell\r\n      let _optionKey = oneTableCell.extra.Type.source\r\n      let _sourceList = fnListMyPage.getSourceList(_fnList)\r\n      // console.warn(\"_sourceList\", _sourceList, fieldName, extra)\r\n      if (AHOptions.isHasLevelOptionKey(_optionKey)) {\r\n        return AHOptions.getOptionsByLevel(\r\n          _sourceList,\r\n          _optionKey,\r\n          row,\r\n          extra.Type.sourceField\r\n        )\r\n      } else if (_optionKey && _optionKey.startsWith(\"[\")) {\r\n        //bo sung truong hop optionKey la string json source\r\n        return HJson.getObj(_optionKey)\r\n      } else if (_optionKey && _optionKey.startsWith(\"f\")) {\r\n        let _optionField = _optionKey.slice(1, _optionKey.length)\r\n        if (row[_optionField] != null && Array.isArray(row[_optionField])) {\r\n          return row[_optionField]\r\n        } else if (row[_optionKey] != null && Array.isArray(row[_optionKey])) {\r\n          return row[_optionKey]\r\n        }\r\n        return []\r\n      } else {\r\n        return _sourceList[_optionKey] || []\r\n      }\r\n    }\r\n    _fnList[kfnRenderBadge] = ({ customMore, count, tooltip } = {}) => {\r\n      // console.info(kfnRenderBadge, count, tooltip, more, row)\r\n      const { row, more } = oneTableCell\r\n      return helpersOfTableCell.renderBadge({\r\n        more: customMore || more,\r\n        row,\r\n        count,\r\n        tooltip,\r\n      })\r\n    }\r\n\r\n    _fnList[kfnGetHeaderTitle] = ({ customTitle } = {}) => {\r\n      // console.warn(\"get Header title\", row, oneTableCell.row)\r\n      return V.Cell_GetHeaderTitle({ extra: oneTableCell.extra, customTitle })\r\n    }\r\n\r\n    _fnList[kfnGetConfigInMore] = (key = \"\", df) => {\r\n      const { more } = oneTableCell\r\n      let _result = df\r\n      if (more && more.hasOwnProperty(key)) {\r\n        _result = more[key]\r\n      }\r\n      return _result\r\n    }\r\n    _fnList[kfnGetConfigModal] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      return V.Cell_GetConfigModal({\r\n        extra,\r\n        more,\r\n        row,\r\n      })\r\n    }\r\n    _fnList[kfnGetIsHide] = () => {\r\n      const { row, extra, more } = oneTableCell\r\n      const cell = oneTableCell.getValue()\r\n      //check canshow\r\n      let _canShow = FlowGetCanShow({ extra, row, more })\r\n      // console.log(\"_canShow\", _canShow, oneTableCell.fieldName)\r\n      if (_canShow === false) {\r\n        return true\r\n      }\r\n      let _isHide = false\r\n      if (\r\n        more[KMore.hideWhenEmpty] &&\r\n        (cell === \"\" || cell == null || cell === 0)\r\n      ) {\r\n        return true\r\n      }\r\n      if (more[KMore.hideWhenNull] && cell == null) {\r\n        return true\r\n      }\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"]\r\n      ) {\r\n        if (\r\n          MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type][\"isHide\"](\r\n            oneTableCell\r\n          )\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n      return _isHide\r\n    }\r\n\r\n    _fnList.onSendMsg = msg => {\r\n      console.error(\"missing onSendMsg, need update fnList\", msg)\r\n    }\r\n    _fnList.onReExpand = () => {\r\n      const { row } = oneTableCell\r\n      HUtils.runFuntion(row, \"_fnForceUpdateDetail\")\r\n    }\r\n\r\n    //update fnList to oneTableCell again\r\n    oneTableCell.fnList = _fnList\r\n    return _fnList\r\n  },\r\n  fnGetScreenCode(ctc = {}, args = []) {\r\n    return HUtils.runFuntion(ctc.fnList, kfnGetScreenCode, args)\r\n  },\r\n}\r\n\r\nconst helpersOfTableCell = {\r\n  renderBadge({ more = {}, row = {}, count, tooltip } = {}) {\r\n    const configBadge = more.configBadge || more.badge\r\n    // console.warn(\"renderBadge\", more, count, row)\r\n    if (count != null || (configBadge && configBadge.show === true)) {\r\n      let _count = count\r\n      let _tooltip = tooltip\r\n      if (\r\n        configBadge &&\r\n        configBadge.fCount &&\r\n        row[configBadge.fCount] != null\r\n      ) {\r\n        _count = row[configBadge.fCount]\r\n      }\r\n      if (_count) {\r\n        if (configBadge && configBadge.fTooltip && row[configBadge.fTooltip]) {\r\n          _tooltip = row[configBadge.fTooltip]\r\n        }\r\n        if (_tooltip) {\r\n          return (\r\n            <Tooltip overlay={<MyUI type=\"html\" html={_tooltip} />}>\r\n              <span className=\"mct-ui-badge\">{_count}</span>\r\n            </Tooltip>\r\n          )\r\n        }\r\n        return <span className=\"mct-ui-badge\">{_count}</span>\r\n      }\r\n    }\r\n  },\r\n}\r\nexport { helpersOfTableCell, fnListOfTableCell }\r\n","/*eslint-disable @typescript-eslint/no-unused-vars */\r\nimport {\r\n  HOptions,\r\n  HUtils,\r\n  MyFormControlHelpers,\r\n  MyTableCellHelpers,\r\n  MyUI,\r\n  MyLoading,\r\n  MyTableCell,\r\n  OneTableCell,\r\n} from \"@macashipo/mlib\"\r\nimport cls from \"classnames\"\r\nimport React, { useState } from \"react\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport { fnListMyPage } from \"src/helpers/fnList\"\r\nimport apiWithConfigApi from \"src/services/apiConfigApi\"\r\nimport V from \"src/helpers/V\"\r\nimport { fnListOfTableCell, helpersOfTableCell } from \"./fnListOfTableCell\"\r\nimport useForceUpdate from \"./useForceUpdate\"\r\nimport {\r\n  FlowCheckApiShowModal,\r\n  FlowParseResponseAndNeedReload,\r\n} from \"src/helpers/Flows/TableCell\"\r\nconst kfnRequestUpdate = \"fnRequestUpdate\"\r\nconst kfnRequestCustom = \"fnRequestCustom\"\r\n\r\nfunction ModalContentFiles(props) {\r\n  const { ctc, more } = props\r\n  let _id = ctc.row.Id\r\n  let _screenCode = fnListOfTableCell.fnGetScreenCode(ctc)\r\n  let _configFileFromMore = {}\r\n  if (more) {\r\n    if (more.fID && ctc.row[more.fID]) {\r\n      _id = ctc.row[more.fID]\r\n    }\r\n    _configFileFromMore = more.configFile || more.file || {}\r\n  }\r\n  const configFile = {\r\n    needRequestPhotos: true,\r\n    pasteAsFile: true,\r\n    showUploadFromGGDrive: false,\r\n    ..._configFileFromMore,\r\n  }\r\n  const requestData = {\r\n    ScreenCode: _screenCode,\r\n    ProjectId: \"\",\r\n    Id: _id,\r\n    FieldName: ctc.fieldName,\r\n  }\r\n  // console.warn(\"render filemanager:\", requestData, ctc.fnList)\r\n  return (\r\n    <div>\r\n      <MyUI\r\n        type=\"file_manager\"\r\n        requestData={requestData}\r\n        fnList={props.fnList}\r\n        configFile={configFile}\r\n        canUpload={props.canUpload}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nconst ATCHelper = {\r\n  //can chuyen sang Flow\r\n  getCanEdit: ({ fieldName, extra, row, more }) => {\r\n    let _extra = extra || {}\r\n    let _more = more\r\n    let _canEdit = false\r\n    if (typeof _extra.CanEdit === \"boolean\") {\r\n      _canEdit = _extra.CanEdit\r\n    }\r\n    //check more.fCanEdit more.canEditF\r\n    if (_canEdit == true) {\r\n      if (_more.fCanEdit == null && _more.canEditF != null) {\r\n        _more.fCanEdit = _more.canEditF\r\n      }\r\n      if (typeof _more.fCanEdit === \"boolean\") {\r\n        _canEdit = _more.fCanEdit\r\n      } else if (typeof _more.fCanEdit === \"string\") {\r\n        if (_more.fCanEdit.length > 0) {\r\n          if (row[_more.fCanEdit] != null) {\r\n            _canEdit = row[_more.fCanEdit]\r\n          } else if (_more.fCanEdit.indexOf(\",\") > -1) {\r\n            let _arrcanEditF = _more.fCanEdit.split(\",\")\r\n            if (_arrcanEditF && _arrcanEditF.length > 0) {\r\n              for (let f of _arrcanEditF) {\r\n                if (row[f] == false) {\r\n                  //only need one cannot edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //check more.lockF more.fLock\r\n    if (_more.lockF != null || _more.fLock != null) {\r\n      let _fLock = _more.lockF || _more.fLock\r\n      if (typeof _fLock == \"boolean\") {\r\n        _canEdit = !_fLock\r\n      } else if (typeof _fLock == \"string\") {\r\n        if (_fLock.length > 0) {\r\n          if (row[_fLock] != null) {\r\n            _canEdit = !row[_fLock]\r\n          } else if (_fLock.indexOf(\",\") > -1) {\r\n            let _arrLock = _fLock.split(\",\")\r\n            if (_arrLock && _arrLock.length > 0) {\r\n              for (let f of _arrLock) {\r\n                if (row[f] == true) {\r\n                  //only need one lock edit -> cannot edit\r\n                  _canEdit = false\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return _canEdit\r\n  },\r\n}\r\n\r\nvar countForceUpdate = 0\r\n// var countForceUpdateMax = 1000\r\nfunction useConfigTableCell({ props } = {}) {\r\n  countForceUpdate++\r\n  const [valueFU, setValueFU] = useState(0) // integer state\r\n  const [valueCell, setValueCell] = useState(\r\n    props.cell === null || props.cell === undefined ? \"\" : props.cell\r\n  ) // integer state\r\n  const { cell, extra } = props\r\n  const { fieldName } = extra\r\n  const [isUpdating, setIsUpdating] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const refOneTableCell = React.useRef(new OneTableCell(props))\r\n  const oneTableCell = refOneTableCell.current\r\n  // update row and extra to oneTableCell, may be it will change so need update\r\n  // oneTableCell.update(props.row, extra)\r\n  oneTableCell.row = props.row\r\n  oneTableCell.extra = extra\r\n  if (props.custom) {\r\n    if (oneTableCell[\"_updateCustom\"] !== true) {\r\n      oneTableCell.more = { ...props.custom.more, ...oneTableCell.more }\r\n      oneTableCell[\"_updateCustom\"] = true\r\n      // console.warn(\"new more:\", oneTableCell.more)\r\n    }\r\n  }\r\n\r\n  const row = oneTableCell.row\r\n  const refFnList = React.useRef(\r\n    fnListOfTableCell.init({ oneTableCell, row, extra, cell })\r\n  )\r\n  const fnList = refFnList.current\r\n  if (oneTableCell._onePage == null) {\r\n    oneTableCell.updateOnePage(fnListMyPage.fnGetOnePage(fnList))\r\n  }\r\n  const more = oneTableCell.more\r\n  // const forceUpdate = () => {\r\n  //   console.warn(\"forceUpdate\", countForceUpdate)\r\n  //   setValueFU(valueFU + 1)\r\n  // }\r\n  const forceUpdate = useForceUpdate()\r\n  //chua hieu vi sao 2 forceUpdate se hoat dong khac nhau\r\n  //setValueFU nhieu luc ko hoat dong\r\n\r\n  const updateValueCellFromRow = ({ cbWhenEqual } = {}) => {\r\n    let _value = row[fieldName]\r\n    console.log(\"updateValueCellFromRow:\", _value)\r\n    if (valueCell != _value) {\r\n      setValueCell(_value === null || _value === undefined ? \"\" : _value)\r\n    } else {\r\n      console.log(\"call cbWhenEqual\")\r\n      if (cbWhenEqual) {\r\n        cbWhenEqual()\r\n      }\r\n    }\r\n  }\r\n\r\n  //parse\r\n  if (row.IsLocked === true) {\r\n    oneTableCell.canEdit = false\r\n  } else if (\r\n    oneTableCell.canEdit == null ||\r\n    oneTableCell.canEdit === true ||\r\n    oneTableCell.canEdit === false\r\n  ) {\r\n    oneTableCell.canEdit = ATCHelper.getCanEdit({\r\n      extra: oneTableCell.extra,\r\n      more,\r\n      row,\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    // console.log(\r\n    //   \"props.cell change:\",\r\n    //   oneTableCell.fieldName,\r\n    //   valueCell,\r\n    //   props.cell\r\n    // )\r\n    if (\r\n      typeof props.cell === \"string\" ||\r\n      typeof props.cell === \"number\" ||\r\n      typeof props.cell === \"boolean\"\r\n    ) {\r\n      if (props.cell != valueCell) {\r\n        // console.log(\"update valueCell:\", valueCell, props.cell)\r\n        setValueCell(props.cell)\r\n      }\r\n    } else {\r\n      //truong hop con lai luon update valueCell\r\n      setValueCell(props.cell)\r\n    }\r\n  }, [props.cell])\r\n\r\n  // React.useEffect(() => {\r\n  //   console.log(\"props change:\", oneTableCell.fieldName, valueCell, props.cell)\r\n  // }, [props])\r\n\r\n  // if (typeof props.cell === \"boolean\") {\r\n  //   console.warn(\"aaaaa\", props.cell, valueCell, row)\r\n  //   if (valueCell != props.cell) {\r\n  //     setValueCell(props.cell)\r\n  //   }\r\n  // }\r\n\r\n  // console.warn(\r\n  //   \"useConfigTableCell:\",\r\n  //   oneTableCell.fieldName,\r\n  //   countForceUpdate,\r\n  //   oneTableCell,\r\n  //   isUpdating\r\n  // )\r\n\r\n  // console.log(\"render cell\", fieldName)\r\n  return {\r\n    forceUpdate,\r\n    fnList,\r\n    updateValueCellFromRow,\r\n    oneTableCell,\r\n    extra: oneTableCell.extra,\r\n    row: oneTableCell.row,\r\n    fieldName: oneTableCell.fieldName,\r\n    more: oneTableCell.more,\r\n    moreObj: oneTableCell.more,\r\n    canEdit: oneTableCell.canEdit,\r\n    updateFieldData: (v, opts = {}) => {\r\n      console.warn(\"updateFieldData:\", v, oneTableCell)\r\n      if (v != cell && !(cell == null && v == \"\")) {\r\n        setIsUpdating(true)\r\n        HUtils.runFuntion(oneTableCell.fnList, kfnRequestUpdate, [\r\n          {\r\n            ...opts,\r\n            apiController: fnListMyPage.fnGetApiPath(fnList),\r\n            fieldName: opts.fieldName || oneTableCell.fieldName,\r\n            row: oneTableCell.row,\r\n            newValue: v,\r\n            cbSuccess: v => {\r\n              console.warn(\"cbss\", v)\r\n              setIsUpdating(false)\r\n              fnListMyPage.fnForceUpdateTable(fnList, [])\r\n              if (opts && opts.cbSuccess) {\r\n                opts.cbSuccess(v)\r\n              }\r\n              //bo sung cbSuccessUpdate danh cho cell ben trong cell\r\n              if (props.fnList && props.fnList.cbSuccessUpdate) {\r\n                props.fnList.cbSuccessUpdate()\r\n              }\r\n            },\r\n            cbError: e => {\r\n              console.warn(\"cber\", e)\r\n              setIsUpdating(false)\r\n              if (opts && opts.cbError) {\r\n                opts.cbError(v)\r\n              }\r\n            },\r\n          },\r\n        ])\r\n      } else {\r\n        console.warn(\"not update:\", v, cell, opts)\r\n        if (opts && opts.cbError) {\r\n          opts.cbError({ msg: \"Nothing to change\" })\r\n        }\r\n      }\r\n    },\r\n    requestCustom: (opts = {}) => {\r\n      console.log(\"requestCustom:\", opts)\r\n      HUtils.runFuntion(oneTableCell.fnList, kfnRequestCustom, [\r\n        {\r\n          ...opts,\r\n        },\r\n      ])\r\n    },\r\n    getSharedConfig: () => {\r\n      return {}\r\n    },\r\n    getMoreAttrsFromCustomConfig: () => {\r\n      if (\r\n        MyTableCellHelpers[\"ConfigByTypes\"] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type] &&\r\n        MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      ) {\r\n        return MyTableCellHelpers[\"ConfigByTypes\"][oneTableCell.type].moreAttrs\r\n      }\r\n      return {}\r\n    },\r\n    getMorePropsButton: ({ defaultStyle } = {}) => {\r\n      let _moreProps = {}\r\n      let _style = defaultStyle || {}\r\n      if (isFetching) {\r\n        _moreProps.disabled = true\r\n      }\r\n      //bo sung style button from more\r\n      if (more && more.button && more.button.style) {\r\n        _style = { ..._style, ...more.button.style }\r\n      }\r\n      if (_style && Object.keys(_style).length > 0) {\r\n        _moreProps.style = _style\r\n      }\r\n      return _moreProps\r\n    },\r\n    renderHide: () => {\r\n      return <div className=\"disabled\"></div>\r\n    },\r\n    isUpdating: isUpdating,\r\n    setIsUpdating: v => {\r\n      setIsUpdating(v)\r\n    },\r\n    isFetching,\r\n    setIsFetching,\r\n    valueCell,\r\n    setValueCell,\r\n    classNameWrap: (df = \"\", customConfig = {}) => {\r\n      return cls(df, {\r\n        disabled: oneTableCell.canEdit === false,\r\n        \"a-scrwhhover\":\r\n          more.scrwhhover != null\r\n            ? more.scrwhhover\r\n            : customConfig.scrwhhover || false,\r\n        \"styled-mini\": more.styledMini,\r\n        ...(props.custom != null && props.custom.className != null\r\n          ? {\r\n              [props.custom.className]: true,\r\n            }\r\n          : {}),\r\n      })\r\n    },\r\n    styleWrap: (df = {}, overideStyle = {}) => {\r\n      return V.Cell_GetStyleCell({\r\n        extra,\r\n        more,\r\n        row,\r\n        defaultStyle: df,\r\n        overideStyle,\r\n      })\r\n    },\r\n    // getSourceData: fnList.fnGetSourceData,\r\n    onUpdateRow: newRow => {\r\n      HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n        {\r\n          row,\r\n          newRow,\r\n        },\r\n      ])\r\n    },\r\n    getTextDisplaySelect: () => {\r\n      // console.warn(\"getTextDisplaySelect:\", valueCell)\r\n      let _display = \"\"\r\n      if (more.fDisplay && row[more.fDisplay]) {\r\n        _display = row[more.fDisplay]\r\n      } else if (more.fShow && row[more.fShow]) {\r\n        _display = row[more.fShow]\r\n      }\r\n      if (_display == \"\" && valueCell != null && valueCell !== \"\") {\r\n        let _sourceData = fnList.fnGetSourceData()\r\n        // console.warn(\"sourceData:\", _sourceData)\r\n        let _textFromOption = HOptions.getTextDisplayOfValueFromOptions(\r\n          _sourceData,\r\n          valueCell\r\n        )\r\n        if (_textFromOption) {\r\n          _display = _textFromOption\r\n        }\r\n      }\r\n      let _alwayShowSelectValueIfNoText = true //can cau hinh\r\n      if (_display == \"\" && _alwayShowSelectValueIfNoText) {\r\n        _display = valueCell || \"\"\r\n      }\r\n      return _display\r\n    },\r\n    renderTopRight: (moreBtns = [], moreConfig = {}) => {\r\n      return (\r\n        <MyTableCell\r\n          {...props}\r\n          fnList={fnList}\r\n          more={more}\r\n          oneTableCell={oneTableCell}\r\n          type=\"_barTopRight\"\r\n          moreBtns={moreBtns}\r\n          moreConfig={moreConfig}\r\n        />\r\n      )\r\n    },\r\n    renderLoadingOverlay: () => {\r\n      return (\r\n        <div className=\"a-overlay-center\">\r\n          <MyLoading type=\"threedotsvertical\" size={12} />\r\n        </div>\r\n      )\r\n    },\r\n    onClickForm: ({ customMore, cbSuccess, customShowForm } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickForm:\", _more)\r\n      setIsFetching(true)\r\n      FlowCheckApiShowModal({\r\n        extra,\r\n        row,\r\n        more,\r\n        fnList: fnList,\r\n        cb: ({ canShow, config }) => {\r\n          if (canShow) {\r\n            const configForm = oneTableCell.getConfigForm({ customMore: _more })\r\n            let _defaultValuesForm = row\r\n            if (_more.fDefaultValues) {\r\n              if (row[_more.fDefaultValues]) {\r\n                _defaultValuesForm = row[_more.fDefaultValues]\r\n              } else {\r\n                _defaultValuesForm = {}\r\n              }\r\n            }\r\n            if (configForm) {\r\n              const configFormToShow = MyFormControlHelpers[\r\n                \"getConfigFormFromConfigV1\"\r\n              ](configForm, {\r\n                defaultValues: _defaultValuesForm,\r\n                fnList: {\r\n                  ...fnList,\r\n                  onSubmitForm: (valuesForm, { myForm }) => {\r\n                    console.warn(\"onSubmitForm:\", valuesForm)\r\n                    const configApi = oneTableCell.getConfigApi({\r\n                      customMore: _more,\r\n                    })\r\n                    return new Promise((resolve, reject) => {\r\n                      if (configApi) {\r\n                        configApi.query = Object.assign(\r\n                          configApi.query,\r\n                          valuesForm\r\n                        )\r\n                        apiWithConfigApi(configApi)\r\n                          .then(res => {\r\n                            console.warn(\"onClickBtn API rs\", res)\r\n                            FlowParseResponseAndNeedReload({\r\n                              extra,\r\n                              row,\r\n                              fieldName,\r\n                              more,\r\n                              oneTableCell: oneTableCell,\r\n                              response: res,\r\n                            })\r\n                            if (myForm.closeMyModal) {\r\n                              myForm.closeMyModal()\r\n                            }\r\n                            cbSuccess && cbSuccess(res)\r\n                            resolve(res)\r\n                          })\r\n                          .catch(error => {\r\n                            reject(error)\r\n                          })\r\n                      } else {\r\n                        console.warn(\"Missing configApi\")\r\n                        reject(\"Missing configApi\")\r\n                      }\r\n                    })\r\n                  },\r\n                },\r\n              })\r\n              const configModal = oneTableCell.getConfigModal({\r\n                customMore: _more,\r\n              })\r\n              if (customShowForm) {\r\n                customShowForm(configFormToShow, { ...configModal })\r\n              } else {\r\n                MyModal.showFromMyForm(configFormToShow, { ...configModal })\r\n              }\r\n            } else {\r\n              console.error(\"Missing configForm:\", configForm)\r\n            }\r\n          }\r\n          setIsFetching(false)\r\n        },\r\n      })\r\n    },\r\n    onClickApi: ({\r\n      customMore,\r\n      cbSuccess,\r\n      cbError,\r\n      cbBeforeRequest,\r\n      cbAfterRequest,\r\n    } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickApi:\", _more)\r\n      const configApi = oneTableCell.getConfigApi({ customMore: _more })\r\n      if (_more.confirmMsg) {\r\n        MyModal.showConfirm({\r\n          title: _more.titleConfirm || \"Confirm\",\r\n          msg: _more.confirmMsg,\r\n          onClickOK: cModal => {\r\n            if (configApi) {\r\n              if (cbBeforeRequest) {\r\n                cbBeforeRequest()\r\n              }\r\n              apiWithConfigApi(configApi)\r\n                .then(res => {\r\n                  console.warn(\"onClickBtn API rs\", res)\r\n                  FlowParseResponseAndNeedReload({\r\n                    extra,\r\n                    row,\r\n                    fieldName,\r\n                    more: _more,\r\n                    oneTableCell: oneTableCell,\r\n                    response: res,\r\n                  })\r\n                })\r\n                .finally(() => {\r\n                  if (cbAfterRequest) {\r\n                    cbAfterRequest()\r\n                  }\r\n                })\r\n            } else {\r\n              console.warn(\"Missing configApi\")\r\n            }\r\n            if (cModal && cModal.hide) {\r\n              cModal.hide()\r\n            }\r\n          },\r\n        })\r\n      } else {\r\n        if (configApi) {\r\n          if (cbBeforeRequest) {\r\n            cbBeforeRequest()\r\n          }\r\n          apiWithConfigApi(configApi)\r\n            .then(res => {\r\n              console.warn(\"onClickBtn API rs\", res)\r\n              FlowParseResponseAndNeedReload({\r\n                extra,\r\n                row,\r\n                fieldName,\r\n                more: _more,\r\n                oneTableCell: oneTableCell,\r\n                response: res,\r\n              })\r\n            })\r\n            .finally(() => {\r\n              if (cbAfterRequest) {\r\n                cbAfterRequest()\r\n              }\r\n            })\r\n        } else {\r\n          console.warn(\"Missing configApi\")\r\n          if (cbError) {\r\n            cbError()\r\n          }\r\n        }\r\n      }\r\n    },\r\n    onClickFiles: ({ ctc, customMore, canUpload } = {}) => {\r\n      let _more = customMore || more\r\n      console.warn(\"onClickFiles:\", _more)\r\n      MyModal.showFromComponent(\r\n        propsComponent => {\r\n          return (\r\n            <ModalContentFiles\r\n              {...propsComponent}\r\n              more={_more}\r\n              canUpload={canUpload}\r\n              ctc={ctc}\r\n            />\r\n          )\r\n        },\r\n        {\r\n          title: \"Modal\",\r\n          backdrop: \"static\",\r\n          size: \"xl\",\r\n          showHeader: false,\r\n          fnList: {\r\n            updateCell: (v, opts) => {\r\n              console.warn(\"Updatecell:\", v, opts)\r\n            },\r\n            fnGetApiPath: () => {\r\n              return fnListMyPage.fnGetApiPath(fnList)\r\n            },\r\n            onChangeData: data => {\r\n              console.warn(\"onChangeData:\", data, cell)\r\n              if (data && cell) {\r\n                //server hien tra ve Cell.Id = null nen de bo sung them, chi can chua Photos\r\n                if (\r\n                  data.Id === cell.Id ||\r\n                  (cell.hasOwnProperty &&\r\n                    data.hasOwnProperty &&\r\n                    cell.hasOwnProperty(\"Photos\") &&\r\n                    data.hasOwnProperty(\"Photos\"))\r\n                ) {\r\n                  HUtils.mergeObjIfExist(row[fieldName], data)\r\n                  HUtils.runFuntion(oneTableCell.fnList, \"onUpdateRow\", [\r\n                    {\r\n                      row,\r\n                      newRow: row,\r\n                    },\r\n                  ])\r\n                  forceUpdate()\r\n                } else {\r\n                  console.warn(\"Update data row, wrong ID\", data, cell)\r\n                }\r\n              } else {\r\n                console.warn(\"Update data row, wrong data\", data, cell)\r\n              }\r\n            },\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n\r\nexport { fnListOfTableCell, helpersOfTableCell }\r\nexport default useConfigTableCell\r\n","import { apiWithConfigApi } from \"src/core/helpers/api\"\r\nexport default apiWithConfigApi\r\n","import React from \"react\"\r\nimport { MyUI, HUtils, MyLib, MyBase } from \"@macashipo/mlib\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport styled from \"styled-components\"\r\nimport { Button } from \"reactstrap\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\n\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  & > div {\r\n    max-height: 100px;\r\n    overflow: auto;\r\n    & p {\r\n      // display: initial;\r\n      // vertical-align: text-top;\r\n      margin-bottom: 0px;\r\n      margin-block-start: 0px;\r\n      margin-block-end: 0;\r\n      line-height: 1rem;\r\n      text-indent: 0px;\r\n    }\r\n    & br {\r\n      display: initial;\r\n      vertical-align: text-top;\r\n    }\r\n  }\r\n`\r\nconst WrapModal = styled.div`\r\n  word-break: normal;\r\n  & .rdw-editor-main {\r\n    border: 1px solid #f1f1f1;\r\n    min-height: 100px;\r\n    max-height: 300px;\r\n    padding: 0px 5px;\r\n  }\r\n  & .a-mode-textarea textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n`\r\nconst ModeType = {\r\n  html: \"html\",\r\n  textarea: \"textarea\",\r\n}\r\n\r\nfunction ModalHtmlEditor(props) {\r\n  const {\r\n    sourceData,\r\n    valueSelected,\r\n    onChange,\r\n    valueCell,\r\n    fnList,\r\n    moreProps,\r\n    modeToolbar,\r\n  } = props\r\n  const [v, setV] = React.useState(valueCell || \"\")\r\n  const [mode, setMode] = React.useState(ModeType.html)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  // console.warn(\"props html editor:\", props)\r\n  return (\r\n    <WrapModal style={{ maxHeight: \"calc(100vh - 5rem)\" }}>\r\n      {MyModal.renderHeader({\r\n        cModal: props.inMyModal,\r\n        title: props => {\r\n          return (\r\n            <>\r\n              <div className=\"btn-group\">\r\n                <Button\r\n                  onClick={() => {\r\n                    setMode(ModeType.html)\r\n                  }}\r\n                  color={mode === ModeType.html ? \"primary\" : \"secondary\"}\r\n                >\r\n                  HTML\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    try {\r\n                      setMode(ModeType.textarea)\r\n                    } catch (error) {\r\n                      console.warn(\"parse json error!\")\r\n                    }\r\n                  }}\r\n                  color={mode === ModeType.textarea ? \"primary\" : \"secondary\"}\r\n                >\r\n                  Code\r\n                </Button>\r\n              </div>\r\n              <div\r\n                className=\"btn-group\"\r\n                style={{ position: \"absolute\", right: \"3rem\" }}\r\n              >\r\n                <Button\r\n                  disabled={isLoading}\r\n                  onClick={() => {\r\n                    HUtils.runFuntion(fnList, \"updateCell\", [\r\n                      v,\r\n                      {\r\n                        cbSuccess: r => {\r\n                          console.warn(\"cbSuccess:\", r)\r\n                          setIsLoading(false)\r\n                          HUtils.runFuntion(fnList, \"hideModal\", [])\r\n                        },\r\n                        cbError: e => {\r\n                          console.warn(\"cbErrro:\", e)\r\n                          if (e.msg) {\r\n                            AHUI.showToastWarning(e.msg)\r\n                          }\r\n                          setIsLoading(false)\r\n                        },\r\n                      },\r\n                    ])\r\n                  }}\r\n                  color={\"success\"}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </div>\r\n            </>\r\n          )\r\n        },\r\n      })}\r\n      <div>\r\n        {mode === ModeType.html && (\r\n          <div className=\"a-mode-html\">\r\n            {props.htmlEditorLib == \"react-rte\" ? (\r\n              <MyLib\r\n                type=\"react_rte\"\r\n                html={v}\r\n                onChange={html => {\r\n                  setV(html)\r\n                }}\r\n                modeToolbar={modeToolbar}\r\n                moreProps={moreProps}\r\n              />\r\n            ) : (\r\n              <MyLib\r\n                type=\"draft_wysiwyg\"\r\n                html={v}\r\n                onBlur={({ html }) => {\r\n                  console.warn(\"AAA\", html)\r\n                  if (html != v) {\r\n                    setV(html)\r\n                  }\r\n                }}\r\n                modeToolbar={modeToolbar}\r\n                moreProps={moreProps}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n        {mode === ModeType.textarea && (\r\n          <div className=\"a-mode-textarea\">\r\n            <MyBase\r\n              type=\"textarea\"\r\n              value={v}\r\n              onChange={v => {\r\n                setV(v)\r\n              }}\r\n              attrs={{}}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </WrapModal>\r\n  )\r\n}\r\n\r\nexport default ModalHtmlEditor\r\n","import React from \"react\"\r\nimport { MyUI, HUtils, MyLib, MyBase } from \"@macashipo/mlib\"\r\nimport { MyModal } from \"src/core/components\"\r\nimport useConfigTableCell from \"../../hooks/useConfigTableCell\"\r\nimport { fnListMyTableCell } from \"src/helpers/fnList\"\r\nimport styled from \"styled-components\"\r\nimport { Button } from \"reactstrap\"\r\nimport * as AHUI from \"src/core/helpers/ui\"\r\nimport ModalHtmlEditor from \"../../MyUI/Types/html_editor\"\r\n\r\nconst WrapCell = styled.div`\r\n  cursor: pointer;\r\n  padding: 2px;\r\n  & > div {\r\n    max-height: 100px;\r\n    overflow: auto;\r\n    & p {\r\n      // display: initial;\r\n      // vertical-align: text-top;\r\n      margin-bottom: 0px;\r\n      margin-block-start: 0px;\r\n      margin-block-end: 0;\r\n      line-height: 1rem;\r\n      text-indent: 0px;\r\n    }\r\n    & br {\r\n      display: initial;\r\n      vertical-align: text-top;\r\n    }\r\n  }\r\n`\r\nconst WrapModal = styled.div`\r\n  & .rdw-editor-main {\r\n    border: 1px solid #f1f1f1;\r\n    min-height: 100px;\r\n    max-height: 300px;\r\n    padding: 0px 5px;\r\n  }\r\n  & .a-mode-textarea textarea {\r\n    // border: 1px solid rgb(233, 236, 239);\r\n    // border-radius: 4px;\r\n    width: 100%;\r\n    min-height: 50vh;\r\n    outline: none;\r\n    border: 1px solid #e9ecef;\r\n  }\r\n`\r\n\r\nexport default function MTCHtmlEditor(props) {\r\n  const ctc = useConfigTableCell({ props })\r\n  // console.warn(\"render MTCText:\", props)\r\n  return (\r\n    <WrapCell\r\n      className={ctc.classNameWrap(\"mct-html_editor\")}\r\n      onClick={() => {\r\n        if (ctc.canEdit) {\r\n          MyModal.showFromComponent(\r\n            propsComponent => {\r\n              return (\r\n                <ModalHtmlEditor\r\n                  {...propsComponent}\r\n                  onChange={itemOption => {\r\n                    console.warn(\r\n                      \"onChange:\",\r\n                      itemOption,\r\n                      itemOption.Value,\r\n                      ctc.valueCell\r\n                    )\r\n                    HUtils.runFuntion(ctc, \"updateFieldData\", [\r\n                      itemOption.Value === ctc.valueCell\r\n                        ? \"\"\r\n                        : itemOption.Value,\r\n                      {},\r\n                    ])\r\n                    //hidemodal\r\n                    HUtils.runFuntion(propsComponent.fnList, \"hideModal\", [])\r\n                  }}\r\n                  ctc={ctc}\r\n                  valueCell={ctc.valueCell}\r\n                />\r\n              )\r\n            },\r\n            {\r\n              title: fnListMyTableCell.fnGetHeaderTitle(ctc.fnList),\r\n              showHeader: false,\r\n              backdrop: \"static\",\r\n              // backdrop: \"static\",\r\n              fnList: {\r\n                updateCell: (v, opts) => {\r\n                  console.warn(\"Updatecell:\", v, opts)\r\n                  ctc.updateFieldData(v, opts)\r\n                },\r\n              },\r\n            }\r\n          )\r\n        }\r\n      }}\r\n    >\r\n      <MyUI\r\n        type=\"html\"\r\n        html={ctc.valueCell}\r\n        style={{ ...ctc.more.styleControl }}\r\n      />\r\n    </WrapCell>\r\n  )\r\n}\r\n\r\nexport { ModalHtmlEditor }\r\n"],"sourceRoot":""}