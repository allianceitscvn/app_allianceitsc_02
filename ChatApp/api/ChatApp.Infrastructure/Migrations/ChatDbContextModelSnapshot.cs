// <auto-generated />
using System;
using System.Text.Json;
using ChatApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatApp.Infrastructure.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("chat")
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "chat", "ConversationType", new[] { "direct", "group", "external_group" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationAuditExternal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalSystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("PayloadSnapshot")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("IxExtAuditConv");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IxExtAuditCreatedAt");

                    b.ToTable("ConversationAuditExternal", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationMembers", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("IxConvMembersConvActive")
                        .HasFilter("\"IsActive\"");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IxConvMembersUser");

                    b.ToTable("ConversationMembers", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationMetadata", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("ConversationId");

                    b.ToTable("ConversationMetadata", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationReadState", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastReadMessageId")
                        .HasColumnType("uuid");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("LastReadMessageId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IxReadStateUser");

                    b.ToTable("ConversationReadState", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Conversations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Conversations", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("ConversationId", "CreatedAt")
                        .HasDatabaseName("IxMessagesConvCreatedAt")
                        .HasFilter("\"IsDeleted\" = FALSE");

                    b.HasIndex("ConversationId", "CreatedAt", "Id")
                        .HasDatabaseName("IxMessagesConvCreatedIdDesc")
                        .HasFilter("\"IsDeleted\" = FALSE");

                    b.ToTable("Messages", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.OAuthClientSecrets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Alg")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("Iterations")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("NotBefore")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IxClientSecretsClient");

                    b.ToTable("OAuthClientSecrets", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.OAuthClients", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string[]>("IpAllowlist")
                        .HasColumnType("cidr[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("OAuthClients", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ApplicationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Views.ViewConversationLastMessage", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastMessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LastMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LastMessageSenderId")
                        .HasColumnType("uuid");

                    b.ToTable((string)null);

                    b.ToView("VConversationLastMessage", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Views.ViewMyConversations", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConversationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastMessageContent")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastMessageSenderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("TitleByMember")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UnreadCount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ToTable((string)null);

                    b.ToView("VMyConversations", "chat");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationAuditExternal", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.Conversations", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationMembers", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.Conversations", "Conversation")
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatApp.Domain.Entities.Users", "User")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationMetadata", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.Conversations", "Conversation")
                        .WithOne("ConversationMetadata")
                        .HasForeignKey("ChatApp.Domain.Entities.ConversationMetadata", "ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.ConversationReadState", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.Conversations", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatApp.Domain.Entities.Messages", "LastReadMessage")
                        .WithMany("ReadStatesPointingHere")
                        .HasForeignKey("LastReadMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ChatApp.Domain.Entities.Users", "User")
                        .WithMany("ConversationReadStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("LastReadMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Conversations", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.Users", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Messages", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.Conversations", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatApp.Domain.Entities.Users", "SenderUser")
                        .WithMany("Messages")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.OAuthClientSecrets", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.OAuthClients", "Client")
                        .WithMany("Secrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.OAuthClients", b =>
                {
                    b.HasOne("ChatApp.Domain.Entities.Users", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Conversations", b =>
                {
                    b.Navigation("ConversationMetadata");

                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Messages", b =>
                {
                    b.Navigation("ReadStatesPointingHere");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.OAuthClients", b =>
                {
                    b.Navigation("Secrets");
                });

            modelBuilder.Entity("ChatApp.Domain.Entities.Users", b =>
                {
                    b.Navigation("ConversationMembers");

                    b.Navigation("ConversationReadStates");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
